Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> goal
Rule 1     goal -> def
Rule 2     goal -> def goal
Rule 3     def -> defv
Rule 4     def -> deff
Rule 5     defv -> type defv_multi SEMICOL
Rule 6     defv_multi -> id_adv array
Rule 7     defv_multi -> id_adv assign
Rule 8     defv_multi -> id_adv array COMMA defv_multi
Rule 9     defv_multi -> id_adv assign COMMA defv_multi
Rule 10    id_adv -> ID
Rule 11    id_adv -> TIMES id_adv
Rule 12    array -> empty
Rule 13    array -> LBRACK IVAL RBRACK
Rule 14    deff -> type id_adv LPAREN s_args RPAREN LBRACE body RBRACE
Rule 15    s_args -> empty
Rule 16    s_args -> VOID
Rule 17    s_args -> args
Rule 18    args -> arg
Rule 19    args -> arg COMMA args
Rule 20    arg -> type id_adv array
Rule 21    body -> pre_defv_many pre_stmt_many
Rule 22    pre_defv_many -> empty
Rule 23    pre_defv_many -> defv_many
Rule 24    defv_many -> defv
Rule 25    defv_many -> defv defv_many
Rule 26    pre_stmt_many -> empty
Rule 27    pre_stmt_many -> stmt_many
Rule 28    stmt_many -> stmt
Rule 29    stmt_many -> stmt stmt_many
Rule 30    stmt -> SEMICOL
Rule 31    stmt -> LBRACE body RBRACE
Rule 32    stmt -> expr_many SEMICOL
Rule 33    stmt -> WHILE LPAREN expr_many RPAREN stmt
Rule 34    stmt -> FOR LPAREN expr_many SEMICOL expr_many SEMICOL expr_many RPAREN stmt
Rule 35    stmt -> IF LPAREN expr_many RPAREN stmt
Rule 36    stmt -> IF LPAREN expr_many RPAREN stmt ELSE stmt
Rule 37    stmt -> CONTINUE SEMICOL
Rule 38    stmt -> BREAK SEMICOL
Rule 39    stmt -> RETURN SEMICOL
Rule 40    stmt -> RETURN expr_many SEMICOL
Rule 41    priexpr -> ID
Rule 42    priexpr -> const
Rule 43    priexpr -> LPAREN expr_many RPAREN
Rule 44    postexpr -> priexpr
Rule 45    postexpr -> postexpr LBRACK expr_many RBRACK
Rule 46    postexpr -> postexpr LPAREN RPAREN
Rule 47    postexpr -> postexpr LPAREN argexpr_list RPAREN
Rule 48    postexpr -> postexpr INC
Rule 49    postexpr -> postexpr DEC
Rule 50    argexpr_list -> expr
Rule 51    argexpr_list -> argexpr_list COMMA expr
Rule 52    unaryexpr -> postexpr
Rule 53    unaryexpr -> AND unaryexpr
Rule 54    unaryexpr -> TIMES unaryexpr
Rule 55    unaryexpr -> INC unaryexpr
Rule 56    unaryexpr -> DEC unaryexpr
Rule 57    unaryexpr -> PLUS unaryexpr
Rule 58    unaryexpr -> MINUS unaryexpr
Rule 59    unaryexpr -> NOT unaryexpr
Rule 60    unaryexpr -> LNOT unaryexpr
Rule 61    multexpr -> unaryexpr
Rule 62    multexpr -> multexpr TIMES unaryexpr
Rule 63    multexpr -> multexpr DIVIDE unaryexpr
Rule 64    multexpr -> multexpr MOD unaryexpr
Rule 65    addexpr -> multexpr
Rule 66    addexpr -> addexpr PLUS multexpr
Rule 67    addexpr -> addexpr MINUS multexpr
Rule 68    shiftexpr -> addexpr
Rule 69    shiftexpr -> shiftexpr LSHIFT addexpr
Rule 70    shiftexpr -> shiftexpr RSHIFT addexpr
Rule 71    relexpr -> shiftexpr
Rule 72    relexpr -> relexpr LE shiftexpr
Rule 73    relexpr -> relexpr GE shiftexpr
Rule 74    relexpr -> relexpr LEQ shiftexpr
Rule 75    relexpr -> relexpr GEQ shiftexpr
Rule 76    eqexpr -> relexpr
Rule 77    eqexpr -> eqexpr EQ relexpr
Rule 78    eqexpr -> eqexpr NE relexpr
Rule 79    andexpr -> eqexpr
Rule 80    andexpr -> andexpr AND eqexpr
Rule 81    xorexpr -> andexpr
Rule 82    xorexpr -> xorexpr XOR andexpr
Rule 83    orexpr -> xorexpr
Rule 84    orexpr -> orexpr OR xorexpr
Rule 85    landexpr -> orexpr
Rule 86    landexpr -> landexpr LAND orexpr
Rule 87    lorexpr -> landexpr
Rule 88    lorexpr -> lorexpr LOR landexpr
Rule 89    expr -> lorexpr
Rule 90    expr -> postexpr assign_op expr
Rule 91    expr -> TIMES unaryexpr assign_op expr
Rule 92    assign_op -> ASSIGN
Rule 93    assign_op -> PLUS_ASSIGN
Rule 94    assign_op -> MINUS_ASSIGN
Rule 95    assign_op -> TIMES_ASSIGN
Rule 96    assign_op -> DIVIDE_ASSIGN
Rule 97    assign_op -> MOD_ASSIGN
Rule 98    assign_op -> AND_ASSIGN
Rule 99    assign_op -> OR_ASSIGN
Rule 100   assign_op -> XOR_ASSIGN
Rule 101   assign_op -> LSHIFT_ASSIGN
Rule 102   assign_op -> RSHIFT_ASSIGN
Rule 103   expr_many -> expr
Rule 104   expr_many -> expr_many COMMA expr
Rule 105   assign -> ASSIGN expr
Rule 106   type -> INT
Rule 107   type -> FLOAT
Rule 108   type -> CHAR
Rule 109   type -> VOID
Rule 110   const -> IVAL
Rule 111   const -> FVAL
Rule 112   const -> SVAL
Rule 113   const -> CVAL
Rule 114   empty -> <empty>

Terminals, with rules where they appear

AND                  : 53 80
AND_ASSIGN           : 98
ASSIGN               : 92 105
BREAK                : 38
CHAR                 : 108
COMMA                : 8 9 19 51 104
CONTINUE             : 37
CVAL                 : 113
DEC                  : 49 56
DIVIDE               : 63
DIVIDE_ASSIGN        : 96
ELSE                 : 36
EQ                   : 77
FLOAT                : 107
FOR                  : 34
FVAL                 : 111
GE                   : 73
GEQ                  : 75
ID                   : 10 41
IF                   : 35 36
INC                  : 48 55
INT                  : 106
IVAL                 : 13 110
LAND                 : 86
LBRACE               : 14 31
LBRACK               : 13 45
LE                   : 72
LEQ                  : 74
LNOT                 : 60
LOR                  : 88
LPAREN               : 14 33 34 35 36 43 46 47
LSHIFT               : 69
LSHIFT_ASSIGN        : 101
MINUS                : 58 67
MINUS_ASSIGN         : 94
MOD                  : 64
MOD_ASSIGN           : 97
NE                   : 78
NOT                  : 59
OR                   : 84
OR_ASSIGN            : 99
PLUS                 : 57 66
PLUS_ASSIGN          : 93
RBRACE               : 14 31
RBRACK               : 13 45
RETURN               : 39 40
RPAREN               : 14 33 34 35 36 43 46 47
RSHIFT               : 70
RSHIFT_ASSIGN        : 102
SEMICOL              : 5 30 32 34 34 37 38 39 40
SVAL                 : 112
TIMES                : 11 54 62 91
TIMES_ASSIGN         : 95
VOID                 : 16 109
WHILE                : 33
XOR                  : 82
XOR_ASSIGN           : 100
error                : 

Nonterminals, with rules where they appear

addexpr              : 66 67 68 69 70
andexpr              : 80 81 82
arg                  : 18 19
argexpr_list         : 47 51
args                 : 17 19
array                : 6 8 20
assign               : 7 9
assign_op            : 90 91
body                 : 14 31
const                : 42
def                  : 1 2
deff                 : 4
defv                 : 3 24 25
defv_many            : 23 25
defv_multi           : 5 8 9
empty                : 12 15 22 26
eqexpr               : 77 78 79 80
expr                 : 50 51 90 91 103 104 105
expr_many            : 32 33 34 34 34 35 36 40 43 45 104
goal                 : 2 0
id_adv               : 6 7 8 9 11 14 20
landexpr             : 86 87 88
lorexpr              : 88 89
multexpr             : 62 63 64 65 66 67
orexpr               : 84 85 86
postexpr             : 45 46 47 48 49 52 90
pre_defv_many        : 21
pre_stmt_many        : 21
priexpr              : 44
relexpr              : 72 73 74 75 76 77 78
s_args               : 14
shiftexpr            : 69 70 71 72 73 74 75
stmt                 : 28 29 33 34 35 36 36
stmt_many            : 27 29
type                 : 5 14 20
unaryexpr            : 53 54 55 56 57 58 59 60 61 62 63 64 91
xorexpr              : 82 83 84

Parsing method: LALR

state 0

    (0) S' -> . goal
    (1) goal -> . def
    (2) goal -> . def goal
    (3) def -> . defv
    (4) def -> . deff
    (5) defv -> . type defv_multi SEMICOL
    (14) deff -> . type id_adv LPAREN s_args RPAREN LBRACE body RBRACE
    (106) type -> . INT
    (107) type -> . FLOAT
    (108) type -> . CHAR
    (109) type -> . VOID

    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 1
    VOID            shift and go to state 3

    defv                           shift and go to state 2
    goal                           shift and go to state 4
    deff                           shift and go to state 8
    type                           shift and go to state 5
    def                            shift and go to state 9

state 1

    (108) type -> CHAR .

    ID              reduce using rule 108 (type -> CHAR .)
    TIMES           reduce using rule 108 (type -> CHAR .)


state 2

    (3) def -> defv .

    INT             reduce using rule 3 (def -> defv .)
    FLOAT           reduce using rule 3 (def -> defv .)
    CHAR            reduce using rule 3 (def -> defv .)
    VOID            reduce using rule 3 (def -> defv .)
    $end            reduce using rule 3 (def -> defv .)


state 3

    (109) type -> VOID .

    ID              reduce using rule 109 (type -> VOID .)
    TIMES           reduce using rule 109 (type -> VOID .)


state 4

    (0) S' -> goal .



state 5

    (5) defv -> type . defv_multi SEMICOL
    (14) deff -> type . id_adv LPAREN s_args RPAREN LBRACE body RBRACE
    (6) defv_multi -> . id_adv array
    (7) defv_multi -> . id_adv assign
    (8) defv_multi -> . id_adv array COMMA defv_multi
    (9) defv_multi -> . id_adv assign COMMA defv_multi
    (10) id_adv -> . ID
    (11) id_adv -> . TIMES id_adv

    ID              shift and go to state 12
    TIMES           shift and go to state 13

    defv_multi                     shift and go to state 10
    id_adv                         shift and go to state 11

state 6

    (106) type -> INT .

    ID              reduce using rule 106 (type -> INT .)
    TIMES           reduce using rule 106 (type -> INT .)


state 7

    (107) type -> FLOAT .

    ID              reduce using rule 107 (type -> FLOAT .)
    TIMES           reduce using rule 107 (type -> FLOAT .)


state 8

    (4) def -> deff .

    INT             reduce using rule 4 (def -> deff .)
    FLOAT           reduce using rule 4 (def -> deff .)
    CHAR            reduce using rule 4 (def -> deff .)
    VOID            reduce using rule 4 (def -> deff .)
    $end            reduce using rule 4 (def -> deff .)


state 9

    (1) goal -> def .
    (2) goal -> def . goal
    (1) goal -> . def
    (2) goal -> . def goal
    (3) def -> . defv
    (4) def -> . deff
    (5) defv -> . type defv_multi SEMICOL
    (14) deff -> . type id_adv LPAREN s_args RPAREN LBRACE body RBRACE
    (106) type -> . INT
    (107) type -> . FLOAT
    (108) type -> . CHAR
    (109) type -> . VOID

    $end            reduce using rule 1 (goal -> def .)
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 1
    VOID            shift and go to state 3

    defv                           shift and go to state 2
    goal                           shift and go to state 14
    deff                           shift and go to state 8
    type                           shift and go to state 5
    def                            shift and go to state 9

state 10

    (5) defv -> type defv_multi . SEMICOL

    SEMICOL         shift and go to state 15


state 11

    (14) deff -> type id_adv . LPAREN s_args RPAREN LBRACE body RBRACE
    (6) defv_multi -> id_adv . array
    (7) defv_multi -> id_adv . assign
    (8) defv_multi -> id_adv . array COMMA defv_multi
    (9) defv_multi -> id_adv . assign COMMA defv_multi
    (12) array -> . empty
    (13) array -> . LBRACK IVAL RBRACK
    (105) assign -> . ASSIGN expr
    (114) empty -> .

    LPAREN          shift and go to state 17
    LBRACK          shift and go to state 21
    ASSIGN          shift and go to state 20
    COMMA           reduce using rule 114 (empty -> .)
    SEMICOL         reduce using rule 114 (empty -> .)

    assign                         shift and go to state 16
    array                          shift and go to state 19
    empty                          shift and go to state 18

state 12

    (10) id_adv -> ID .

    LBRACK          reduce using rule 10 (id_adv -> ID .)
    ASSIGN          reduce using rule 10 (id_adv -> ID .)
    COMMA           reduce using rule 10 (id_adv -> ID .)
    SEMICOL         reduce using rule 10 (id_adv -> ID .)
    RPAREN          reduce using rule 10 (id_adv -> ID .)
    LPAREN          reduce using rule 10 (id_adv -> ID .)


state 13

    (11) id_adv -> TIMES . id_adv
    (10) id_adv -> . ID
    (11) id_adv -> . TIMES id_adv

    ID              shift and go to state 12
    TIMES           shift and go to state 13

    id_adv                         shift and go to state 22

state 14

    (2) goal -> def goal .

    $end            reduce using rule 2 (goal -> def goal .)


state 15

    (5) defv -> type defv_multi SEMICOL .

    INT             reduce using rule 5 (defv -> type defv_multi SEMICOL .)
    FLOAT           reduce using rule 5 (defv -> type defv_multi SEMICOL .)
    CHAR            reduce using rule 5 (defv -> type defv_multi SEMICOL .)
    VOID            reduce using rule 5 (defv -> type defv_multi SEMICOL .)
    SEMICOL         reduce using rule 5 (defv -> type defv_multi SEMICOL .)
    LBRACE          reduce using rule 5 (defv -> type defv_multi SEMICOL .)
    WHILE           reduce using rule 5 (defv -> type defv_multi SEMICOL .)
    FOR             reduce using rule 5 (defv -> type defv_multi SEMICOL .)
    IF              reduce using rule 5 (defv -> type defv_multi SEMICOL .)
    CONTINUE        reduce using rule 5 (defv -> type defv_multi SEMICOL .)
    BREAK           reduce using rule 5 (defv -> type defv_multi SEMICOL .)
    RETURN          reduce using rule 5 (defv -> type defv_multi SEMICOL .)
    TIMES           reduce using rule 5 (defv -> type defv_multi SEMICOL .)
    ID              reduce using rule 5 (defv -> type defv_multi SEMICOL .)
    LPAREN          reduce using rule 5 (defv -> type defv_multi SEMICOL .)
    IVAL            reduce using rule 5 (defv -> type defv_multi SEMICOL .)
    FVAL            reduce using rule 5 (defv -> type defv_multi SEMICOL .)
    SVAL            reduce using rule 5 (defv -> type defv_multi SEMICOL .)
    CVAL            reduce using rule 5 (defv -> type defv_multi SEMICOL .)
    AND             reduce using rule 5 (defv -> type defv_multi SEMICOL .)
    INC             reduce using rule 5 (defv -> type defv_multi SEMICOL .)
    DEC             reduce using rule 5 (defv -> type defv_multi SEMICOL .)
    PLUS            reduce using rule 5 (defv -> type defv_multi SEMICOL .)
    MINUS           reduce using rule 5 (defv -> type defv_multi SEMICOL .)
    NOT             reduce using rule 5 (defv -> type defv_multi SEMICOL .)
    LNOT            reduce using rule 5 (defv -> type defv_multi SEMICOL .)
    RBRACE          reduce using rule 5 (defv -> type defv_multi SEMICOL .)
    $end            reduce using rule 5 (defv -> type defv_multi SEMICOL .)


state 16

    (7) defv_multi -> id_adv assign .
    (9) defv_multi -> id_adv assign . COMMA defv_multi

    SEMICOL         reduce using rule 7 (defv_multi -> id_adv assign .)
    COMMA           shift and go to state 23


state 17

    (14) deff -> type id_adv LPAREN . s_args RPAREN LBRACE body RBRACE
    (15) s_args -> . empty
    (16) s_args -> . VOID
    (17) s_args -> . args
    (114) empty -> .
    (18) args -> . arg
    (19) args -> . arg COMMA args
    (20) arg -> . type id_adv array
    (106) type -> . INT
    (107) type -> . FLOAT
    (108) type -> . CHAR
    (109) type -> . VOID

    VOID            shift and go to state 29
    RPAREN          reduce using rule 114 (empty -> .)
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 1

    s_args                         shift and go to state 27
    args                           shift and go to state 28
    arg                            shift and go to state 24
    type                           shift and go to state 25
    empty                          shift and go to state 26

state 18

    (12) array -> empty .

    COMMA           reduce using rule 12 (array -> empty .)
    RPAREN          reduce using rule 12 (array -> empty .)
    SEMICOL         reduce using rule 12 (array -> empty .)


state 19

    (6) defv_multi -> id_adv array .
    (8) defv_multi -> id_adv array . COMMA defv_multi

    SEMICOL         reduce using rule 6 (defv_multi -> id_adv array .)
    COMMA           shift and go to state 30


state 20

    (105) assign -> ASSIGN . expr
    (89) expr -> . lorexpr
    (90) expr -> . postexpr assign_op expr
    (91) expr -> . TIMES unaryexpr assign_op expr
    (87) lorexpr -> . landexpr
    (88) lorexpr -> . lorexpr LOR landexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (85) landexpr -> . orexpr
    (86) landexpr -> . landexpr LAND orexpr
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (83) orexpr -> . xorexpr
    (84) orexpr -> . orexpr OR xorexpr
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL
    (81) xorexpr -> . andexpr
    (82) xorexpr -> . xorexpr XOR andexpr
    (79) andexpr -> . eqexpr
    (80) andexpr -> . andexpr AND eqexpr
    (76) eqexpr -> . relexpr
    (77) eqexpr -> . eqexpr EQ relexpr
    (78) eqexpr -> . eqexpr NE relexpr
    (71) relexpr -> . shiftexpr
    (72) relexpr -> . relexpr LE shiftexpr
    (73) relexpr -> . relexpr GE shiftexpr
    (74) relexpr -> . relexpr LEQ shiftexpr
    (75) relexpr -> . relexpr GEQ shiftexpr
    (68) shiftexpr -> . addexpr
    (69) shiftexpr -> . shiftexpr LSHIFT addexpr
    (70) shiftexpr -> . shiftexpr RSHIFT addexpr
    (65) addexpr -> . multexpr
    (66) addexpr -> . addexpr PLUS multexpr
    (67) addexpr -> . addexpr MINUS multexpr
    (61) multexpr -> . unaryexpr
    (62) multexpr -> . multexpr TIMES unaryexpr
    (63) multexpr -> . multexpr DIVIDE unaryexpr
    (64) multexpr -> . multexpr MOD unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr

    TIMES           shift and go to state 37
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57
    AND             shift and go to state 58
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34

    shiftexpr                      shift and go to state 31
    xorexpr                        shift and go to state 38
    unaryexpr                      shift and go to state 39
    priexpr                        shift and go to state 51
    lorexpr                        shift and go to state 56
    addexpr                        shift and go to state 44
    landexpr                       shift and go to state 41
    orexpr                         shift and go to state 33
    multexpr                       shift and go to state 54
    postexpr                       shift and go to state 48
    relexpr                        shift and go to state 59
    expr                           shift and go to state 43
    andexpr                        shift and go to state 36
    const                          shift and go to state 45
    eqexpr                         shift and go to state 50

state 21

    (13) array -> LBRACK . IVAL RBRACK

    IVAL            shift and go to state 60


state 22

    (11) id_adv -> TIMES id_adv .

    LBRACK          reduce using rule 11 (id_adv -> TIMES id_adv .)
    ASSIGN          reduce using rule 11 (id_adv -> TIMES id_adv .)
    COMMA           reduce using rule 11 (id_adv -> TIMES id_adv .)
    SEMICOL         reduce using rule 11 (id_adv -> TIMES id_adv .)
    RPAREN          reduce using rule 11 (id_adv -> TIMES id_adv .)
    LPAREN          reduce using rule 11 (id_adv -> TIMES id_adv .)


state 23

    (9) defv_multi -> id_adv assign COMMA . defv_multi
    (6) defv_multi -> . id_adv array
    (7) defv_multi -> . id_adv assign
    (8) defv_multi -> . id_adv array COMMA defv_multi
    (9) defv_multi -> . id_adv assign COMMA defv_multi
    (10) id_adv -> . ID
    (11) id_adv -> . TIMES id_adv

    ID              shift and go to state 12
    TIMES           shift and go to state 13

    id_adv                         shift and go to state 62
    defv_multi                     shift and go to state 61

state 24

    (18) args -> arg .
    (19) args -> arg . COMMA args

    RPAREN          reduce using rule 18 (args -> arg .)
    COMMA           shift and go to state 63


state 25

    (20) arg -> type . id_adv array
    (10) id_adv -> . ID
    (11) id_adv -> . TIMES id_adv

    ID              shift and go to state 12
    TIMES           shift and go to state 13

    id_adv                         shift and go to state 64

state 26

    (15) s_args -> empty .

    RPAREN          reduce using rule 15 (s_args -> empty .)


state 27

    (14) deff -> type id_adv LPAREN s_args . RPAREN LBRACE body RBRACE

    RPAREN          shift and go to state 65


state 28

    (17) s_args -> args .

    RPAREN          reduce using rule 17 (s_args -> args .)


state 29

    (16) s_args -> VOID .
    (109) type -> VOID .

    RPAREN          reduce using rule 16 (s_args -> VOID .)
    ID              reduce using rule 109 (type -> VOID .)
    TIMES           reduce using rule 109 (type -> VOID .)


state 30

    (8) defv_multi -> id_adv array COMMA . defv_multi
    (6) defv_multi -> . id_adv array
    (7) defv_multi -> . id_adv assign
    (8) defv_multi -> . id_adv array COMMA defv_multi
    (9) defv_multi -> . id_adv assign COMMA defv_multi
    (10) id_adv -> . ID
    (11) id_adv -> . TIMES id_adv

    ID              shift and go to state 12
    TIMES           shift and go to state 13

    id_adv                         shift and go to state 62
    defv_multi                     shift and go to state 66

state 31

    (71) relexpr -> shiftexpr .
    (69) shiftexpr -> shiftexpr . LSHIFT addexpr
    (70) shiftexpr -> shiftexpr . RSHIFT addexpr

    LE              reduce using rule 71 (relexpr -> shiftexpr .)
    GE              reduce using rule 71 (relexpr -> shiftexpr .)
    LEQ             reduce using rule 71 (relexpr -> shiftexpr .)
    GEQ             reduce using rule 71 (relexpr -> shiftexpr .)
    EQ              reduce using rule 71 (relexpr -> shiftexpr .)
    NE              reduce using rule 71 (relexpr -> shiftexpr .)
    AND             reduce using rule 71 (relexpr -> shiftexpr .)
    XOR             reduce using rule 71 (relexpr -> shiftexpr .)
    OR              reduce using rule 71 (relexpr -> shiftexpr .)
    LAND            reduce using rule 71 (relexpr -> shiftexpr .)
    LOR             reduce using rule 71 (relexpr -> shiftexpr .)
    RBRACK          reduce using rule 71 (relexpr -> shiftexpr .)
    COMMA           reduce using rule 71 (relexpr -> shiftexpr .)
    SEMICOL         reduce using rule 71 (relexpr -> shiftexpr .)
    RPAREN          reduce using rule 71 (relexpr -> shiftexpr .)
    LSHIFT          shift and go to state 67
    RSHIFT          shift and go to state 68


state 32

    (43) priexpr -> LPAREN . expr_many RPAREN
    (103) expr_many -> . expr
    (104) expr_many -> . expr_many COMMA expr
    (89) expr -> . lorexpr
    (90) expr -> . postexpr assign_op expr
    (91) expr -> . TIMES unaryexpr assign_op expr
    (87) lorexpr -> . landexpr
    (88) lorexpr -> . lorexpr LOR landexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (85) landexpr -> . orexpr
    (86) landexpr -> . landexpr LAND orexpr
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (83) orexpr -> . xorexpr
    (84) orexpr -> . orexpr OR xorexpr
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL
    (81) xorexpr -> . andexpr
    (82) xorexpr -> . xorexpr XOR andexpr
    (79) andexpr -> . eqexpr
    (80) andexpr -> . andexpr AND eqexpr
    (76) eqexpr -> . relexpr
    (77) eqexpr -> . eqexpr EQ relexpr
    (78) eqexpr -> . eqexpr NE relexpr
    (71) relexpr -> . shiftexpr
    (72) relexpr -> . relexpr LE shiftexpr
    (73) relexpr -> . relexpr GE shiftexpr
    (74) relexpr -> . relexpr LEQ shiftexpr
    (75) relexpr -> . relexpr GEQ shiftexpr
    (68) shiftexpr -> . addexpr
    (69) shiftexpr -> . shiftexpr LSHIFT addexpr
    (70) shiftexpr -> . shiftexpr RSHIFT addexpr
    (65) addexpr -> . multexpr
    (66) addexpr -> . addexpr PLUS multexpr
    (67) addexpr -> . addexpr MINUS multexpr
    (61) multexpr -> . unaryexpr
    (62) multexpr -> . multexpr TIMES unaryexpr
    (63) multexpr -> . multexpr DIVIDE unaryexpr
    (64) multexpr -> . multexpr MOD unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr

    TIMES           shift and go to state 37
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57
    AND             shift and go to state 58
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34

    shiftexpr                      shift and go to state 31
    xorexpr                        shift and go to state 38
    unaryexpr                      shift and go to state 39
    priexpr                        shift and go to state 51
    lorexpr                        shift and go to state 56
    addexpr                        shift and go to state 44
    landexpr                       shift and go to state 41
    orexpr                         shift and go to state 33
    multexpr                       shift and go to state 54
    postexpr                       shift and go to state 48
    relexpr                        shift and go to state 59
    expr                           shift and go to state 70
    expr_many                      shift and go to state 69
    andexpr                        shift and go to state 36
    const                          shift and go to state 45
    eqexpr                         shift and go to state 50

state 33

    (85) landexpr -> orexpr .
    (84) orexpr -> orexpr . OR xorexpr

    LAND            reduce using rule 85 (landexpr -> orexpr .)
    LOR             reduce using rule 85 (landexpr -> orexpr .)
    RPAREN          reduce using rule 85 (landexpr -> orexpr .)
    COMMA           reduce using rule 85 (landexpr -> orexpr .)
    SEMICOL         reduce using rule 85 (landexpr -> orexpr .)
    RBRACK          reduce using rule 85 (landexpr -> orexpr .)
    OR              shift and go to state 71


state 34

    (60) unaryexpr -> LNOT . unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL

    AND             shift and go to state 58
    TIMES           shift and go to state 74
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57

    unaryexpr                      shift and go to state 73
    postexpr                       shift and go to state 72
    priexpr                        shift and go to state 51
    const                          shift and go to state 45

state 35

    (57) unaryexpr -> PLUS . unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL

    AND             shift and go to state 58
    TIMES           shift and go to state 74
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57

    unaryexpr                      shift and go to state 75
    postexpr                       shift and go to state 72
    priexpr                        shift and go to state 51
    const                          shift and go to state 45

state 36

    (81) xorexpr -> andexpr .
    (80) andexpr -> andexpr . AND eqexpr

    XOR             reduce using rule 81 (xorexpr -> andexpr .)
    OR              reduce using rule 81 (xorexpr -> andexpr .)
    LAND            reduce using rule 81 (xorexpr -> andexpr .)
    LOR             reduce using rule 81 (xorexpr -> andexpr .)
    RPAREN          reduce using rule 81 (xorexpr -> andexpr .)
    COMMA           reduce using rule 81 (xorexpr -> andexpr .)
    RBRACK          reduce using rule 81 (xorexpr -> andexpr .)
    SEMICOL         reduce using rule 81 (xorexpr -> andexpr .)
    AND             shift and go to state 76


state 37

    (91) expr -> TIMES . unaryexpr assign_op expr
    (54) unaryexpr -> TIMES . unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL

    AND             shift and go to state 58
    TIMES           shift and go to state 74
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57

    unaryexpr                      shift and go to state 77
    priexpr                        shift and go to state 51
    const                          shift and go to state 45
    postexpr                       shift and go to state 72

state 38

    (83) orexpr -> xorexpr .
    (82) xorexpr -> xorexpr . XOR andexpr

    OR              reduce using rule 83 (orexpr -> xorexpr .)
    LAND            reduce using rule 83 (orexpr -> xorexpr .)
    LOR             reduce using rule 83 (orexpr -> xorexpr .)
    RPAREN          reduce using rule 83 (orexpr -> xorexpr .)
    COMMA           reduce using rule 83 (orexpr -> xorexpr .)
    SEMICOL         reduce using rule 83 (orexpr -> xorexpr .)
    RBRACK          reduce using rule 83 (orexpr -> xorexpr .)
    XOR             shift and go to state 78


state 39

    (61) multexpr -> unaryexpr .

    TIMES           reduce using rule 61 (multexpr -> unaryexpr .)
    DIVIDE          reduce using rule 61 (multexpr -> unaryexpr .)
    MOD             reduce using rule 61 (multexpr -> unaryexpr .)
    PLUS            reduce using rule 61 (multexpr -> unaryexpr .)
    MINUS           reduce using rule 61 (multexpr -> unaryexpr .)
    LSHIFT          reduce using rule 61 (multexpr -> unaryexpr .)
    RSHIFT          reduce using rule 61 (multexpr -> unaryexpr .)
    LE              reduce using rule 61 (multexpr -> unaryexpr .)
    GE              reduce using rule 61 (multexpr -> unaryexpr .)
    LEQ             reduce using rule 61 (multexpr -> unaryexpr .)
    GEQ             reduce using rule 61 (multexpr -> unaryexpr .)
    EQ              reduce using rule 61 (multexpr -> unaryexpr .)
    NE              reduce using rule 61 (multexpr -> unaryexpr .)
    AND             reduce using rule 61 (multexpr -> unaryexpr .)
    XOR             reduce using rule 61 (multexpr -> unaryexpr .)
    OR              reduce using rule 61 (multexpr -> unaryexpr .)
    LAND            reduce using rule 61 (multexpr -> unaryexpr .)
    LOR             reduce using rule 61 (multexpr -> unaryexpr .)
    SEMICOL         reduce using rule 61 (multexpr -> unaryexpr .)
    COMMA           reduce using rule 61 (multexpr -> unaryexpr .)
    RPAREN          reduce using rule 61 (multexpr -> unaryexpr .)
    RBRACK          reduce using rule 61 (multexpr -> unaryexpr .)


state 40

    (110) const -> IVAL .

    LBRACK          reduce using rule 110 (const -> IVAL .)
    LPAREN          reduce using rule 110 (const -> IVAL .)
    INC             reduce using rule 110 (const -> IVAL .)
    DEC             reduce using rule 110 (const -> IVAL .)
    ASSIGN          reduce using rule 110 (const -> IVAL .)
    PLUS_ASSIGN     reduce using rule 110 (const -> IVAL .)
    MINUS_ASSIGN    reduce using rule 110 (const -> IVAL .)
    TIMES_ASSIGN    reduce using rule 110 (const -> IVAL .)
    DIVIDE_ASSIGN   reduce using rule 110 (const -> IVAL .)
    MOD_ASSIGN      reduce using rule 110 (const -> IVAL .)
    AND_ASSIGN      reduce using rule 110 (const -> IVAL .)
    OR_ASSIGN       reduce using rule 110 (const -> IVAL .)
    XOR_ASSIGN      reduce using rule 110 (const -> IVAL .)
    LSHIFT_ASSIGN   reduce using rule 110 (const -> IVAL .)
    RSHIFT_ASSIGN   reduce using rule 110 (const -> IVAL .)
    TIMES           reduce using rule 110 (const -> IVAL .)
    DIVIDE          reduce using rule 110 (const -> IVAL .)
    MOD             reduce using rule 110 (const -> IVAL .)
    PLUS            reduce using rule 110 (const -> IVAL .)
    MINUS           reduce using rule 110 (const -> IVAL .)
    LSHIFT          reduce using rule 110 (const -> IVAL .)
    RSHIFT          reduce using rule 110 (const -> IVAL .)
    LE              reduce using rule 110 (const -> IVAL .)
    GE              reduce using rule 110 (const -> IVAL .)
    LEQ             reduce using rule 110 (const -> IVAL .)
    GEQ             reduce using rule 110 (const -> IVAL .)
    EQ              reduce using rule 110 (const -> IVAL .)
    NE              reduce using rule 110 (const -> IVAL .)
    AND             reduce using rule 110 (const -> IVAL .)
    XOR             reduce using rule 110 (const -> IVAL .)
    OR              reduce using rule 110 (const -> IVAL .)
    LAND            reduce using rule 110 (const -> IVAL .)
    LOR             reduce using rule 110 (const -> IVAL .)
    SEMICOL         reduce using rule 110 (const -> IVAL .)
    COMMA           reduce using rule 110 (const -> IVAL .)
    RPAREN          reduce using rule 110 (const -> IVAL .)
    RBRACK          reduce using rule 110 (const -> IVAL .)


state 41

    (87) lorexpr -> landexpr .
    (86) landexpr -> landexpr . LAND orexpr

    LOR             reduce using rule 87 (lorexpr -> landexpr .)
    SEMICOL         reduce using rule 87 (lorexpr -> landexpr .)
    COMMA           reduce using rule 87 (lorexpr -> landexpr .)
    RPAREN          reduce using rule 87 (lorexpr -> landexpr .)
    RBRACK          reduce using rule 87 (lorexpr -> landexpr .)
    LAND            shift and go to state 79


state 42

    (112) const -> SVAL .

    LBRACK          reduce using rule 112 (const -> SVAL .)
    LPAREN          reduce using rule 112 (const -> SVAL .)
    INC             reduce using rule 112 (const -> SVAL .)
    DEC             reduce using rule 112 (const -> SVAL .)
    ASSIGN          reduce using rule 112 (const -> SVAL .)
    PLUS_ASSIGN     reduce using rule 112 (const -> SVAL .)
    MINUS_ASSIGN    reduce using rule 112 (const -> SVAL .)
    TIMES_ASSIGN    reduce using rule 112 (const -> SVAL .)
    DIVIDE_ASSIGN   reduce using rule 112 (const -> SVAL .)
    MOD_ASSIGN      reduce using rule 112 (const -> SVAL .)
    AND_ASSIGN      reduce using rule 112 (const -> SVAL .)
    OR_ASSIGN       reduce using rule 112 (const -> SVAL .)
    XOR_ASSIGN      reduce using rule 112 (const -> SVAL .)
    LSHIFT_ASSIGN   reduce using rule 112 (const -> SVAL .)
    RSHIFT_ASSIGN   reduce using rule 112 (const -> SVAL .)
    TIMES           reduce using rule 112 (const -> SVAL .)
    DIVIDE          reduce using rule 112 (const -> SVAL .)
    MOD             reduce using rule 112 (const -> SVAL .)
    PLUS            reduce using rule 112 (const -> SVAL .)
    MINUS           reduce using rule 112 (const -> SVAL .)
    LSHIFT          reduce using rule 112 (const -> SVAL .)
    RSHIFT          reduce using rule 112 (const -> SVAL .)
    LE              reduce using rule 112 (const -> SVAL .)
    GE              reduce using rule 112 (const -> SVAL .)
    LEQ             reduce using rule 112 (const -> SVAL .)
    GEQ             reduce using rule 112 (const -> SVAL .)
    EQ              reduce using rule 112 (const -> SVAL .)
    NE              reduce using rule 112 (const -> SVAL .)
    AND             reduce using rule 112 (const -> SVAL .)
    XOR             reduce using rule 112 (const -> SVAL .)
    OR              reduce using rule 112 (const -> SVAL .)
    LAND            reduce using rule 112 (const -> SVAL .)
    LOR             reduce using rule 112 (const -> SVAL .)
    SEMICOL         reduce using rule 112 (const -> SVAL .)
    COMMA           reduce using rule 112 (const -> SVAL .)
    RPAREN          reduce using rule 112 (const -> SVAL .)
    RBRACK          reduce using rule 112 (const -> SVAL .)


state 43

    (105) assign -> ASSIGN expr .

    COMMA           reduce using rule 105 (assign -> ASSIGN expr .)
    SEMICOL         reduce using rule 105 (assign -> ASSIGN expr .)


state 44

    (68) shiftexpr -> addexpr .
    (66) addexpr -> addexpr . PLUS multexpr
    (67) addexpr -> addexpr . MINUS multexpr

    LSHIFT          reduce using rule 68 (shiftexpr -> addexpr .)
    RSHIFT          reduce using rule 68 (shiftexpr -> addexpr .)
    LE              reduce using rule 68 (shiftexpr -> addexpr .)
    GE              reduce using rule 68 (shiftexpr -> addexpr .)
    LEQ             reduce using rule 68 (shiftexpr -> addexpr .)
    GEQ             reduce using rule 68 (shiftexpr -> addexpr .)
    EQ              reduce using rule 68 (shiftexpr -> addexpr .)
    NE              reduce using rule 68 (shiftexpr -> addexpr .)
    AND             reduce using rule 68 (shiftexpr -> addexpr .)
    XOR             reduce using rule 68 (shiftexpr -> addexpr .)
    OR              reduce using rule 68 (shiftexpr -> addexpr .)
    LAND            reduce using rule 68 (shiftexpr -> addexpr .)
    LOR             reduce using rule 68 (shiftexpr -> addexpr .)
    RBRACK          reduce using rule 68 (shiftexpr -> addexpr .)
    COMMA           reduce using rule 68 (shiftexpr -> addexpr .)
    RPAREN          reduce using rule 68 (shiftexpr -> addexpr .)
    SEMICOL         reduce using rule 68 (shiftexpr -> addexpr .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 80


state 45

    (42) priexpr -> const .

    LBRACK          reduce using rule 42 (priexpr -> const .)
    LPAREN          reduce using rule 42 (priexpr -> const .)
    INC             reduce using rule 42 (priexpr -> const .)
    DEC             reduce using rule 42 (priexpr -> const .)
    TIMES           reduce using rule 42 (priexpr -> const .)
    DIVIDE          reduce using rule 42 (priexpr -> const .)
    MOD             reduce using rule 42 (priexpr -> const .)
    PLUS            reduce using rule 42 (priexpr -> const .)
    MINUS           reduce using rule 42 (priexpr -> const .)
    LSHIFT          reduce using rule 42 (priexpr -> const .)
    RSHIFT          reduce using rule 42 (priexpr -> const .)
    LE              reduce using rule 42 (priexpr -> const .)
    GE              reduce using rule 42 (priexpr -> const .)
    LEQ             reduce using rule 42 (priexpr -> const .)
    GEQ             reduce using rule 42 (priexpr -> const .)
    EQ              reduce using rule 42 (priexpr -> const .)
    NE              reduce using rule 42 (priexpr -> const .)
    AND             reduce using rule 42 (priexpr -> const .)
    XOR             reduce using rule 42 (priexpr -> const .)
    OR              reduce using rule 42 (priexpr -> const .)
    LAND            reduce using rule 42 (priexpr -> const .)
    LOR             reduce using rule 42 (priexpr -> const .)
    COMMA           reduce using rule 42 (priexpr -> const .)
    SEMICOL         reduce using rule 42 (priexpr -> const .)
    RPAREN          reduce using rule 42 (priexpr -> const .)
    ASSIGN          reduce using rule 42 (priexpr -> const .)
    PLUS_ASSIGN     reduce using rule 42 (priexpr -> const .)
    MINUS_ASSIGN    reduce using rule 42 (priexpr -> const .)
    TIMES_ASSIGN    reduce using rule 42 (priexpr -> const .)
    DIVIDE_ASSIGN   reduce using rule 42 (priexpr -> const .)
    MOD_ASSIGN      reduce using rule 42 (priexpr -> const .)
    AND_ASSIGN      reduce using rule 42 (priexpr -> const .)
    OR_ASSIGN       reduce using rule 42 (priexpr -> const .)
    XOR_ASSIGN      reduce using rule 42 (priexpr -> const .)
    LSHIFT_ASSIGN   reduce using rule 42 (priexpr -> const .)
    RSHIFT_ASSIGN   reduce using rule 42 (priexpr -> const .)
    RBRACK          reduce using rule 42 (priexpr -> const .)


state 46

    (55) unaryexpr -> INC . unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL

    AND             shift and go to state 58
    TIMES           shift and go to state 74
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57

    unaryexpr                      shift and go to state 82
    postexpr                       shift and go to state 72
    priexpr                        shift and go to state 51
    const                          shift and go to state 45

state 47

    (59) unaryexpr -> NOT . unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL

    AND             shift and go to state 58
    TIMES           shift and go to state 74
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57

    unaryexpr                      shift and go to state 83
    postexpr                       shift and go to state 72
    priexpr                        shift and go to state 51
    const                          shift and go to state 45

state 48

    (90) expr -> postexpr . assign_op expr
    (45) postexpr -> postexpr . LBRACK expr_many RBRACK
    (46) postexpr -> postexpr . LPAREN RPAREN
    (47) postexpr -> postexpr . LPAREN argexpr_list RPAREN
    (48) postexpr -> postexpr . INC
    (49) postexpr -> postexpr . DEC
    (52) unaryexpr -> postexpr .
    (92) assign_op -> . ASSIGN
    (93) assign_op -> . PLUS_ASSIGN
    (94) assign_op -> . MINUS_ASSIGN
    (95) assign_op -> . TIMES_ASSIGN
    (96) assign_op -> . DIVIDE_ASSIGN
    (97) assign_op -> . MOD_ASSIGN
    (98) assign_op -> . AND_ASSIGN
    (99) assign_op -> . OR_ASSIGN
    (100) assign_op -> . XOR_ASSIGN
    (101) assign_op -> . LSHIFT_ASSIGN
    (102) assign_op -> . RSHIFT_ASSIGN

    LBRACK          shift and go to state 90
    LPAREN          shift and go to state 84
    INC             shift and go to state 99
    DEC             shift and go to state 87
    TIMES           reduce using rule 52 (unaryexpr -> postexpr .)
    DIVIDE          reduce using rule 52 (unaryexpr -> postexpr .)
    MOD             reduce using rule 52 (unaryexpr -> postexpr .)
    PLUS            reduce using rule 52 (unaryexpr -> postexpr .)
    MINUS           reduce using rule 52 (unaryexpr -> postexpr .)
    LSHIFT          reduce using rule 52 (unaryexpr -> postexpr .)
    RSHIFT          reduce using rule 52 (unaryexpr -> postexpr .)
    LE              reduce using rule 52 (unaryexpr -> postexpr .)
    GE              reduce using rule 52 (unaryexpr -> postexpr .)
    LEQ             reduce using rule 52 (unaryexpr -> postexpr .)
    GEQ             reduce using rule 52 (unaryexpr -> postexpr .)
    EQ              reduce using rule 52 (unaryexpr -> postexpr .)
    NE              reduce using rule 52 (unaryexpr -> postexpr .)
    AND             reduce using rule 52 (unaryexpr -> postexpr .)
    XOR             reduce using rule 52 (unaryexpr -> postexpr .)
    OR              reduce using rule 52 (unaryexpr -> postexpr .)
    LAND            reduce using rule 52 (unaryexpr -> postexpr .)
    LOR             reduce using rule 52 (unaryexpr -> postexpr .)
    SEMICOL         reduce using rule 52 (unaryexpr -> postexpr .)
    COMMA           reduce using rule 52 (unaryexpr -> postexpr .)
    RPAREN          reduce using rule 52 (unaryexpr -> postexpr .)
    RBRACK          reduce using rule 52 (unaryexpr -> postexpr .)
    ASSIGN          shift and go to state 93
    PLUS_ASSIGN     shift and go to state 85
    MINUS_ASSIGN    shift and go to state 89
    TIMES_ASSIGN    shift and go to state 97
    DIVIDE_ASSIGN   shift and go to state 88
    MOD_ASSIGN      shift and go to state 92
    AND_ASSIGN      shift and go to state 98
    OR_ASSIGN       shift and go to state 94
    XOR_ASSIGN      shift and go to state 86
    LSHIFT_ASSIGN   shift and go to state 96
    RSHIFT_ASSIGN   shift and go to state 91

    assign_op                      shift and go to state 95

state 49

    (56) unaryexpr -> DEC . unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL

    AND             shift and go to state 58
    TIMES           shift and go to state 74
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57

    unaryexpr                      shift and go to state 100
    postexpr                       shift and go to state 72
    priexpr                        shift and go to state 51
    const                          shift and go to state 45

state 50

    (79) andexpr -> eqexpr .
    (77) eqexpr -> eqexpr . EQ relexpr
    (78) eqexpr -> eqexpr . NE relexpr

    AND             reduce using rule 79 (andexpr -> eqexpr .)
    XOR             reduce using rule 79 (andexpr -> eqexpr .)
    OR              reduce using rule 79 (andexpr -> eqexpr .)
    LAND            reduce using rule 79 (andexpr -> eqexpr .)
    LOR             reduce using rule 79 (andexpr -> eqexpr .)
    COMMA           reduce using rule 79 (andexpr -> eqexpr .)
    SEMICOL         reduce using rule 79 (andexpr -> eqexpr .)
    RPAREN          reduce using rule 79 (andexpr -> eqexpr .)
    RBRACK          reduce using rule 79 (andexpr -> eqexpr .)
    EQ              shift and go to state 102
    NE              shift and go to state 101


state 51

    (44) postexpr -> priexpr .

    LBRACK          reduce using rule 44 (postexpr -> priexpr .)
    LPAREN          reduce using rule 44 (postexpr -> priexpr .)
    INC             reduce using rule 44 (postexpr -> priexpr .)
    DEC             reduce using rule 44 (postexpr -> priexpr .)
    TIMES           reduce using rule 44 (postexpr -> priexpr .)
    DIVIDE          reduce using rule 44 (postexpr -> priexpr .)
    MOD             reduce using rule 44 (postexpr -> priexpr .)
    PLUS            reduce using rule 44 (postexpr -> priexpr .)
    MINUS           reduce using rule 44 (postexpr -> priexpr .)
    LSHIFT          reduce using rule 44 (postexpr -> priexpr .)
    RSHIFT          reduce using rule 44 (postexpr -> priexpr .)
    LE              reduce using rule 44 (postexpr -> priexpr .)
    GE              reduce using rule 44 (postexpr -> priexpr .)
    LEQ             reduce using rule 44 (postexpr -> priexpr .)
    GEQ             reduce using rule 44 (postexpr -> priexpr .)
    EQ              reduce using rule 44 (postexpr -> priexpr .)
    NE              reduce using rule 44 (postexpr -> priexpr .)
    AND             reduce using rule 44 (postexpr -> priexpr .)
    XOR             reduce using rule 44 (postexpr -> priexpr .)
    OR              reduce using rule 44 (postexpr -> priexpr .)
    LAND            reduce using rule 44 (postexpr -> priexpr .)
    LOR             reduce using rule 44 (postexpr -> priexpr .)
    COMMA           reduce using rule 44 (postexpr -> priexpr .)
    SEMICOL         reduce using rule 44 (postexpr -> priexpr .)
    RPAREN          reduce using rule 44 (postexpr -> priexpr .)
    ASSIGN          reduce using rule 44 (postexpr -> priexpr .)
    PLUS_ASSIGN     reduce using rule 44 (postexpr -> priexpr .)
    MINUS_ASSIGN    reduce using rule 44 (postexpr -> priexpr .)
    TIMES_ASSIGN    reduce using rule 44 (postexpr -> priexpr .)
    DIVIDE_ASSIGN   reduce using rule 44 (postexpr -> priexpr .)
    MOD_ASSIGN      reduce using rule 44 (postexpr -> priexpr .)
    AND_ASSIGN      reduce using rule 44 (postexpr -> priexpr .)
    OR_ASSIGN       reduce using rule 44 (postexpr -> priexpr .)
    XOR_ASSIGN      reduce using rule 44 (postexpr -> priexpr .)
    LSHIFT_ASSIGN   reduce using rule 44 (postexpr -> priexpr .)
    RSHIFT_ASSIGN   reduce using rule 44 (postexpr -> priexpr .)
    RBRACK          reduce using rule 44 (postexpr -> priexpr .)


state 52

    (41) priexpr -> ID .

    LBRACK          reduce using rule 41 (priexpr -> ID .)
    LPAREN          reduce using rule 41 (priexpr -> ID .)
    INC             reduce using rule 41 (priexpr -> ID .)
    DEC             reduce using rule 41 (priexpr -> ID .)
    TIMES           reduce using rule 41 (priexpr -> ID .)
    DIVIDE          reduce using rule 41 (priexpr -> ID .)
    MOD             reduce using rule 41 (priexpr -> ID .)
    PLUS            reduce using rule 41 (priexpr -> ID .)
    MINUS           reduce using rule 41 (priexpr -> ID .)
    LSHIFT          reduce using rule 41 (priexpr -> ID .)
    RSHIFT          reduce using rule 41 (priexpr -> ID .)
    LE              reduce using rule 41 (priexpr -> ID .)
    GE              reduce using rule 41 (priexpr -> ID .)
    LEQ             reduce using rule 41 (priexpr -> ID .)
    GEQ             reduce using rule 41 (priexpr -> ID .)
    EQ              reduce using rule 41 (priexpr -> ID .)
    NE              reduce using rule 41 (priexpr -> ID .)
    AND             reduce using rule 41 (priexpr -> ID .)
    XOR             reduce using rule 41 (priexpr -> ID .)
    OR              reduce using rule 41 (priexpr -> ID .)
    LAND            reduce using rule 41 (priexpr -> ID .)
    LOR             reduce using rule 41 (priexpr -> ID .)
    COMMA           reduce using rule 41 (priexpr -> ID .)
    SEMICOL         reduce using rule 41 (priexpr -> ID .)
    RPAREN          reduce using rule 41 (priexpr -> ID .)
    ASSIGN          reduce using rule 41 (priexpr -> ID .)
    PLUS_ASSIGN     reduce using rule 41 (priexpr -> ID .)
    MINUS_ASSIGN    reduce using rule 41 (priexpr -> ID .)
    TIMES_ASSIGN    reduce using rule 41 (priexpr -> ID .)
    DIVIDE_ASSIGN   reduce using rule 41 (priexpr -> ID .)
    MOD_ASSIGN      reduce using rule 41 (priexpr -> ID .)
    AND_ASSIGN      reduce using rule 41 (priexpr -> ID .)
    OR_ASSIGN       reduce using rule 41 (priexpr -> ID .)
    XOR_ASSIGN      reduce using rule 41 (priexpr -> ID .)
    LSHIFT_ASSIGN   reduce using rule 41 (priexpr -> ID .)
    RSHIFT_ASSIGN   reduce using rule 41 (priexpr -> ID .)
    RBRACK          reduce using rule 41 (priexpr -> ID .)


state 53

    (111) const -> FVAL .

    LBRACK          reduce using rule 111 (const -> FVAL .)
    LPAREN          reduce using rule 111 (const -> FVAL .)
    INC             reduce using rule 111 (const -> FVAL .)
    DEC             reduce using rule 111 (const -> FVAL .)
    ASSIGN          reduce using rule 111 (const -> FVAL .)
    PLUS_ASSIGN     reduce using rule 111 (const -> FVAL .)
    MINUS_ASSIGN    reduce using rule 111 (const -> FVAL .)
    TIMES_ASSIGN    reduce using rule 111 (const -> FVAL .)
    DIVIDE_ASSIGN   reduce using rule 111 (const -> FVAL .)
    MOD_ASSIGN      reduce using rule 111 (const -> FVAL .)
    AND_ASSIGN      reduce using rule 111 (const -> FVAL .)
    OR_ASSIGN       reduce using rule 111 (const -> FVAL .)
    XOR_ASSIGN      reduce using rule 111 (const -> FVAL .)
    LSHIFT_ASSIGN   reduce using rule 111 (const -> FVAL .)
    RSHIFT_ASSIGN   reduce using rule 111 (const -> FVAL .)
    TIMES           reduce using rule 111 (const -> FVAL .)
    DIVIDE          reduce using rule 111 (const -> FVAL .)
    MOD             reduce using rule 111 (const -> FVAL .)
    PLUS            reduce using rule 111 (const -> FVAL .)
    MINUS           reduce using rule 111 (const -> FVAL .)
    LSHIFT          reduce using rule 111 (const -> FVAL .)
    RSHIFT          reduce using rule 111 (const -> FVAL .)
    LE              reduce using rule 111 (const -> FVAL .)
    GE              reduce using rule 111 (const -> FVAL .)
    LEQ             reduce using rule 111 (const -> FVAL .)
    GEQ             reduce using rule 111 (const -> FVAL .)
    EQ              reduce using rule 111 (const -> FVAL .)
    NE              reduce using rule 111 (const -> FVAL .)
    AND             reduce using rule 111 (const -> FVAL .)
    XOR             reduce using rule 111 (const -> FVAL .)
    OR              reduce using rule 111 (const -> FVAL .)
    LAND            reduce using rule 111 (const -> FVAL .)
    LOR             reduce using rule 111 (const -> FVAL .)
    SEMICOL         reduce using rule 111 (const -> FVAL .)
    COMMA           reduce using rule 111 (const -> FVAL .)
    RPAREN          reduce using rule 111 (const -> FVAL .)
    RBRACK          reduce using rule 111 (const -> FVAL .)


state 54

    (65) addexpr -> multexpr .
    (62) multexpr -> multexpr . TIMES unaryexpr
    (63) multexpr -> multexpr . DIVIDE unaryexpr
    (64) multexpr -> multexpr . MOD unaryexpr

    PLUS            reduce using rule 65 (addexpr -> multexpr .)
    MINUS           reduce using rule 65 (addexpr -> multexpr .)
    LSHIFT          reduce using rule 65 (addexpr -> multexpr .)
    RSHIFT          reduce using rule 65 (addexpr -> multexpr .)
    LE              reduce using rule 65 (addexpr -> multexpr .)
    GE              reduce using rule 65 (addexpr -> multexpr .)
    LEQ             reduce using rule 65 (addexpr -> multexpr .)
    GEQ             reduce using rule 65 (addexpr -> multexpr .)
    EQ              reduce using rule 65 (addexpr -> multexpr .)
    NE              reduce using rule 65 (addexpr -> multexpr .)
    AND             reduce using rule 65 (addexpr -> multexpr .)
    XOR             reduce using rule 65 (addexpr -> multexpr .)
    OR              reduce using rule 65 (addexpr -> multexpr .)
    LAND            reduce using rule 65 (addexpr -> multexpr .)
    LOR             reduce using rule 65 (addexpr -> multexpr .)
    COMMA           reduce using rule 65 (addexpr -> multexpr .)
    SEMICOL         reduce using rule 65 (addexpr -> multexpr .)
    RPAREN          reduce using rule 65 (addexpr -> multexpr .)
    RBRACK          reduce using rule 65 (addexpr -> multexpr .)
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 103
    MOD             shift and go to state 104


state 55

    (58) unaryexpr -> MINUS . unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL

    AND             shift and go to state 58
    TIMES           shift and go to state 74
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57

    unaryexpr                      shift and go to state 106
    postexpr                       shift and go to state 72
    priexpr                        shift and go to state 51
    const                          shift and go to state 45

state 56

    (89) expr -> lorexpr .
    (88) lorexpr -> lorexpr . LOR landexpr

    RPAREN          reduce using rule 89 (expr -> lorexpr .)
    COMMA           reduce using rule 89 (expr -> lorexpr .)
    SEMICOL         reduce using rule 89 (expr -> lorexpr .)
    RBRACK          reduce using rule 89 (expr -> lorexpr .)
    LOR             shift and go to state 107


state 57

    (113) const -> CVAL .

    LBRACK          reduce using rule 113 (const -> CVAL .)
    LPAREN          reduce using rule 113 (const -> CVAL .)
    INC             reduce using rule 113 (const -> CVAL .)
    DEC             reduce using rule 113 (const -> CVAL .)
    ASSIGN          reduce using rule 113 (const -> CVAL .)
    PLUS_ASSIGN     reduce using rule 113 (const -> CVAL .)
    MINUS_ASSIGN    reduce using rule 113 (const -> CVAL .)
    TIMES_ASSIGN    reduce using rule 113 (const -> CVAL .)
    DIVIDE_ASSIGN   reduce using rule 113 (const -> CVAL .)
    MOD_ASSIGN      reduce using rule 113 (const -> CVAL .)
    AND_ASSIGN      reduce using rule 113 (const -> CVAL .)
    OR_ASSIGN       reduce using rule 113 (const -> CVAL .)
    XOR_ASSIGN      reduce using rule 113 (const -> CVAL .)
    LSHIFT_ASSIGN   reduce using rule 113 (const -> CVAL .)
    RSHIFT_ASSIGN   reduce using rule 113 (const -> CVAL .)
    TIMES           reduce using rule 113 (const -> CVAL .)
    DIVIDE          reduce using rule 113 (const -> CVAL .)
    MOD             reduce using rule 113 (const -> CVAL .)
    PLUS            reduce using rule 113 (const -> CVAL .)
    MINUS           reduce using rule 113 (const -> CVAL .)
    LSHIFT          reduce using rule 113 (const -> CVAL .)
    RSHIFT          reduce using rule 113 (const -> CVAL .)
    LE              reduce using rule 113 (const -> CVAL .)
    GE              reduce using rule 113 (const -> CVAL .)
    LEQ             reduce using rule 113 (const -> CVAL .)
    GEQ             reduce using rule 113 (const -> CVAL .)
    EQ              reduce using rule 113 (const -> CVAL .)
    NE              reduce using rule 113 (const -> CVAL .)
    AND             reduce using rule 113 (const -> CVAL .)
    XOR             reduce using rule 113 (const -> CVAL .)
    OR              reduce using rule 113 (const -> CVAL .)
    LAND            reduce using rule 113 (const -> CVAL .)
    LOR             reduce using rule 113 (const -> CVAL .)
    SEMICOL         reduce using rule 113 (const -> CVAL .)
    COMMA           reduce using rule 113 (const -> CVAL .)
    RPAREN          reduce using rule 113 (const -> CVAL .)
    RBRACK          reduce using rule 113 (const -> CVAL .)


state 58

    (53) unaryexpr -> AND . unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL

    AND             shift and go to state 58
    TIMES           shift and go to state 74
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57

    unaryexpr                      shift and go to state 108
    postexpr                       shift and go to state 72
    priexpr                        shift and go to state 51
    const                          shift and go to state 45

state 59

    (76) eqexpr -> relexpr .
    (72) relexpr -> relexpr . LE shiftexpr
    (73) relexpr -> relexpr . GE shiftexpr
    (74) relexpr -> relexpr . LEQ shiftexpr
    (75) relexpr -> relexpr . GEQ shiftexpr

    EQ              reduce using rule 76 (eqexpr -> relexpr .)
    NE              reduce using rule 76 (eqexpr -> relexpr .)
    AND             reduce using rule 76 (eqexpr -> relexpr .)
    XOR             reduce using rule 76 (eqexpr -> relexpr .)
    OR              reduce using rule 76 (eqexpr -> relexpr .)
    LAND            reduce using rule 76 (eqexpr -> relexpr .)
    LOR             reduce using rule 76 (eqexpr -> relexpr .)
    COMMA           reduce using rule 76 (eqexpr -> relexpr .)
    SEMICOL         reduce using rule 76 (eqexpr -> relexpr .)
    RPAREN          reduce using rule 76 (eqexpr -> relexpr .)
    RBRACK          reduce using rule 76 (eqexpr -> relexpr .)
    LE              shift and go to state 110
    GE              shift and go to state 111
    LEQ             shift and go to state 112
    GEQ             shift and go to state 109


state 60

    (13) array -> LBRACK IVAL . RBRACK

    RBRACK          shift and go to state 113


state 61

    (9) defv_multi -> id_adv assign COMMA defv_multi .

    SEMICOL         reduce using rule 9 (defv_multi -> id_adv assign COMMA defv_multi .)


state 62

    (6) defv_multi -> id_adv . array
    (7) defv_multi -> id_adv . assign
    (8) defv_multi -> id_adv . array COMMA defv_multi
    (9) defv_multi -> id_adv . assign COMMA defv_multi
    (12) array -> . empty
    (13) array -> . LBRACK IVAL RBRACK
    (105) assign -> . ASSIGN expr
    (114) empty -> .

    LBRACK          shift and go to state 21
    ASSIGN          shift and go to state 20
    COMMA           reduce using rule 114 (empty -> .)
    SEMICOL         reduce using rule 114 (empty -> .)

    assign                         shift and go to state 16
    array                          shift and go to state 19
    empty                          shift and go to state 18

state 63

    (19) args -> arg COMMA . args
    (18) args -> . arg
    (19) args -> . arg COMMA args
    (20) arg -> . type id_adv array
    (106) type -> . INT
    (107) type -> . FLOAT
    (108) type -> . CHAR
    (109) type -> . VOID

    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 1
    VOID            shift and go to state 3

    args                           shift and go to state 114
    arg                            shift and go to state 24
    type                           shift and go to state 25

state 64

    (20) arg -> type id_adv . array
    (12) array -> . empty
    (13) array -> . LBRACK IVAL RBRACK
    (114) empty -> .

    LBRACK          shift and go to state 21
    COMMA           reduce using rule 114 (empty -> .)
    RPAREN          reduce using rule 114 (empty -> .)

    empty                          shift and go to state 18
    array                          shift and go to state 115

state 65

    (14) deff -> type id_adv LPAREN s_args RPAREN . LBRACE body RBRACE

    LBRACE          shift and go to state 116


state 66

    (8) defv_multi -> id_adv array COMMA defv_multi .

    SEMICOL         reduce using rule 8 (defv_multi -> id_adv array COMMA defv_multi .)


state 67

    (69) shiftexpr -> shiftexpr LSHIFT . addexpr
    (65) addexpr -> . multexpr
    (66) addexpr -> . addexpr PLUS multexpr
    (67) addexpr -> . addexpr MINUS multexpr
    (61) multexpr -> . unaryexpr
    (62) multexpr -> . multexpr TIMES unaryexpr
    (63) multexpr -> . multexpr DIVIDE unaryexpr
    (64) multexpr -> . multexpr MOD unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL

    AND             shift and go to state 58
    TIMES           shift and go to state 74
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57

    unaryexpr                      shift and go to state 39
    postexpr                       shift and go to state 72
    const                          shift and go to state 45
    addexpr                        shift and go to state 117
    priexpr                        shift and go to state 51
    multexpr                       shift and go to state 54

state 68

    (70) shiftexpr -> shiftexpr RSHIFT . addexpr
    (65) addexpr -> . multexpr
    (66) addexpr -> . addexpr PLUS multexpr
    (67) addexpr -> . addexpr MINUS multexpr
    (61) multexpr -> . unaryexpr
    (62) multexpr -> . multexpr TIMES unaryexpr
    (63) multexpr -> . multexpr DIVIDE unaryexpr
    (64) multexpr -> . multexpr MOD unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL

    AND             shift and go to state 58
    TIMES           shift and go to state 74
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57

    unaryexpr                      shift and go to state 39
    postexpr                       shift and go to state 72
    const                          shift and go to state 45
    addexpr                        shift and go to state 118
    priexpr                        shift and go to state 51
    multexpr                       shift and go to state 54

state 69

    (43) priexpr -> LPAREN expr_many . RPAREN
    (104) expr_many -> expr_many . COMMA expr

    RPAREN          shift and go to state 120
    COMMA           shift and go to state 119


state 70

    (103) expr_many -> expr .

    SEMICOL         reduce using rule 103 (expr_many -> expr .)
    COMMA           reduce using rule 103 (expr_many -> expr .)
    RPAREN          reduce using rule 103 (expr_many -> expr .)
    RBRACK          reduce using rule 103 (expr_many -> expr .)


state 71

    (84) orexpr -> orexpr OR . xorexpr
    (81) xorexpr -> . andexpr
    (82) xorexpr -> . xorexpr XOR andexpr
    (79) andexpr -> . eqexpr
    (80) andexpr -> . andexpr AND eqexpr
    (76) eqexpr -> . relexpr
    (77) eqexpr -> . eqexpr EQ relexpr
    (78) eqexpr -> . eqexpr NE relexpr
    (71) relexpr -> . shiftexpr
    (72) relexpr -> . relexpr LE shiftexpr
    (73) relexpr -> . relexpr GE shiftexpr
    (74) relexpr -> . relexpr LEQ shiftexpr
    (75) relexpr -> . relexpr GEQ shiftexpr
    (68) shiftexpr -> . addexpr
    (69) shiftexpr -> . shiftexpr LSHIFT addexpr
    (70) shiftexpr -> . shiftexpr RSHIFT addexpr
    (65) addexpr -> . multexpr
    (66) addexpr -> . addexpr PLUS multexpr
    (67) addexpr -> . addexpr MINUS multexpr
    (61) multexpr -> . unaryexpr
    (62) multexpr -> . multexpr TIMES unaryexpr
    (63) multexpr -> . multexpr DIVIDE unaryexpr
    (64) multexpr -> . multexpr MOD unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL

    AND             shift and go to state 58
    TIMES           shift and go to state 74
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57

    shiftexpr                      shift and go to state 31
    xorexpr                        shift and go to state 121
    unaryexpr                      shift and go to state 39
    priexpr                        shift and go to state 51
    addexpr                        shift and go to state 44
    eqexpr                         shift and go to state 50
    multexpr                       shift and go to state 54
    andexpr                        shift and go to state 36
    const                          shift and go to state 45
    relexpr                        shift and go to state 59
    postexpr                       shift and go to state 72

state 72

    (52) unaryexpr -> postexpr .
    (45) postexpr -> postexpr . LBRACK expr_many RBRACK
    (46) postexpr -> postexpr . LPAREN RPAREN
    (47) postexpr -> postexpr . LPAREN argexpr_list RPAREN
    (48) postexpr -> postexpr . INC
    (49) postexpr -> postexpr . DEC

    TIMES           reduce using rule 52 (unaryexpr -> postexpr .)
    DIVIDE          reduce using rule 52 (unaryexpr -> postexpr .)
    MOD             reduce using rule 52 (unaryexpr -> postexpr .)
    PLUS            reduce using rule 52 (unaryexpr -> postexpr .)
    MINUS           reduce using rule 52 (unaryexpr -> postexpr .)
    LSHIFT          reduce using rule 52 (unaryexpr -> postexpr .)
    RSHIFT          reduce using rule 52 (unaryexpr -> postexpr .)
    LE              reduce using rule 52 (unaryexpr -> postexpr .)
    GE              reduce using rule 52 (unaryexpr -> postexpr .)
    LEQ             reduce using rule 52 (unaryexpr -> postexpr .)
    GEQ             reduce using rule 52 (unaryexpr -> postexpr .)
    EQ              reduce using rule 52 (unaryexpr -> postexpr .)
    NE              reduce using rule 52 (unaryexpr -> postexpr .)
    AND             reduce using rule 52 (unaryexpr -> postexpr .)
    XOR             reduce using rule 52 (unaryexpr -> postexpr .)
    OR              reduce using rule 52 (unaryexpr -> postexpr .)
    LAND            reduce using rule 52 (unaryexpr -> postexpr .)
    LOR             reduce using rule 52 (unaryexpr -> postexpr .)
    COMMA           reduce using rule 52 (unaryexpr -> postexpr .)
    SEMICOL         reduce using rule 52 (unaryexpr -> postexpr .)
    RPAREN          reduce using rule 52 (unaryexpr -> postexpr .)
    RBRACK          reduce using rule 52 (unaryexpr -> postexpr .)
    ASSIGN          reduce using rule 52 (unaryexpr -> postexpr .)
    PLUS_ASSIGN     reduce using rule 52 (unaryexpr -> postexpr .)
    MINUS_ASSIGN    reduce using rule 52 (unaryexpr -> postexpr .)
    TIMES_ASSIGN    reduce using rule 52 (unaryexpr -> postexpr .)
    DIVIDE_ASSIGN   reduce using rule 52 (unaryexpr -> postexpr .)
    MOD_ASSIGN      reduce using rule 52 (unaryexpr -> postexpr .)
    AND_ASSIGN      reduce using rule 52 (unaryexpr -> postexpr .)
    OR_ASSIGN       reduce using rule 52 (unaryexpr -> postexpr .)
    XOR_ASSIGN      reduce using rule 52 (unaryexpr -> postexpr .)
    LSHIFT_ASSIGN   reduce using rule 52 (unaryexpr -> postexpr .)
    RSHIFT_ASSIGN   reduce using rule 52 (unaryexpr -> postexpr .)
    LBRACK          shift and go to state 90
    LPAREN          shift and go to state 84
    INC             shift and go to state 99
    DEC             shift and go to state 87


state 73

    (60) unaryexpr -> LNOT unaryexpr .

    TIMES           reduce using rule 60 (unaryexpr -> LNOT unaryexpr .)
    DIVIDE          reduce using rule 60 (unaryexpr -> LNOT unaryexpr .)
    MOD             reduce using rule 60 (unaryexpr -> LNOT unaryexpr .)
    PLUS            reduce using rule 60 (unaryexpr -> LNOT unaryexpr .)
    MINUS           reduce using rule 60 (unaryexpr -> LNOT unaryexpr .)
    LSHIFT          reduce using rule 60 (unaryexpr -> LNOT unaryexpr .)
    RSHIFT          reduce using rule 60 (unaryexpr -> LNOT unaryexpr .)
    LE              reduce using rule 60 (unaryexpr -> LNOT unaryexpr .)
    GE              reduce using rule 60 (unaryexpr -> LNOT unaryexpr .)
    LEQ             reduce using rule 60 (unaryexpr -> LNOT unaryexpr .)
    GEQ             reduce using rule 60 (unaryexpr -> LNOT unaryexpr .)
    EQ              reduce using rule 60 (unaryexpr -> LNOT unaryexpr .)
    NE              reduce using rule 60 (unaryexpr -> LNOT unaryexpr .)
    AND             reduce using rule 60 (unaryexpr -> LNOT unaryexpr .)
    XOR             reduce using rule 60 (unaryexpr -> LNOT unaryexpr .)
    OR              reduce using rule 60 (unaryexpr -> LNOT unaryexpr .)
    LAND            reduce using rule 60 (unaryexpr -> LNOT unaryexpr .)
    LOR             reduce using rule 60 (unaryexpr -> LNOT unaryexpr .)
    SEMICOL         reduce using rule 60 (unaryexpr -> LNOT unaryexpr .)
    COMMA           reduce using rule 60 (unaryexpr -> LNOT unaryexpr .)
    RPAREN          reduce using rule 60 (unaryexpr -> LNOT unaryexpr .)
    RBRACK          reduce using rule 60 (unaryexpr -> LNOT unaryexpr .)
    ASSIGN          reduce using rule 60 (unaryexpr -> LNOT unaryexpr .)
    PLUS_ASSIGN     reduce using rule 60 (unaryexpr -> LNOT unaryexpr .)
    MINUS_ASSIGN    reduce using rule 60 (unaryexpr -> LNOT unaryexpr .)
    TIMES_ASSIGN    reduce using rule 60 (unaryexpr -> LNOT unaryexpr .)
    DIVIDE_ASSIGN   reduce using rule 60 (unaryexpr -> LNOT unaryexpr .)
    MOD_ASSIGN      reduce using rule 60 (unaryexpr -> LNOT unaryexpr .)
    AND_ASSIGN      reduce using rule 60 (unaryexpr -> LNOT unaryexpr .)
    OR_ASSIGN       reduce using rule 60 (unaryexpr -> LNOT unaryexpr .)
    XOR_ASSIGN      reduce using rule 60 (unaryexpr -> LNOT unaryexpr .)
    LSHIFT_ASSIGN   reduce using rule 60 (unaryexpr -> LNOT unaryexpr .)
    RSHIFT_ASSIGN   reduce using rule 60 (unaryexpr -> LNOT unaryexpr .)


state 74

    (54) unaryexpr -> TIMES . unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL

    AND             shift and go to state 58
    TIMES           shift and go to state 74
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57

    unaryexpr                      shift and go to state 122
    postexpr                       shift and go to state 72
    priexpr                        shift and go to state 51
    const                          shift and go to state 45

state 75

    (57) unaryexpr -> PLUS unaryexpr .

    TIMES           reduce using rule 57 (unaryexpr -> PLUS unaryexpr .)
    DIVIDE          reduce using rule 57 (unaryexpr -> PLUS unaryexpr .)
    MOD             reduce using rule 57 (unaryexpr -> PLUS unaryexpr .)
    PLUS            reduce using rule 57 (unaryexpr -> PLUS unaryexpr .)
    MINUS           reduce using rule 57 (unaryexpr -> PLUS unaryexpr .)
    LSHIFT          reduce using rule 57 (unaryexpr -> PLUS unaryexpr .)
    RSHIFT          reduce using rule 57 (unaryexpr -> PLUS unaryexpr .)
    LE              reduce using rule 57 (unaryexpr -> PLUS unaryexpr .)
    GE              reduce using rule 57 (unaryexpr -> PLUS unaryexpr .)
    LEQ             reduce using rule 57 (unaryexpr -> PLUS unaryexpr .)
    GEQ             reduce using rule 57 (unaryexpr -> PLUS unaryexpr .)
    EQ              reduce using rule 57 (unaryexpr -> PLUS unaryexpr .)
    NE              reduce using rule 57 (unaryexpr -> PLUS unaryexpr .)
    AND             reduce using rule 57 (unaryexpr -> PLUS unaryexpr .)
    XOR             reduce using rule 57 (unaryexpr -> PLUS unaryexpr .)
    OR              reduce using rule 57 (unaryexpr -> PLUS unaryexpr .)
    LAND            reduce using rule 57 (unaryexpr -> PLUS unaryexpr .)
    LOR             reduce using rule 57 (unaryexpr -> PLUS unaryexpr .)
    SEMICOL         reduce using rule 57 (unaryexpr -> PLUS unaryexpr .)
    COMMA           reduce using rule 57 (unaryexpr -> PLUS unaryexpr .)
    RPAREN          reduce using rule 57 (unaryexpr -> PLUS unaryexpr .)
    RBRACK          reduce using rule 57 (unaryexpr -> PLUS unaryexpr .)
    ASSIGN          reduce using rule 57 (unaryexpr -> PLUS unaryexpr .)
    PLUS_ASSIGN     reduce using rule 57 (unaryexpr -> PLUS unaryexpr .)
    MINUS_ASSIGN    reduce using rule 57 (unaryexpr -> PLUS unaryexpr .)
    TIMES_ASSIGN    reduce using rule 57 (unaryexpr -> PLUS unaryexpr .)
    DIVIDE_ASSIGN   reduce using rule 57 (unaryexpr -> PLUS unaryexpr .)
    MOD_ASSIGN      reduce using rule 57 (unaryexpr -> PLUS unaryexpr .)
    AND_ASSIGN      reduce using rule 57 (unaryexpr -> PLUS unaryexpr .)
    OR_ASSIGN       reduce using rule 57 (unaryexpr -> PLUS unaryexpr .)
    XOR_ASSIGN      reduce using rule 57 (unaryexpr -> PLUS unaryexpr .)
    LSHIFT_ASSIGN   reduce using rule 57 (unaryexpr -> PLUS unaryexpr .)
    RSHIFT_ASSIGN   reduce using rule 57 (unaryexpr -> PLUS unaryexpr .)


state 76

    (80) andexpr -> andexpr AND . eqexpr
    (76) eqexpr -> . relexpr
    (77) eqexpr -> . eqexpr EQ relexpr
    (78) eqexpr -> . eqexpr NE relexpr
    (71) relexpr -> . shiftexpr
    (72) relexpr -> . relexpr LE shiftexpr
    (73) relexpr -> . relexpr GE shiftexpr
    (74) relexpr -> . relexpr LEQ shiftexpr
    (75) relexpr -> . relexpr GEQ shiftexpr
    (68) shiftexpr -> . addexpr
    (69) shiftexpr -> . shiftexpr LSHIFT addexpr
    (70) shiftexpr -> . shiftexpr RSHIFT addexpr
    (65) addexpr -> . multexpr
    (66) addexpr -> . addexpr PLUS multexpr
    (67) addexpr -> . addexpr MINUS multexpr
    (61) multexpr -> . unaryexpr
    (62) multexpr -> . multexpr TIMES unaryexpr
    (63) multexpr -> . multexpr DIVIDE unaryexpr
    (64) multexpr -> . multexpr MOD unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL

    AND             shift and go to state 58
    TIMES           shift and go to state 74
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57

    shiftexpr                      shift and go to state 31
    unaryexpr                      shift and go to state 39
    priexpr                        shift and go to state 51
    addexpr                        shift and go to state 44
    eqexpr                         shift and go to state 123
    multexpr                       shift and go to state 54
    const                          shift and go to state 45
    relexpr                        shift and go to state 59
    postexpr                       shift and go to state 72

state 77

    (91) expr -> TIMES unaryexpr . assign_op expr
    (54) unaryexpr -> TIMES unaryexpr .
    (92) assign_op -> . ASSIGN
    (93) assign_op -> . PLUS_ASSIGN
    (94) assign_op -> . MINUS_ASSIGN
    (95) assign_op -> . TIMES_ASSIGN
    (96) assign_op -> . DIVIDE_ASSIGN
    (97) assign_op -> . MOD_ASSIGN
    (98) assign_op -> . AND_ASSIGN
    (99) assign_op -> . OR_ASSIGN
    (100) assign_op -> . XOR_ASSIGN
    (101) assign_op -> . LSHIFT_ASSIGN
    (102) assign_op -> . RSHIFT_ASSIGN

    TIMES           reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    DIVIDE          reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    MOD             reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    PLUS            reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    MINUS           reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    LSHIFT          reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    RSHIFT          reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    LE              reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    GE              reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    LEQ             reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    GEQ             reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    EQ              reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    NE              reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    AND             reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    XOR             reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    OR              reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    LAND            reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    LOR             reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    SEMICOL         reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    COMMA           reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    RPAREN          reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    RBRACK          reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    ASSIGN          shift and go to state 93
    PLUS_ASSIGN     shift and go to state 85
    MINUS_ASSIGN    shift and go to state 89
    TIMES_ASSIGN    shift and go to state 97
    DIVIDE_ASSIGN   shift and go to state 88
    MOD_ASSIGN      shift and go to state 92
    AND_ASSIGN      shift and go to state 98
    OR_ASSIGN       shift and go to state 94
    XOR_ASSIGN      shift and go to state 86
    LSHIFT_ASSIGN   shift and go to state 96
    RSHIFT_ASSIGN   shift and go to state 91

    assign_op                      shift and go to state 124

state 78

    (82) xorexpr -> xorexpr XOR . andexpr
    (79) andexpr -> . eqexpr
    (80) andexpr -> . andexpr AND eqexpr
    (76) eqexpr -> . relexpr
    (77) eqexpr -> . eqexpr EQ relexpr
    (78) eqexpr -> . eqexpr NE relexpr
    (71) relexpr -> . shiftexpr
    (72) relexpr -> . relexpr LE shiftexpr
    (73) relexpr -> . relexpr GE shiftexpr
    (74) relexpr -> . relexpr LEQ shiftexpr
    (75) relexpr -> . relexpr GEQ shiftexpr
    (68) shiftexpr -> . addexpr
    (69) shiftexpr -> . shiftexpr LSHIFT addexpr
    (70) shiftexpr -> . shiftexpr RSHIFT addexpr
    (65) addexpr -> . multexpr
    (66) addexpr -> . addexpr PLUS multexpr
    (67) addexpr -> . addexpr MINUS multexpr
    (61) multexpr -> . unaryexpr
    (62) multexpr -> . multexpr TIMES unaryexpr
    (63) multexpr -> . multexpr DIVIDE unaryexpr
    (64) multexpr -> . multexpr MOD unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL

    AND             shift and go to state 58
    TIMES           shift and go to state 74
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57

    shiftexpr                      shift and go to state 31
    unaryexpr                      shift and go to state 39
    priexpr                        shift and go to state 51
    addexpr                        shift and go to state 44
    eqexpr                         shift and go to state 50
    multexpr                       shift and go to state 54
    andexpr                        shift and go to state 125
    const                          shift and go to state 45
    relexpr                        shift and go to state 59
    postexpr                       shift and go to state 72

state 79

    (86) landexpr -> landexpr LAND . orexpr
    (83) orexpr -> . xorexpr
    (84) orexpr -> . orexpr OR xorexpr
    (81) xorexpr -> . andexpr
    (82) xorexpr -> . xorexpr XOR andexpr
    (79) andexpr -> . eqexpr
    (80) andexpr -> . andexpr AND eqexpr
    (76) eqexpr -> . relexpr
    (77) eqexpr -> . eqexpr EQ relexpr
    (78) eqexpr -> . eqexpr NE relexpr
    (71) relexpr -> . shiftexpr
    (72) relexpr -> . relexpr LE shiftexpr
    (73) relexpr -> . relexpr GE shiftexpr
    (74) relexpr -> . relexpr LEQ shiftexpr
    (75) relexpr -> . relexpr GEQ shiftexpr
    (68) shiftexpr -> . addexpr
    (69) shiftexpr -> . shiftexpr LSHIFT addexpr
    (70) shiftexpr -> . shiftexpr RSHIFT addexpr
    (65) addexpr -> . multexpr
    (66) addexpr -> . addexpr PLUS multexpr
    (67) addexpr -> . addexpr MINUS multexpr
    (61) multexpr -> . unaryexpr
    (62) multexpr -> . multexpr TIMES unaryexpr
    (63) multexpr -> . multexpr DIVIDE unaryexpr
    (64) multexpr -> . multexpr MOD unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL

    AND             shift and go to state 58
    TIMES           shift and go to state 74
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57

    shiftexpr                      shift and go to state 31
    xorexpr                        shift and go to state 38
    unaryexpr                      shift and go to state 39
    relexpr                        shift and go to state 59
    addexpr                        shift and go to state 44
    priexpr                        shift and go to state 51
    multexpr                       shift and go to state 54
    andexpr                        shift and go to state 36
    const                          shift and go to state 45
    orexpr                         shift and go to state 126
    eqexpr                         shift and go to state 50
    postexpr                       shift and go to state 72

state 80

    (67) addexpr -> addexpr MINUS . multexpr
    (61) multexpr -> . unaryexpr
    (62) multexpr -> . multexpr TIMES unaryexpr
    (63) multexpr -> . multexpr DIVIDE unaryexpr
    (64) multexpr -> . multexpr MOD unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL

    AND             shift and go to state 58
    TIMES           shift and go to state 74
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57

    unaryexpr                      shift and go to state 39
    priexpr                        shift and go to state 51
    const                          shift and go to state 45
    postexpr                       shift and go to state 72
    multexpr                       shift and go to state 127

state 81

    (66) addexpr -> addexpr PLUS . multexpr
    (61) multexpr -> . unaryexpr
    (62) multexpr -> . multexpr TIMES unaryexpr
    (63) multexpr -> . multexpr DIVIDE unaryexpr
    (64) multexpr -> . multexpr MOD unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL

    AND             shift and go to state 58
    TIMES           shift and go to state 74
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57

    unaryexpr                      shift and go to state 39
    priexpr                        shift and go to state 51
    const                          shift and go to state 45
    postexpr                       shift and go to state 72
    multexpr                       shift and go to state 128

state 82

    (55) unaryexpr -> INC unaryexpr .

    TIMES           reduce using rule 55 (unaryexpr -> INC unaryexpr .)
    DIVIDE          reduce using rule 55 (unaryexpr -> INC unaryexpr .)
    MOD             reduce using rule 55 (unaryexpr -> INC unaryexpr .)
    PLUS            reduce using rule 55 (unaryexpr -> INC unaryexpr .)
    MINUS           reduce using rule 55 (unaryexpr -> INC unaryexpr .)
    LSHIFT          reduce using rule 55 (unaryexpr -> INC unaryexpr .)
    RSHIFT          reduce using rule 55 (unaryexpr -> INC unaryexpr .)
    LE              reduce using rule 55 (unaryexpr -> INC unaryexpr .)
    GE              reduce using rule 55 (unaryexpr -> INC unaryexpr .)
    LEQ             reduce using rule 55 (unaryexpr -> INC unaryexpr .)
    GEQ             reduce using rule 55 (unaryexpr -> INC unaryexpr .)
    EQ              reduce using rule 55 (unaryexpr -> INC unaryexpr .)
    NE              reduce using rule 55 (unaryexpr -> INC unaryexpr .)
    AND             reduce using rule 55 (unaryexpr -> INC unaryexpr .)
    XOR             reduce using rule 55 (unaryexpr -> INC unaryexpr .)
    OR              reduce using rule 55 (unaryexpr -> INC unaryexpr .)
    LAND            reduce using rule 55 (unaryexpr -> INC unaryexpr .)
    LOR             reduce using rule 55 (unaryexpr -> INC unaryexpr .)
    SEMICOL         reduce using rule 55 (unaryexpr -> INC unaryexpr .)
    COMMA           reduce using rule 55 (unaryexpr -> INC unaryexpr .)
    RPAREN          reduce using rule 55 (unaryexpr -> INC unaryexpr .)
    RBRACK          reduce using rule 55 (unaryexpr -> INC unaryexpr .)
    ASSIGN          reduce using rule 55 (unaryexpr -> INC unaryexpr .)
    PLUS_ASSIGN     reduce using rule 55 (unaryexpr -> INC unaryexpr .)
    MINUS_ASSIGN    reduce using rule 55 (unaryexpr -> INC unaryexpr .)
    TIMES_ASSIGN    reduce using rule 55 (unaryexpr -> INC unaryexpr .)
    DIVIDE_ASSIGN   reduce using rule 55 (unaryexpr -> INC unaryexpr .)
    MOD_ASSIGN      reduce using rule 55 (unaryexpr -> INC unaryexpr .)
    AND_ASSIGN      reduce using rule 55 (unaryexpr -> INC unaryexpr .)
    OR_ASSIGN       reduce using rule 55 (unaryexpr -> INC unaryexpr .)
    XOR_ASSIGN      reduce using rule 55 (unaryexpr -> INC unaryexpr .)
    LSHIFT_ASSIGN   reduce using rule 55 (unaryexpr -> INC unaryexpr .)
    RSHIFT_ASSIGN   reduce using rule 55 (unaryexpr -> INC unaryexpr .)


state 83

    (59) unaryexpr -> NOT unaryexpr .

    TIMES           reduce using rule 59 (unaryexpr -> NOT unaryexpr .)
    DIVIDE          reduce using rule 59 (unaryexpr -> NOT unaryexpr .)
    MOD             reduce using rule 59 (unaryexpr -> NOT unaryexpr .)
    PLUS            reduce using rule 59 (unaryexpr -> NOT unaryexpr .)
    MINUS           reduce using rule 59 (unaryexpr -> NOT unaryexpr .)
    LSHIFT          reduce using rule 59 (unaryexpr -> NOT unaryexpr .)
    RSHIFT          reduce using rule 59 (unaryexpr -> NOT unaryexpr .)
    LE              reduce using rule 59 (unaryexpr -> NOT unaryexpr .)
    GE              reduce using rule 59 (unaryexpr -> NOT unaryexpr .)
    LEQ             reduce using rule 59 (unaryexpr -> NOT unaryexpr .)
    GEQ             reduce using rule 59 (unaryexpr -> NOT unaryexpr .)
    EQ              reduce using rule 59 (unaryexpr -> NOT unaryexpr .)
    NE              reduce using rule 59 (unaryexpr -> NOT unaryexpr .)
    AND             reduce using rule 59 (unaryexpr -> NOT unaryexpr .)
    XOR             reduce using rule 59 (unaryexpr -> NOT unaryexpr .)
    OR              reduce using rule 59 (unaryexpr -> NOT unaryexpr .)
    LAND            reduce using rule 59 (unaryexpr -> NOT unaryexpr .)
    LOR             reduce using rule 59 (unaryexpr -> NOT unaryexpr .)
    SEMICOL         reduce using rule 59 (unaryexpr -> NOT unaryexpr .)
    COMMA           reduce using rule 59 (unaryexpr -> NOT unaryexpr .)
    RPAREN          reduce using rule 59 (unaryexpr -> NOT unaryexpr .)
    RBRACK          reduce using rule 59 (unaryexpr -> NOT unaryexpr .)
    ASSIGN          reduce using rule 59 (unaryexpr -> NOT unaryexpr .)
    PLUS_ASSIGN     reduce using rule 59 (unaryexpr -> NOT unaryexpr .)
    MINUS_ASSIGN    reduce using rule 59 (unaryexpr -> NOT unaryexpr .)
    TIMES_ASSIGN    reduce using rule 59 (unaryexpr -> NOT unaryexpr .)
    DIVIDE_ASSIGN   reduce using rule 59 (unaryexpr -> NOT unaryexpr .)
    MOD_ASSIGN      reduce using rule 59 (unaryexpr -> NOT unaryexpr .)
    AND_ASSIGN      reduce using rule 59 (unaryexpr -> NOT unaryexpr .)
    OR_ASSIGN       reduce using rule 59 (unaryexpr -> NOT unaryexpr .)
    XOR_ASSIGN      reduce using rule 59 (unaryexpr -> NOT unaryexpr .)
    LSHIFT_ASSIGN   reduce using rule 59 (unaryexpr -> NOT unaryexpr .)
    RSHIFT_ASSIGN   reduce using rule 59 (unaryexpr -> NOT unaryexpr .)


state 84

    (46) postexpr -> postexpr LPAREN . RPAREN
    (47) postexpr -> postexpr LPAREN . argexpr_list RPAREN
    (50) argexpr_list -> . expr
    (51) argexpr_list -> . argexpr_list COMMA expr
    (89) expr -> . lorexpr
    (90) expr -> . postexpr assign_op expr
    (91) expr -> . TIMES unaryexpr assign_op expr
    (87) lorexpr -> . landexpr
    (88) lorexpr -> . lorexpr LOR landexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (85) landexpr -> . orexpr
    (86) landexpr -> . landexpr LAND orexpr
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (83) orexpr -> . xorexpr
    (84) orexpr -> . orexpr OR xorexpr
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL
    (81) xorexpr -> . andexpr
    (82) xorexpr -> . xorexpr XOR andexpr
    (79) andexpr -> . eqexpr
    (80) andexpr -> . andexpr AND eqexpr
    (76) eqexpr -> . relexpr
    (77) eqexpr -> . eqexpr EQ relexpr
    (78) eqexpr -> . eqexpr NE relexpr
    (71) relexpr -> . shiftexpr
    (72) relexpr -> . relexpr LE shiftexpr
    (73) relexpr -> . relexpr GE shiftexpr
    (74) relexpr -> . relexpr LEQ shiftexpr
    (75) relexpr -> . relexpr GEQ shiftexpr
    (68) shiftexpr -> . addexpr
    (69) shiftexpr -> . shiftexpr LSHIFT addexpr
    (70) shiftexpr -> . shiftexpr RSHIFT addexpr
    (65) addexpr -> . multexpr
    (66) addexpr -> . addexpr PLUS multexpr
    (67) addexpr -> . addexpr MINUS multexpr
    (61) multexpr -> . unaryexpr
    (62) multexpr -> . multexpr TIMES unaryexpr
    (63) multexpr -> . multexpr DIVIDE unaryexpr
    (64) multexpr -> . multexpr MOD unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr

    RPAREN          shift and go to state 131
    TIMES           shift and go to state 37
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57
    AND             shift and go to state 58
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34

    shiftexpr                      shift and go to state 31
    xorexpr                        shift and go to state 38
    unaryexpr                      shift and go to state 39
    priexpr                        shift and go to state 51
    lorexpr                        shift and go to state 56
    addexpr                        shift and go to state 44
    landexpr                       shift and go to state 41
    argexpr_list                   shift and go to state 129
    orexpr                         shift and go to state 33
    multexpr                       shift and go to state 54
    postexpr                       shift and go to state 48
    relexpr                        shift and go to state 59
    expr                           shift and go to state 130
    andexpr                        shift and go to state 36
    const                          shift and go to state 45
    eqexpr                         shift and go to state 50

state 85

    (93) assign_op -> PLUS_ASSIGN .

    TIMES           reduce using rule 93 (assign_op -> PLUS_ASSIGN .)
    ID              reduce using rule 93 (assign_op -> PLUS_ASSIGN .)
    LPAREN          reduce using rule 93 (assign_op -> PLUS_ASSIGN .)
    IVAL            reduce using rule 93 (assign_op -> PLUS_ASSIGN .)
    FVAL            reduce using rule 93 (assign_op -> PLUS_ASSIGN .)
    SVAL            reduce using rule 93 (assign_op -> PLUS_ASSIGN .)
    CVAL            reduce using rule 93 (assign_op -> PLUS_ASSIGN .)
    AND             reduce using rule 93 (assign_op -> PLUS_ASSIGN .)
    INC             reduce using rule 93 (assign_op -> PLUS_ASSIGN .)
    DEC             reduce using rule 93 (assign_op -> PLUS_ASSIGN .)
    PLUS            reduce using rule 93 (assign_op -> PLUS_ASSIGN .)
    MINUS           reduce using rule 93 (assign_op -> PLUS_ASSIGN .)
    NOT             reduce using rule 93 (assign_op -> PLUS_ASSIGN .)
    LNOT            reduce using rule 93 (assign_op -> PLUS_ASSIGN .)


state 86

    (100) assign_op -> XOR_ASSIGN .

    TIMES           reduce using rule 100 (assign_op -> XOR_ASSIGN .)
    ID              reduce using rule 100 (assign_op -> XOR_ASSIGN .)
    LPAREN          reduce using rule 100 (assign_op -> XOR_ASSIGN .)
    IVAL            reduce using rule 100 (assign_op -> XOR_ASSIGN .)
    FVAL            reduce using rule 100 (assign_op -> XOR_ASSIGN .)
    SVAL            reduce using rule 100 (assign_op -> XOR_ASSIGN .)
    CVAL            reduce using rule 100 (assign_op -> XOR_ASSIGN .)
    AND             reduce using rule 100 (assign_op -> XOR_ASSIGN .)
    INC             reduce using rule 100 (assign_op -> XOR_ASSIGN .)
    DEC             reduce using rule 100 (assign_op -> XOR_ASSIGN .)
    PLUS            reduce using rule 100 (assign_op -> XOR_ASSIGN .)
    MINUS           reduce using rule 100 (assign_op -> XOR_ASSIGN .)
    NOT             reduce using rule 100 (assign_op -> XOR_ASSIGN .)
    LNOT            reduce using rule 100 (assign_op -> XOR_ASSIGN .)


state 87

    (49) postexpr -> postexpr DEC .

    LBRACK          reduce using rule 49 (postexpr -> postexpr DEC .)
    LPAREN          reduce using rule 49 (postexpr -> postexpr DEC .)
    INC             reduce using rule 49 (postexpr -> postexpr DEC .)
    DEC             reduce using rule 49 (postexpr -> postexpr DEC .)
    TIMES           reduce using rule 49 (postexpr -> postexpr DEC .)
    DIVIDE          reduce using rule 49 (postexpr -> postexpr DEC .)
    MOD             reduce using rule 49 (postexpr -> postexpr DEC .)
    PLUS            reduce using rule 49 (postexpr -> postexpr DEC .)
    MINUS           reduce using rule 49 (postexpr -> postexpr DEC .)
    LSHIFT          reduce using rule 49 (postexpr -> postexpr DEC .)
    RSHIFT          reduce using rule 49 (postexpr -> postexpr DEC .)
    LE              reduce using rule 49 (postexpr -> postexpr DEC .)
    GE              reduce using rule 49 (postexpr -> postexpr DEC .)
    LEQ             reduce using rule 49 (postexpr -> postexpr DEC .)
    GEQ             reduce using rule 49 (postexpr -> postexpr DEC .)
    EQ              reduce using rule 49 (postexpr -> postexpr DEC .)
    NE              reduce using rule 49 (postexpr -> postexpr DEC .)
    AND             reduce using rule 49 (postexpr -> postexpr DEC .)
    XOR             reduce using rule 49 (postexpr -> postexpr DEC .)
    OR              reduce using rule 49 (postexpr -> postexpr DEC .)
    LAND            reduce using rule 49 (postexpr -> postexpr DEC .)
    LOR             reduce using rule 49 (postexpr -> postexpr DEC .)
    COMMA           reduce using rule 49 (postexpr -> postexpr DEC .)
    SEMICOL         reduce using rule 49 (postexpr -> postexpr DEC .)
    RPAREN          reduce using rule 49 (postexpr -> postexpr DEC .)
    ASSIGN          reduce using rule 49 (postexpr -> postexpr DEC .)
    PLUS_ASSIGN     reduce using rule 49 (postexpr -> postexpr DEC .)
    MINUS_ASSIGN    reduce using rule 49 (postexpr -> postexpr DEC .)
    TIMES_ASSIGN    reduce using rule 49 (postexpr -> postexpr DEC .)
    DIVIDE_ASSIGN   reduce using rule 49 (postexpr -> postexpr DEC .)
    MOD_ASSIGN      reduce using rule 49 (postexpr -> postexpr DEC .)
    AND_ASSIGN      reduce using rule 49 (postexpr -> postexpr DEC .)
    OR_ASSIGN       reduce using rule 49 (postexpr -> postexpr DEC .)
    XOR_ASSIGN      reduce using rule 49 (postexpr -> postexpr DEC .)
    LSHIFT_ASSIGN   reduce using rule 49 (postexpr -> postexpr DEC .)
    RSHIFT_ASSIGN   reduce using rule 49 (postexpr -> postexpr DEC .)
    RBRACK          reduce using rule 49 (postexpr -> postexpr DEC .)


state 88

    (96) assign_op -> DIVIDE_ASSIGN .

    TIMES           reduce using rule 96 (assign_op -> DIVIDE_ASSIGN .)
    ID              reduce using rule 96 (assign_op -> DIVIDE_ASSIGN .)
    LPAREN          reduce using rule 96 (assign_op -> DIVIDE_ASSIGN .)
    IVAL            reduce using rule 96 (assign_op -> DIVIDE_ASSIGN .)
    FVAL            reduce using rule 96 (assign_op -> DIVIDE_ASSIGN .)
    SVAL            reduce using rule 96 (assign_op -> DIVIDE_ASSIGN .)
    CVAL            reduce using rule 96 (assign_op -> DIVIDE_ASSIGN .)
    AND             reduce using rule 96 (assign_op -> DIVIDE_ASSIGN .)
    INC             reduce using rule 96 (assign_op -> DIVIDE_ASSIGN .)
    DEC             reduce using rule 96 (assign_op -> DIVIDE_ASSIGN .)
    PLUS            reduce using rule 96 (assign_op -> DIVIDE_ASSIGN .)
    MINUS           reduce using rule 96 (assign_op -> DIVIDE_ASSIGN .)
    NOT             reduce using rule 96 (assign_op -> DIVIDE_ASSIGN .)
    LNOT            reduce using rule 96 (assign_op -> DIVIDE_ASSIGN .)


state 89

    (94) assign_op -> MINUS_ASSIGN .

    TIMES           reduce using rule 94 (assign_op -> MINUS_ASSIGN .)
    ID              reduce using rule 94 (assign_op -> MINUS_ASSIGN .)
    LPAREN          reduce using rule 94 (assign_op -> MINUS_ASSIGN .)
    IVAL            reduce using rule 94 (assign_op -> MINUS_ASSIGN .)
    FVAL            reduce using rule 94 (assign_op -> MINUS_ASSIGN .)
    SVAL            reduce using rule 94 (assign_op -> MINUS_ASSIGN .)
    CVAL            reduce using rule 94 (assign_op -> MINUS_ASSIGN .)
    AND             reduce using rule 94 (assign_op -> MINUS_ASSIGN .)
    INC             reduce using rule 94 (assign_op -> MINUS_ASSIGN .)
    DEC             reduce using rule 94 (assign_op -> MINUS_ASSIGN .)
    PLUS            reduce using rule 94 (assign_op -> MINUS_ASSIGN .)
    MINUS           reduce using rule 94 (assign_op -> MINUS_ASSIGN .)
    NOT             reduce using rule 94 (assign_op -> MINUS_ASSIGN .)
    LNOT            reduce using rule 94 (assign_op -> MINUS_ASSIGN .)


state 90

    (45) postexpr -> postexpr LBRACK . expr_many RBRACK
    (103) expr_many -> . expr
    (104) expr_many -> . expr_many COMMA expr
    (89) expr -> . lorexpr
    (90) expr -> . postexpr assign_op expr
    (91) expr -> . TIMES unaryexpr assign_op expr
    (87) lorexpr -> . landexpr
    (88) lorexpr -> . lorexpr LOR landexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (85) landexpr -> . orexpr
    (86) landexpr -> . landexpr LAND orexpr
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (83) orexpr -> . xorexpr
    (84) orexpr -> . orexpr OR xorexpr
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL
    (81) xorexpr -> . andexpr
    (82) xorexpr -> . xorexpr XOR andexpr
    (79) andexpr -> . eqexpr
    (80) andexpr -> . andexpr AND eqexpr
    (76) eqexpr -> . relexpr
    (77) eqexpr -> . eqexpr EQ relexpr
    (78) eqexpr -> . eqexpr NE relexpr
    (71) relexpr -> . shiftexpr
    (72) relexpr -> . relexpr LE shiftexpr
    (73) relexpr -> . relexpr GE shiftexpr
    (74) relexpr -> . relexpr LEQ shiftexpr
    (75) relexpr -> . relexpr GEQ shiftexpr
    (68) shiftexpr -> . addexpr
    (69) shiftexpr -> . shiftexpr LSHIFT addexpr
    (70) shiftexpr -> . shiftexpr RSHIFT addexpr
    (65) addexpr -> . multexpr
    (66) addexpr -> . addexpr PLUS multexpr
    (67) addexpr -> . addexpr MINUS multexpr
    (61) multexpr -> . unaryexpr
    (62) multexpr -> . multexpr TIMES unaryexpr
    (63) multexpr -> . multexpr DIVIDE unaryexpr
    (64) multexpr -> . multexpr MOD unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr

    TIMES           shift and go to state 37
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57
    AND             shift and go to state 58
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34

    shiftexpr                      shift and go to state 31
    xorexpr                        shift and go to state 38
    unaryexpr                      shift and go to state 39
    priexpr                        shift and go to state 51
    lorexpr                        shift and go to state 56
    addexpr                        shift and go to state 44
    landexpr                       shift and go to state 41
    orexpr                         shift and go to state 33
    multexpr                       shift and go to state 54
    postexpr                       shift and go to state 48
    relexpr                        shift and go to state 59
    expr                           shift and go to state 70
    expr_many                      shift and go to state 132
    andexpr                        shift and go to state 36
    const                          shift and go to state 45
    eqexpr                         shift and go to state 50

state 91

    (102) assign_op -> RSHIFT_ASSIGN .

    TIMES           reduce using rule 102 (assign_op -> RSHIFT_ASSIGN .)
    ID              reduce using rule 102 (assign_op -> RSHIFT_ASSIGN .)
    LPAREN          reduce using rule 102 (assign_op -> RSHIFT_ASSIGN .)
    IVAL            reduce using rule 102 (assign_op -> RSHIFT_ASSIGN .)
    FVAL            reduce using rule 102 (assign_op -> RSHIFT_ASSIGN .)
    SVAL            reduce using rule 102 (assign_op -> RSHIFT_ASSIGN .)
    CVAL            reduce using rule 102 (assign_op -> RSHIFT_ASSIGN .)
    AND             reduce using rule 102 (assign_op -> RSHIFT_ASSIGN .)
    INC             reduce using rule 102 (assign_op -> RSHIFT_ASSIGN .)
    DEC             reduce using rule 102 (assign_op -> RSHIFT_ASSIGN .)
    PLUS            reduce using rule 102 (assign_op -> RSHIFT_ASSIGN .)
    MINUS           reduce using rule 102 (assign_op -> RSHIFT_ASSIGN .)
    NOT             reduce using rule 102 (assign_op -> RSHIFT_ASSIGN .)
    LNOT            reduce using rule 102 (assign_op -> RSHIFT_ASSIGN .)


state 92

    (97) assign_op -> MOD_ASSIGN .

    TIMES           reduce using rule 97 (assign_op -> MOD_ASSIGN .)
    ID              reduce using rule 97 (assign_op -> MOD_ASSIGN .)
    LPAREN          reduce using rule 97 (assign_op -> MOD_ASSIGN .)
    IVAL            reduce using rule 97 (assign_op -> MOD_ASSIGN .)
    FVAL            reduce using rule 97 (assign_op -> MOD_ASSIGN .)
    SVAL            reduce using rule 97 (assign_op -> MOD_ASSIGN .)
    CVAL            reduce using rule 97 (assign_op -> MOD_ASSIGN .)
    AND             reduce using rule 97 (assign_op -> MOD_ASSIGN .)
    INC             reduce using rule 97 (assign_op -> MOD_ASSIGN .)
    DEC             reduce using rule 97 (assign_op -> MOD_ASSIGN .)
    PLUS            reduce using rule 97 (assign_op -> MOD_ASSIGN .)
    MINUS           reduce using rule 97 (assign_op -> MOD_ASSIGN .)
    NOT             reduce using rule 97 (assign_op -> MOD_ASSIGN .)
    LNOT            reduce using rule 97 (assign_op -> MOD_ASSIGN .)


state 93

    (92) assign_op -> ASSIGN .

    TIMES           reduce using rule 92 (assign_op -> ASSIGN .)
    ID              reduce using rule 92 (assign_op -> ASSIGN .)
    LPAREN          reduce using rule 92 (assign_op -> ASSIGN .)
    IVAL            reduce using rule 92 (assign_op -> ASSIGN .)
    FVAL            reduce using rule 92 (assign_op -> ASSIGN .)
    SVAL            reduce using rule 92 (assign_op -> ASSIGN .)
    CVAL            reduce using rule 92 (assign_op -> ASSIGN .)
    AND             reduce using rule 92 (assign_op -> ASSIGN .)
    INC             reduce using rule 92 (assign_op -> ASSIGN .)
    DEC             reduce using rule 92 (assign_op -> ASSIGN .)
    PLUS            reduce using rule 92 (assign_op -> ASSIGN .)
    MINUS           reduce using rule 92 (assign_op -> ASSIGN .)
    NOT             reduce using rule 92 (assign_op -> ASSIGN .)
    LNOT            reduce using rule 92 (assign_op -> ASSIGN .)


state 94

    (99) assign_op -> OR_ASSIGN .

    TIMES           reduce using rule 99 (assign_op -> OR_ASSIGN .)
    ID              reduce using rule 99 (assign_op -> OR_ASSIGN .)
    LPAREN          reduce using rule 99 (assign_op -> OR_ASSIGN .)
    IVAL            reduce using rule 99 (assign_op -> OR_ASSIGN .)
    FVAL            reduce using rule 99 (assign_op -> OR_ASSIGN .)
    SVAL            reduce using rule 99 (assign_op -> OR_ASSIGN .)
    CVAL            reduce using rule 99 (assign_op -> OR_ASSIGN .)
    AND             reduce using rule 99 (assign_op -> OR_ASSIGN .)
    INC             reduce using rule 99 (assign_op -> OR_ASSIGN .)
    DEC             reduce using rule 99 (assign_op -> OR_ASSIGN .)
    PLUS            reduce using rule 99 (assign_op -> OR_ASSIGN .)
    MINUS           reduce using rule 99 (assign_op -> OR_ASSIGN .)
    NOT             reduce using rule 99 (assign_op -> OR_ASSIGN .)
    LNOT            reduce using rule 99 (assign_op -> OR_ASSIGN .)


state 95

    (90) expr -> postexpr assign_op . expr
    (89) expr -> . lorexpr
    (90) expr -> . postexpr assign_op expr
    (91) expr -> . TIMES unaryexpr assign_op expr
    (87) lorexpr -> . landexpr
    (88) lorexpr -> . lorexpr LOR landexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (85) landexpr -> . orexpr
    (86) landexpr -> . landexpr LAND orexpr
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (83) orexpr -> . xorexpr
    (84) orexpr -> . orexpr OR xorexpr
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL
    (81) xorexpr -> . andexpr
    (82) xorexpr -> . xorexpr XOR andexpr
    (79) andexpr -> . eqexpr
    (80) andexpr -> . andexpr AND eqexpr
    (76) eqexpr -> . relexpr
    (77) eqexpr -> . eqexpr EQ relexpr
    (78) eqexpr -> . eqexpr NE relexpr
    (71) relexpr -> . shiftexpr
    (72) relexpr -> . relexpr LE shiftexpr
    (73) relexpr -> . relexpr GE shiftexpr
    (74) relexpr -> . relexpr LEQ shiftexpr
    (75) relexpr -> . relexpr GEQ shiftexpr
    (68) shiftexpr -> . addexpr
    (69) shiftexpr -> . shiftexpr LSHIFT addexpr
    (70) shiftexpr -> . shiftexpr RSHIFT addexpr
    (65) addexpr -> . multexpr
    (66) addexpr -> . addexpr PLUS multexpr
    (67) addexpr -> . addexpr MINUS multexpr
    (61) multexpr -> . unaryexpr
    (62) multexpr -> . multexpr TIMES unaryexpr
    (63) multexpr -> . multexpr DIVIDE unaryexpr
    (64) multexpr -> . multexpr MOD unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr

    TIMES           shift and go to state 37
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57
    AND             shift and go to state 58
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34

    shiftexpr                      shift and go to state 31
    xorexpr                        shift and go to state 38
    unaryexpr                      shift and go to state 39
    priexpr                        shift and go to state 51
    lorexpr                        shift and go to state 56
    addexpr                        shift and go to state 44
    landexpr                       shift and go to state 41
    orexpr                         shift and go to state 33
    multexpr                       shift and go to state 54
    postexpr                       shift and go to state 48
    relexpr                        shift and go to state 59
    expr                           shift and go to state 133
    andexpr                        shift and go to state 36
    const                          shift and go to state 45
    eqexpr                         shift and go to state 50

state 96

    (101) assign_op -> LSHIFT_ASSIGN .

    TIMES           reduce using rule 101 (assign_op -> LSHIFT_ASSIGN .)
    ID              reduce using rule 101 (assign_op -> LSHIFT_ASSIGN .)
    LPAREN          reduce using rule 101 (assign_op -> LSHIFT_ASSIGN .)
    IVAL            reduce using rule 101 (assign_op -> LSHIFT_ASSIGN .)
    FVAL            reduce using rule 101 (assign_op -> LSHIFT_ASSIGN .)
    SVAL            reduce using rule 101 (assign_op -> LSHIFT_ASSIGN .)
    CVAL            reduce using rule 101 (assign_op -> LSHIFT_ASSIGN .)
    AND             reduce using rule 101 (assign_op -> LSHIFT_ASSIGN .)
    INC             reduce using rule 101 (assign_op -> LSHIFT_ASSIGN .)
    DEC             reduce using rule 101 (assign_op -> LSHIFT_ASSIGN .)
    PLUS            reduce using rule 101 (assign_op -> LSHIFT_ASSIGN .)
    MINUS           reduce using rule 101 (assign_op -> LSHIFT_ASSIGN .)
    NOT             reduce using rule 101 (assign_op -> LSHIFT_ASSIGN .)
    LNOT            reduce using rule 101 (assign_op -> LSHIFT_ASSIGN .)


state 97

    (95) assign_op -> TIMES_ASSIGN .

    TIMES           reduce using rule 95 (assign_op -> TIMES_ASSIGN .)
    ID              reduce using rule 95 (assign_op -> TIMES_ASSIGN .)
    LPAREN          reduce using rule 95 (assign_op -> TIMES_ASSIGN .)
    IVAL            reduce using rule 95 (assign_op -> TIMES_ASSIGN .)
    FVAL            reduce using rule 95 (assign_op -> TIMES_ASSIGN .)
    SVAL            reduce using rule 95 (assign_op -> TIMES_ASSIGN .)
    CVAL            reduce using rule 95 (assign_op -> TIMES_ASSIGN .)
    AND             reduce using rule 95 (assign_op -> TIMES_ASSIGN .)
    INC             reduce using rule 95 (assign_op -> TIMES_ASSIGN .)
    DEC             reduce using rule 95 (assign_op -> TIMES_ASSIGN .)
    PLUS            reduce using rule 95 (assign_op -> TIMES_ASSIGN .)
    MINUS           reduce using rule 95 (assign_op -> TIMES_ASSIGN .)
    NOT             reduce using rule 95 (assign_op -> TIMES_ASSIGN .)
    LNOT            reduce using rule 95 (assign_op -> TIMES_ASSIGN .)


state 98

    (98) assign_op -> AND_ASSIGN .

    TIMES           reduce using rule 98 (assign_op -> AND_ASSIGN .)
    ID              reduce using rule 98 (assign_op -> AND_ASSIGN .)
    LPAREN          reduce using rule 98 (assign_op -> AND_ASSIGN .)
    IVAL            reduce using rule 98 (assign_op -> AND_ASSIGN .)
    FVAL            reduce using rule 98 (assign_op -> AND_ASSIGN .)
    SVAL            reduce using rule 98 (assign_op -> AND_ASSIGN .)
    CVAL            reduce using rule 98 (assign_op -> AND_ASSIGN .)
    AND             reduce using rule 98 (assign_op -> AND_ASSIGN .)
    INC             reduce using rule 98 (assign_op -> AND_ASSIGN .)
    DEC             reduce using rule 98 (assign_op -> AND_ASSIGN .)
    PLUS            reduce using rule 98 (assign_op -> AND_ASSIGN .)
    MINUS           reduce using rule 98 (assign_op -> AND_ASSIGN .)
    NOT             reduce using rule 98 (assign_op -> AND_ASSIGN .)
    LNOT            reduce using rule 98 (assign_op -> AND_ASSIGN .)


state 99

    (48) postexpr -> postexpr INC .

    LBRACK          reduce using rule 48 (postexpr -> postexpr INC .)
    LPAREN          reduce using rule 48 (postexpr -> postexpr INC .)
    INC             reduce using rule 48 (postexpr -> postexpr INC .)
    DEC             reduce using rule 48 (postexpr -> postexpr INC .)
    TIMES           reduce using rule 48 (postexpr -> postexpr INC .)
    DIVIDE          reduce using rule 48 (postexpr -> postexpr INC .)
    MOD             reduce using rule 48 (postexpr -> postexpr INC .)
    PLUS            reduce using rule 48 (postexpr -> postexpr INC .)
    MINUS           reduce using rule 48 (postexpr -> postexpr INC .)
    LSHIFT          reduce using rule 48 (postexpr -> postexpr INC .)
    RSHIFT          reduce using rule 48 (postexpr -> postexpr INC .)
    LE              reduce using rule 48 (postexpr -> postexpr INC .)
    GE              reduce using rule 48 (postexpr -> postexpr INC .)
    LEQ             reduce using rule 48 (postexpr -> postexpr INC .)
    GEQ             reduce using rule 48 (postexpr -> postexpr INC .)
    EQ              reduce using rule 48 (postexpr -> postexpr INC .)
    NE              reduce using rule 48 (postexpr -> postexpr INC .)
    AND             reduce using rule 48 (postexpr -> postexpr INC .)
    XOR             reduce using rule 48 (postexpr -> postexpr INC .)
    OR              reduce using rule 48 (postexpr -> postexpr INC .)
    LAND            reduce using rule 48 (postexpr -> postexpr INC .)
    LOR             reduce using rule 48 (postexpr -> postexpr INC .)
    COMMA           reduce using rule 48 (postexpr -> postexpr INC .)
    SEMICOL         reduce using rule 48 (postexpr -> postexpr INC .)
    RPAREN          reduce using rule 48 (postexpr -> postexpr INC .)
    ASSIGN          reduce using rule 48 (postexpr -> postexpr INC .)
    PLUS_ASSIGN     reduce using rule 48 (postexpr -> postexpr INC .)
    MINUS_ASSIGN    reduce using rule 48 (postexpr -> postexpr INC .)
    TIMES_ASSIGN    reduce using rule 48 (postexpr -> postexpr INC .)
    DIVIDE_ASSIGN   reduce using rule 48 (postexpr -> postexpr INC .)
    MOD_ASSIGN      reduce using rule 48 (postexpr -> postexpr INC .)
    AND_ASSIGN      reduce using rule 48 (postexpr -> postexpr INC .)
    OR_ASSIGN       reduce using rule 48 (postexpr -> postexpr INC .)
    XOR_ASSIGN      reduce using rule 48 (postexpr -> postexpr INC .)
    LSHIFT_ASSIGN   reduce using rule 48 (postexpr -> postexpr INC .)
    RSHIFT_ASSIGN   reduce using rule 48 (postexpr -> postexpr INC .)
    RBRACK          reduce using rule 48 (postexpr -> postexpr INC .)


state 100

    (56) unaryexpr -> DEC unaryexpr .

    TIMES           reduce using rule 56 (unaryexpr -> DEC unaryexpr .)
    DIVIDE          reduce using rule 56 (unaryexpr -> DEC unaryexpr .)
    MOD             reduce using rule 56 (unaryexpr -> DEC unaryexpr .)
    PLUS            reduce using rule 56 (unaryexpr -> DEC unaryexpr .)
    MINUS           reduce using rule 56 (unaryexpr -> DEC unaryexpr .)
    LSHIFT          reduce using rule 56 (unaryexpr -> DEC unaryexpr .)
    RSHIFT          reduce using rule 56 (unaryexpr -> DEC unaryexpr .)
    LE              reduce using rule 56 (unaryexpr -> DEC unaryexpr .)
    GE              reduce using rule 56 (unaryexpr -> DEC unaryexpr .)
    LEQ             reduce using rule 56 (unaryexpr -> DEC unaryexpr .)
    GEQ             reduce using rule 56 (unaryexpr -> DEC unaryexpr .)
    EQ              reduce using rule 56 (unaryexpr -> DEC unaryexpr .)
    NE              reduce using rule 56 (unaryexpr -> DEC unaryexpr .)
    AND             reduce using rule 56 (unaryexpr -> DEC unaryexpr .)
    XOR             reduce using rule 56 (unaryexpr -> DEC unaryexpr .)
    OR              reduce using rule 56 (unaryexpr -> DEC unaryexpr .)
    LAND            reduce using rule 56 (unaryexpr -> DEC unaryexpr .)
    LOR             reduce using rule 56 (unaryexpr -> DEC unaryexpr .)
    SEMICOL         reduce using rule 56 (unaryexpr -> DEC unaryexpr .)
    COMMA           reduce using rule 56 (unaryexpr -> DEC unaryexpr .)
    RPAREN          reduce using rule 56 (unaryexpr -> DEC unaryexpr .)
    RBRACK          reduce using rule 56 (unaryexpr -> DEC unaryexpr .)
    ASSIGN          reduce using rule 56 (unaryexpr -> DEC unaryexpr .)
    PLUS_ASSIGN     reduce using rule 56 (unaryexpr -> DEC unaryexpr .)
    MINUS_ASSIGN    reduce using rule 56 (unaryexpr -> DEC unaryexpr .)
    TIMES_ASSIGN    reduce using rule 56 (unaryexpr -> DEC unaryexpr .)
    DIVIDE_ASSIGN   reduce using rule 56 (unaryexpr -> DEC unaryexpr .)
    MOD_ASSIGN      reduce using rule 56 (unaryexpr -> DEC unaryexpr .)
    AND_ASSIGN      reduce using rule 56 (unaryexpr -> DEC unaryexpr .)
    OR_ASSIGN       reduce using rule 56 (unaryexpr -> DEC unaryexpr .)
    XOR_ASSIGN      reduce using rule 56 (unaryexpr -> DEC unaryexpr .)
    LSHIFT_ASSIGN   reduce using rule 56 (unaryexpr -> DEC unaryexpr .)
    RSHIFT_ASSIGN   reduce using rule 56 (unaryexpr -> DEC unaryexpr .)


state 101

    (78) eqexpr -> eqexpr NE . relexpr
    (71) relexpr -> . shiftexpr
    (72) relexpr -> . relexpr LE shiftexpr
    (73) relexpr -> . relexpr GE shiftexpr
    (74) relexpr -> . relexpr LEQ shiftexpr
    (75) relexpr -> . relexpr GEQ shiftexpr
    (68) shiftexpr -> . addexpr
    (69) shiftexpr -> . shiftexpr LSHIFT addexpr
    (70) shiftexpr -> . shiftexpr RSHIFT addexpr
    (65) addexpr -> . multexpr
    (66) addexpr -> . addexpr PLUS multexpr
    (67) addexpr -> . addexpr MINUS multexpr
    (61) multexpr -> . unaryexpr
    (62) multexpr -> . multexpr TIMES unaryexpr
    (63) multexpr -> . multexpr DIVIDE unaryexpr
    (64) multexpr -> . multexpr MOD unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL

    AND             shift and go to state 58
    TIMES           shift and go to state 74
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57

    shiftexpr                      shift and go to state 31
    unaryexpr                      shift and go to state 39
    relexpr                        shift and go to state 134
    const                          shift and go to state 45
    addexpr                        shift and go to state 44
    priexpr                        shift and go to state 51
    postexpr                       shift and go to state 72
    multexpr                       shift and go to state 54

state 102

    (77) eqexpr -> eqexpr EQ . relexpr
    (71) relexpr -> . shiftexpr
    (72) relexpr -> . relexpr LE shiftexpr
    (73) relexpr -> . relexpr GE shiftexpr
    (74) relexpr -> . relexpr LEQ shiftexpr
    (75) relexpr -> . relexpr GEQ shiftexpr
    (68) shiftexpr -> . addexpr
    (69) shiftexpr -> . shiftexpr LSHIFT addexpr
    (70) shiftexpr -> . shiftexpr RSHIFT addexpr
    (65) addexpr -> . multexpr
    (66) addexpr -> . addexpr PLUS multexpr
    (67) addexpr -> . addexpr MINUS multexpr
    (61) multexpr -> . unaryexpr
    (62) multexpr -> . multexpr TIMES unaryexpr
    (63) multexpr -> . multexpr DIVIDE unaryexpr
    (64) multexpr -> . multexpr MOD unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL

    AND             shift and go to state 58
    TIMES           shift and go to state 74
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57

    shiftexpr                      shift and go to state 31
    unaryexpr                      shift and go to state 39
    relexpr                        shift and go to state 135
    const                          shift and go to state 45
    addexpr                        shift and go to state 44
    priexpr                        shift and go to state 51
    postexpr                       shift and go to state 72
    multexpr                       shift and go to state 54

state 103

    (63) multexpr -> multexpr DIVIDE . unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL

    AND             shift and go to state 58
    TIMES           shift and go to state 74
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57

    unaryexpr                      shift and go to state 136
    priexpr                        shift and go to state 51
    const                          shift and go to state 45
    postexpr                       shift and go to state 72

state 104

    (64) multexpr -> multexpr MOD . unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL

    AND             shift and go to state 58
    TIMES           shift and go to state 74
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57

    unaryexpr                      shift and go to state 137
    priexpr                        shift and go to state 51
    const                          shift and go to state 45
    postexpr                       shift and go to state 72

state 105

    (62) multexpr -> multexpr TIMES . unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL

    AND             shift and go to state 58
    TIMES           shift and go to state 74
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57

    unaryexpr                      shift and go to state 138
    priexpr                        shift and go to state 51
    const                          shift and go to state 45
    postexpr                       shift and go to state 72

state 106

    (58) unaryexpr -> MINUS unaryexpr .

    TIMES           reduce using rule 58 (unaryexpr -> MINUS unaryexpr .)
    DIVIDE          reduce using rule 58 (unaryexpr -> MINUS unaryexpr .)
    MOD             reduce using rule 58 (unaryexpr -> MINUS unaryexpr .)
    PLUS            reduce using rule 58 (unaryexpr -> MINUS unaryexpr .)
    MINUS           reduce using rule 58 (unaryexpr -> MINUS unaryexpr .)
    LSHIFT          reduce using rule 58 (unaryexpr -> MINUS unaryexpr .)
    RSHIFT          reduce using rule 58 (unaryexpr -> MINUS unaryexpr .)
    LE              reduce using rule 58 (unaryexpr -> MINUS unaryexpr .)
    GE              reduce using rule 58 (unaryexpr -> MINUS unaryexpr .)
    LEQ             reduce using rule 58 (unaryexpr -> MINUS unaryexpr .)
    GEQ             reduce using rule 58 (unaryexpr -> MINUS unaryexpr .)
    EQ              reduce using rule 58 (unaryexpr -> MINUS unaryexpr .)
    NE              reduce using rule 58 (unaryexpr -> MINUS unaryexpr .)
    AND             reduce using rule 58 (unaryexpr -> MINUS unaryexpr .)
    XOR             reduce using rule 58 (unaryexpr -> MINUS unaryexpr .)
    OR              reduce using rule 58 (unaryexpr -> MINUS unaryexpr .)
    LAND            reduce using rule 58 (unaryexpr -> MINUS unaryexpr .)
    LOR             reduce using rule 58 (unaryexpr -> MINUS unaryexpr .)
    SEMICOL         reduce using rule 58 (unaryexpr -> MINUS unaryexpr .)
    COMMA           reduce using rule 58 (unaryexpr -> MINUS unaryexpr .)
    RPAREN          reduce using rule 58 (unaryexpr -> MINUS unaryexpr .)
    RBRACK          reduce using rule 58 (unaryexpr -> MINUS unaryexpr .)
    ASSIGN          reduce using rule 58 (unaryexpr -> MINUS unaryexpr .)
    PLUS_ASSIGN     reduce using rule 58 (unaryexpr -> MINUS unaryexpr .)
    MINUS_ASSIGN    reduce using rule 58 (unaryexpr -> MINUS unaryexpr .)
    TIMES_ASSIGN    reduce using rule 58 (unaryexpr -> MINUS unaryexpr .)
    DIVIDE_ASSIGN   reduce using rule 58 (unaryexpr -> MINUS unaryexpr .)
    MOD_ASSIGN      reduce using rule 58 (unaryexpr -> MINUS unaryexpr .)
    AND_ASSIGN      reduce using rule 58 (unaryexpr -> MINUS unaryexpr .)
    OR_ASSIGN       reduce using rule 58 (unaryexpr -> MINUS unaryexpr .)
    XOR_ASSIGN      reduce using rule 58 (unaryexpr -> MINUS unaryexpr .)
    LSHIFT_ASSIGN   reduce using rule 58 (unaryexpr -> MINUS unaryexpr .)
    RSHIFT_ASSIGN   reduce using rule 58 (unaryexpr -> MINUS unaryexpr .)


state 107

    (88) lorexpr -> lorexpr LOR . landexpr
    (85) landexpr -> . orexpr
    (86) landexpr -> . landexpr LAND orexpr
    (83) orexpr -> . xorexpr
    (84) orexpr -> . orexpr OR xorexpr
    (81) xorexpr -> . andexpr
    (82) xorexpr -> . xorexpr XOR andexpr
    (79) andexpr -> . eqexpr
    (80) andexpr -> . andexpr AND eqexpr
    (76) eqexpr -> . relexpr
    (77) eqexpr -> . eqexpr EQ relexpr
    (78) eqexpr -> . eqexpr NE relexpr
    (71) relexpr -> . shiftexpr
    (72) relexpr -> . relexpr LE shiftexpr
    (73) relexpr -> . relexpr GE shiftexpr
    (74) relexpr -> . relexpr LEQ shiftexpr
    (75) relexpr -> . relexpr GEQ shiftexpr
    (68) shiftexpr -> . addexpr
    (69) shiftexpr -> . shiftexpr LSHIFT addexpr
    (70) shiftexpr -> . shiftexpr RSHIFT addexpr
    (65) addexpr -> . multexpr
    (66) addexpr -> . addexpr PLUS multexpr
    (67) addexpr -> . addexpr MINUS multexpr
    (61) multexpr -> . unaryexpr
    (62) multexpr -> . multexpr TIMES unaryexpr
    (63) multexpr -> . multexpr DIVIDE unaryexpr
    (64) multexpr -> . multexpr MOD unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL

    AND             shift and go to state 58
    TIMES           shift and go to state 74
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57

    shiftexpr                      shift and go to state 31
    xorexpr                        shift and go to state 38
    unaryexpr                      shift and go to state 39
    relexpr                        shift and go to state 59
    addexpr                        shift and go to state 44
    landexpr                       shift and go to state 139
    priexpr                        shift and go to state 51
    multexpr                       shift and go to state 54
    andexpr                        shift and go to state 36
    const                          shift and go to state 45
    orexpr                         shift and go to state 33
    eqexpr                         shift and go to state 50
    postexpr                       shift and go to state 72

state 108

    (53) unaryexpr -> AND unaryexpr .

    TIMES           reduce using rule 53 (unaryexpr -> AND unaryexpr .)
    DIVIDE          reduce using rule 53 (unaryexpr -> AND unaryexpr .)
    MOD             reduce using rule 53 (unaryexpr -> AND unaryexpr .)
    PLUS            reduce using rule 53 (unaryexpr -> AND unaryexpr .)
    MINUS           reduce using rule 53 (unaryexpr -> AND unaryexpr .)
    LSHIFT          reduce using rule 53 (unaryexpr -> AND unaryexpr .)
    RSHIFT          reduce using rule 53 (unaryexpr -> AND unaryexpr .)
    LE              reduce using rule 53 (unaryexpr -> AND unaryexpr .)
    GE              reduce using rule 53 (unaryexpr -> AND unaryexpr .)
    LEQ             reduce using rule 53 (unaryexpr -> AND unaryexpr .)
    GEQ             reduce using rule 53 (unaryexpr -> AND unaryexpr .)
    EQ              reduce using rule 53 (unaryexpr -> AND unaryexpr .)
    NE              reduce using rule 53 (unaryexpr -> AND unaryexpr .)
    AND             reduce using rule 53 (unaryexpr -> AND unaryexpr .)
    XOR             reduce using rule 53 (unaryexpr -> AND unaryexpr .)
    OR              reduce using rule 53 (unaryexpr -> AND unaryexpr .)
    LAND            reduce using rule 53 (unaryexpr -> AND unaryexpr .)
    LOR             reduce using rule 53 (unaryexpr -> AND unaryexpr .)
    SEMICOL         reduce using rule 53 (unaryexpr -> AND unaryexpr .)
    COMMA           reduce using rule 53 (unaryexpr -> AND unaryexpr .)
    RPAREN          reduce using rule 53 (unaryexpr -> AND unaryexpr .)
    RBRACK          reduce using rule 53 (unaryexpr -> AND unaryexpr .)
    ASSIGN          reduce using rule 53 (unaryexpr -> AND unaryexpr .)
    PLUS_ASSIGN     reduce using rule 53 (unaryexpr -> AND unaryexpr .)
    MINUS_ASSIGN    reduce using rule 53 (unaryexpr -> AND unaryexpr .)
    TIMES_ASSIGN    reduce using rule 53 (unaryexpr -> AND unaryexpr .)
    DIVIDE_ASSIGN   reduce using rule 53 (unaryexpr -> AND unaryexpr .)
    MOD_ASSIGN      reduce using rule 53 (unaryexpr -> AND unaryexpr .)
    AND_ASSIGN      reduce using rule 53 (unaryexpr -> AND unaryexpr .)
    OR_ASSIGN       reduce using rule 53 (unaryexpr -> AND unaryexpr .)
    XOR_ASSIGN      reduce using rule 53 (unaryexpr -> AND unaryexpr .)
    LSHIFT_ASSIGN   reduce using rule 53 (unaryexpr -> AND unaryexpr .)
    RSHIFT_ASSIGN   reduce using rule 53 (unaryexpr -> AND unaryexpr .)


state 109

    (75) relexpr -> relexpr GEQ . shiftexpr
    (68) shiftexpr -> . addexpr
    (69) shiftexpr -> . shiftexpr LSHIFT addexpr
    (70) shiftexpr -> . shiftexpr RSHIFT addexpr
    (65) addexpr -> . multexpr
    (66) addexpr -> . addexpr PLUS multexpr
    (67) addexpr -> . addexpr MINUS multexpr
    (61) multexpr -> . unaryexpr
    (62) multexpr -> . multexpr TIMES unaryexpr
    (63) multexpr -> . multexpr DIVIDE unaryexpr
    (64) multexpr -> . multexpr MOD unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL

    AND             shift and go to state 58
    TIMES           shift and go to state 74
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57

    shiftexpr                      shift and go to state 140
    unaryexpr                      shift and go to state 39
    const                          shift and go to state 45
    addexpr                        shift and go to state 44
    priexpr                        shift and go to state 51
    postexpr                       shift and go to state 72
    multexpr                       shift and go to state 54

state 110

    (72) relexpr -> relexpr LE . shiftexpr
    (68) shiftexpr -> . addexpr
    (69) shiftexpr -> . shiftexpr LSHIFT addexpr
    (70) shiftexpr -> . shiftexpr RSHIFT addexpr
    (65) addexpr -> . multexpr
    (66) addexpr -> . addexpr PLUS multexpr
    (67) addexpr -> . addexpr MINUS multexpr
    (61) multexpr -> . unaryexpr
    (62) multexpr -> . multexpr TIMES unaryexpr
    (63) multexpr -> . multexpr DIVIDE unaryexpr
    (64) multexpr -> . multexpr MOD unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL

    AND             shift and go to state 58
    TIMES           shift and go to state 74
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57

    shiftexpr                      shift and go to state 141
    unaryexpr                      shift and go to state 39
    const                          shift and go to state 45
    addexpr                        shift and go to state 44
    priexpr                        shift and go to state 51
    postexpr                       shift and go to state 72
    multexpr                       shift and go to state 54

state 111

    (73) relexpr -> relexpr GE . shiftexpr
    (68) shiftexpr -> . addexpr
    (69) shiftexpr -> . shiftexpr LSHIFT addexpr
    (70) shiftexpr -> . shiftexpr RSHIFT addexpr
    (65) addexpr -> . multexpr
    (66) addexpr -> . addexpr PLUS multexpr
    (67) addexpr -> . addexpr MINUS multexpr
    (61) multexpr -> . unaryexpr
    (62) multexpr -> . multexpr TIMES unaryexpr
    (63) multexpr -> . multexpr DIVIDE unaryexpr
    (64) multexpr -> . multexpr MOD unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL

    AND             shift and go to state 58
    TIMES           shift and go to state 74
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57

    shiftexpr                      shift and go to state 142
    unaryexpr                      shift and go to state 39
    const                          shift and go to state 45
    addexpr                        shift and go to state 44
    priexpr                        shift and go to state 51
    postexpr                       shift and go to state 72
    multexpr                       shift and go to state 54

state 112

    (74) relexpr -> relexpr LEQ . shiftexpr
    (68) shiftexpr -> . addexpr
    (69) shiftexpr -> . shiftexpr LSHIFT addexpr
    (70) shiftexpr -> . shiftexpr RSHIFT addexpr
    (65) addexpr -> . multexpr
    (66) addexpr -> . addexpr PLUS multexpr
    (67) addexpr -> . addexpr MINUS multexpr
    (61) multexpr -> . unaryexpr
    (62) multexpr -> . multexpr TIMES unaryexpr
    (63) multexpr -> . multexpr DIVIDE unaryexpr
    (64) multexpr -> . multexpr MOD unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL

    AND             shift and go to state 58
    TIMES           shift and go to state 74
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57

    shiftexpr                      shift and go to state 143
    unaryexpr                      shift and go to state 39
    const                          shift and go to state 45
    addexpr                        shift and go to state 44
    priexpr                        shift and go to state 51
    postexpr                       shift and go to state 72
    multexpr                       shift and go to state 54

state 113

    (13) array -> LBRACK IVAL RBRACK .

    COMMA           reduce using rule 13 (array -> LBRACK IVAL RBRACK .)
    RPAREN          reduce using rule 13 (array -> LBRACK IVAL RBRACK .)
    SEMICOL         reduce using rule 13 (array -> LBRACK IVAL RBRACK .)


state 114

    (19) args -> arg COMMA args .

    RPAREN          reduce using rule 19 (args -> arg COMMA args .)


state 115

    (20) arg -> type id_adv array .

    COMMA           reduce using rule 20 (arg -> type id_adv array .)
    RPAREN          reduce using rule 20 (arg -> type id_adv array .)


state 116

    (14) deff -> type id_adv LPAREN s_args RPAREN LBRACE . body RBRACE
    (21) body -> . pre_defv_many pre_stmt_many
    (22) pre_defv_many -> . empty
    (23) pre_defv_many -> . defv_many
    (114) empty -> .
    (24) defv_many -> . defv
    (25) defv_many -> . defv defv_many
    (5) defv -> . type defv_multi SEMICOL
    (106) type -> . INT
    (107) type -> . FLOAT
    (108) type -> . CHAR
    (109) type -> . VOID

    SEMICOL         reduce using rule 114 (empty -> .)
    LBRACE          reduce using rule 114 (empty -> .)
    WHILE           reduce using rule 114 (empty -> .)
    FOR             reduce using rule 114 (empty -> .)
    IF              reduce using rule 114 (empty -> .)
    CONTINUE        reduce using rule 114 (empty -> .)
    BREAK           reduce using rule 114 (empty -> .)
    RETURN          reduce using rule 114 (empty -> .)
    TIMES           reduce using rule 114 (empty -> .)
    ID              reduce using rule 114 (empty -> .)
    LPAREN          reduce using rule 114 (empty -> .)
    IVAL            reduce using rule 114 (empty -> .)
    FVAL            reduce using rule 114 (empty -> .)
    SVAL            reduce using rule 114 (empty -> .)
    CVAL            reduce using rule 114 (empty -> .)
    AND             reduce using rule 114 (empty -> .)
    INC             reduce using rule 114 (empty -> .)
    DEC             reduce using rule 114 (empty -> .)
    PLUS            reduce using rule 114 (empty -> .)
    MINUS           reduce using rule 114 (empty -> .)
    NOT             reduce using rule 114 (empty -> .)
    LNOT            reduce using rule 114 (empty -> .)
    RBRACE          reduce using rule 114 (empty -> .)
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 1
    VOID            shift and go to state 3

    defv                           shift and go to state 144
    pre_defv_many                  shift and go to state 145
    type                           shift and go to state 146
    defv_many                      shift and go to state 148
    body                           shift and go to state 149
    empty                          shift and go to state 147

state 117

    (69) shiftexpr -> shiftexpr LSHIFT addexpr .
    (66) addexpr -> addexpr . PLUS multexpr
    (67) addexpr -> addexpr . MINUS multexpr

    LSHIFT          reduce using rule 69 (shiftexpr -> shiftexpr LSHIFT addexpr .)
    RSHIFT          reduce using rule 69 (shiftexpr -> shiftexpr LSHIFT addexpr .)
    LE              reduce using rule 69 (shiftexpr -> shiftexpr LSHIFT addexpr .)
    GE              reduce using rule 69 (shiftexpr -> shiftexpr LSHIFT addexpr .)
    LEQ             reduce using rule 69 (shiftexpr -> shiftexpr LSHIFT addexpr .)
    GEQ             reduce using rule 69 (shiftexpr -> shiftexpr LSHIFT addexpr .)
    EQ              reduce using rule 69 (shiftexpr -> shiftexpr LSHIFT addexpr .)
    NE              reduce using rule 69 (shiftexpr -> shiftexpr LSHIFT addexpr .)
    AND             reduce using rule 69 (shiftexpr -> shiftexpr LSHIFT addexpr .)
    XOR             reduce using rule 69 (shiftexpr -> shiftexpr LSHIFT addexpr .)
    OR              reduce using rule 69 (shiftexpr -> shiftexpr LSHIFT addexpr .)
    LAND            reduce using rule 69 (shiftexpr -> shiftexpr LSHIFT addexpr .)
    LOR             reduce using rule 69 (shiftexpr -> shiftexpr LSHIFT addexpr .)
    RBRACK          reduce using rule 69 (shiftexpr -> shiftexpr LSHIFT addexpr .)
    COMMA           reduce using rule 69 (shiftexpr -> shiftexpr LSHIFT addexpr .)
    RPAREN          reduce using rule 69 (shiftexpr -> shiftexpr LSHIFT addexpr .)
    SEMICOL         reduce using rule 69 (shiftexpr -> shiftexpr LSHIFT addexpr .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 80


state 118

    (70) shiftexpr -> shiftexpr RSHIFT addexpr .
    (66) addexpr -> addexpr . PLUS multexpr
    (67) addexpr -> addexpr . MINUS multexpr

    LSHIFT          reduce using rule 70 (shiftexpr -> shiftexpr RSHIFT addexpr .)
    RSHIFT          reduce using rule 70 (shiftexpr -> shiftexpr RSHIFT addexpr .)
    LE              reduce using rule 70 (shiftexpr -> shiftexpr RSHIFT addexpr .)
    GE              reduce using rule 70 (shiftexpr -> shiftexpr RSHIFT addexpr .)
    LEQ             reduce using rule 70 (shiftexpr -> shiftexpr RSHIFT addexpr .)
    GEQ             reduce using rule 70 (shiftexpr -> shiftexpr RSHIFT addexpr .)
    EQ              reduce using rule 70 (shiftexpr -> shiftexpr RSHIFT addexpr .)
    NE              reduce using rule 70 (shiftexpr -> shiftexpr RSHIFT addexpr .)
    AND             reduce using rule 70 (shiftexpr -> shiftexpr RSHIFT addexpr .)
    XOR             reduce using rule 70 (shiftexpr -> shiftexpr RSHIFT addexpr .)
    OR              reduce using rule 70 (shiftexpr -> shiftexpr RSHIFT addexpr .)
    LAND            reduce using rule 70 (shiftexpr -> shiftexpr RSHIFT addexpr .)
    LOR             reduce using rule 70 (shiftexpr -> shiftexpr RSHIFT addexpr .)
    RBRACK          reduce using rule 70 (shiftexpr -> shiftexpr RSHIFT addexpr .)
    COMMA           reduce using rule 70 (shiftexpr -> shiftexpr RSHIFT addexpr .)
    RPAREN          reduce using rule 70 (shiftexpr -> shiftexpr RSHIFT addexpr .)
    SEMICOL         reduce using rule 70 (shiftexpr -> shiftexpr RSHIFT addexpr .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 80


state 119

    (104) expr_many -> expr_many COMMA . expr
    (89) expr -> . lorexpr
    (90) expr -> . postexpr assign_op expr
    (91) expr -> . TIMES unaryexpr assign_op expr
    (87) lorexpr -> . landexpr
    (88) lorexpr -> . lorexpr LOR landexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (85) landexpr -> . orexpr
    (86) landexpr -> . landexpr LAND orexpr
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (83) orexpr -> . xorexpr
    (84) orexpr -> . orexpr OR xorexpr
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL
    (81) xorexpr -> . andexpr
    (82) xorexpr -> . xorexpr XOR andexpr
    (79) andexpr -> . eqexpr
    (80) andexpr -> . andexpr AND eqexpr
    (76) eqexpr -> . relexpr
    (77) eqexpr -> . eqexpr EQ relexpr
    (78) eqexpr -> . eqexpr NE relexpr
    (71) relexpr -> . shiftexpr
    (72) relexpr -> . relexpr LE shiftexpr
    (73) relexpr -> . relexpr GE shiftexpr
    (74) relexpr -> . relexpr LEQ shiftexpr
    (75) relexpr -> . relexpr GEQ shiftexpr
    (68) shiftexpr -> . addexpr
    (69) shiftexpr -> . shiftexpr LSHIFT addexpr
    (70) shiftexpr -> . shiftexpr RSHIFT addexpr
    (65) addexpr -> . multexpr
    (66) addexpr -> . addexpr PLUS multexpr
    (67) addexpr -> . addexpr MINUS multexpr
    (61) multexpr -> . unaryexpr
    (62) multexpr -> . multexpr TIMES unaryexpr
    (63) multexpr -> . multexpr DIVIDE unaryexpr
    (64) multexpr -> . multexpr MOD unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr

    TIMES           shift and go to state 37
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57
    AND             shift and go to state 58
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34

    shiftexpr                      shift and go to state 31
    xorexpr                        shift and go to state 38
    unaryexpr                      shift and go to state 39
    priexpr                        shift and go to state 51
    lorexpr                        shift and go to state 56
    addexpr                        shift and go to state 44
    landexpr                       shift and go to state 41
    orexpr                         shift and go to state 33
    multexpr                       shift and go to state 54
    postexpr                       shift and go to state 48
    relexpr                        shift and go to state 59
    expr                           shift and go to state 150
    andexpr                        shift and go to state 36
    const                          shift and go to state 45
    eqexpr                         shift and go to state 50

state 120

    (43) priexpr -> LPAREN expr_many RPAREN .

    LBRACK          reduce using rule 43 (priexpr -> LPAREN expr_many RPAREN .)
    LPAREN          reduce using rule 43 (priexpr -> LPAREN expr_many RPAREN .)
    INC             reduce using rule 43 (priexpr -> LPAREN expr_many RPAREN .)
    DEC             reduce using rule 43 (priexpr -> LPAREN expr_many RPAREN .)
    TIMES           reduce using rule 43 (priexpr -> LPAREN expr_many RPAREN .)
    DIVIDE          reduce using rule 43 (priexpr -> LPAREN expr_many RPAREN .)
    MOD             reduce using rule 43 (priexpr -> LPAREN expr_many RPAREN .)
    PLUS            reduce using rule 43 (priexpr -> LPAREN expr_many RPAREN .)
    MINUS           reduce using rule 43 (priexpr -> LPAREN expr_many RPAREN .)
    LSHIFT          reduce using rule 43 (priexpr -> LPAREN expr_many RPAREN .)
    RSHIFT          reduce using rule 43 (priexpr -> LPAREN expr_many RPAREN .)
    LE              reduce using rule 43 (priexpr -> LPAREN expr_many RPAREN .)
    GE              reduce using rule 43 (priexpr -> LPAREN expr_many RPAREN .)
    LEQ             reduce using rule 43 (priexpr -> LPAREN expr_many RPAREN .)
    GEQ             reduce using rule 43 (priexpr -> LPAREN expr_many RPAREN .)
    EQ              reduce using rule 43 (priexpr -> LPAREN expr_many RPAREN .)
    NE              reduce using rule 43 (priexpr -> LPAREN expr_many RPAREN .)
    AND             reduce using rule 43 (priexpr -> LPAREN expr_many RPAREN .)
    XOR             reduce using rule 43 (priexpr -> LPAREN expr_many RPAREN .)
    OR              reduce using rule 43 (priexpr -> LPAREN expr_many RPAREN .)
    LAND            reduce using rule 43 (priexpr -> LPAREN expr_many RPAREN .)
    LOR             reduce using rule 43 (priexpr -> LPAREN expr_many RPAREN .)
    COMMA           reduce using rule 43 (priexpr -> LPAREN expr_many RPAREN .)
    SEMICOL         reduce using rule 43 (priexpr -> LPAREN expr_many RPAREN .)
    RPAREN          reduce using rule 43 (priexpr -> LPAREN expr_many RPAREN .)
    ASSIGN          reduce using rule 43 (priexpr -> LPAREN expr_many RPAREN .)
    PLUS_ASSIGN     reduce using rule 43 (priexpr -> LPAREN expr_many RPAREN .)
    MINUS_ASSIGN    reduce using rule 43 (priexpr -> LPAREN expr_many RPAREN .)
    TIMES_ASSIGN    reduce using rule 43 (priexpr -> LPAREN expr_many RPAREN .)
    DIVIDE_ASSIGN   reduce using rule 43 (priexpr -> LPAREN expr_many RPAREN .)
    MOD_ASSIGN      reduce using rule 43 (priexpr -> LPAREN expr_many RPAREN .)
    AND_ASSIGN      reduce using rule 43 (priexpr -> LPAREN expr_many RPAREN .)
    OR_ASSIGN       reduce using rule 43 (priexpr -> LPAREN expr_many RPAREN .)
    XOR_ASSIGN      reduce using rule 43 (priexpr -> LPAREN expr_many RPAREN .)
    LSHIFT_ASSIGN   reduce using rule 43 (priexpr -> LPAREN expr_many RPAREN .)
    RSHIFT_ASSIGN   reduce using rule 43 (priexpr -> LPAREN expr_many RPAREN .)
    RBRACK          reduce using rule 43 (priexpr -> LPAREN expr_many RPAREN .)


state 121

    (84) orexpr -> orexpr OR xorexpr .
    (82) xorexpr -> xorexpr . XOR andexpr

    OR              reduce using rule 84 (orexpr -> orexpr OR xorexpr .)
    LAND            reduce using rule 84 (orexpr -> orexpr OR xorexpr .)
    LOR             reduce using rule 84 (orexpr -> orexpr OR xorexpr .)
    RPAREN          reduce using rule 84 (orexpr -> orexpr OR xorexpr .)
    COMMA           reduce using rule 84 (orexpr -> orexpr OR xorexpr .)
    SEMICOL         reduce using rule 84 (orexpr -> orexpr OR xorexpr .)
    RBRACK          reduce using rule 84 (orexpr -> orexpr OR xorexpr .)
    XOR             shift and go to state 78


state 122

    (54) unaryexpr -> TIMES unaryexpr .

    TIMES           reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    DIVIDE          reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    MOD             reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    PLUS            reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    MINUS           reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    LSHIFT          reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    RSHIFT          reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    LE              reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    GE              reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    LEQ             reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    GEQ             reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    EQ              reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    NE              reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    AND             reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    XOR             reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    OR              reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    LAND            reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    LOR             reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    COMMA           reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    SEMICOL         reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    RPAREN          reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    RBRACK          reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    ASSIGN          reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    PLUS_ASSIGN     reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    MINUS_ASSIGN    reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    TIMES_ASSIGN    reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    DIVIDE_ASSIGN   reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    MOD_ASSIGN      reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    AND_ASSIGN      reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    OR_ASSIGN       reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    XOR_ASSIGN      reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    LSHIFT_ASSIGN   reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)
    RSHIFT_ASSIGN   reduce using rule 54 (unaryexpr -> TIMES unaryexpr .)


state 123

    (80) andexpr -> andexpr AND eqexpr .
    (77) eqexpr -> eqexpr . EQ relexpr
    (78) eqexpr -> eqexpr . NE relexpr

    AND             reduce using rule 80 (andexpr -> andexpr AND eqexpr .)
    XOR             reduce using rule 80 (andexpr -> andexpr AND eqexpr .)
    OR              reduce using rule 80 (andexpr -> andexpr AND eqexpr .)
    LAND            reduce using rule 80 (andexpr -> andexpr AND eqexpr .)
    LOR             reduce using rule 80 (andexpr -> andexpr AND eqexpr .)
    COMMA           reduce using rule 80 (andexpr -> andexpr AND eqexpr .)
    SEMICOL         reduce using rule 80 (andexpr -> andexpr AND eqexpr .)
    RPAREN          reduce using rule 80 (andexpr -> andexpr AND eqexpr .)
    RBRACK          reduce using rule 80 (andexpr -> andexpr AND eqexpr .)
    EQ              shift and go to state 102
    NE              shift and go to state 101


state 124

    (91) expr -> TIMES unaryexpr assign_op . expr
    (89) expr -> . lorexpr
    (90) expr -> . postexpr assign_op expr
    (91) expr -> . TIMES unaryexpr assign_op expr
    (87) lorexpr -> . landexpr
    (88) lorexpr -> . lorexpr LOR landexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (85) landexpr -> . orexpr
    (86) landexpr -> . landexpr LAND orexpr
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (83) orexpr -> . xorexpr
    (84) orexpr -> . orexpr OR xorexpr
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL
    (81) xorexpr -> . andexpr
    (82) xorexpr -> . xorexpr XOR andexpr
    (79) andexpr -> . eqexpr
    (80) andexpr -> . andexpr AND eqexpr
    (76) eqexpr -> . relexpr
    (77) eqexpr -> . eqexpr EQ relexpr
    (78) eqexpr -> . eqexpr NE relexpr
    (71) relexpr -> . shiftexpr
    (72) relexpr -> . relexpr LE shiftexpr
    (73) relexpr -> . relexpr GE shiftexpr
    (74) relexpr -> . relexpr LEQ shiftexpr
    (75) relexpr -> . relexpr GEQ shiftexpr
    (68) shiftexpr -> . addexpr
    (69) shiftexpr -> . shiftexpr LSHIFT addexpr
    (70) shiftexpr -> . shiftexpr RSHIFT addexpr
    (65) addexpr -> . multexpr
    (66) addexpr -> . addexpr PLUS multexpr
    (67) addexpr -> . addexpr MINUS multexpr
    (61) multexpr -> . unaryexpr
    (62) multexpr -> . multexpr TIMES unaryexpr
    (63) multexpr -> . multexpr DIVIDE unaryexpr
    (64) multexpr -> . multexpr MOD unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr

    TIMES           shift and go to state 37
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57
    AND             shift and go to state 58
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34

    shiftexpr                      shift and go to state 31
    xorexpr                        shift and go to state 38
    unaryexpr                      shift and go to state 39
    lorexpr                        shift and go to state 56
    addexpr                        shift and go to state 44
    landexpr                       shift and go to state 41
    orexpr                         shift and go to state 33
    multexpr                       shift and go to state 54
    priexpr                        shift and go to state 51
    relexpr                        shift and go to state 59
    expr                           shift and go to state 151
    andexpr                        shift and go to state 36
    const                          shift and go to state 45
    eqexpr                         shift and go to state 50
    postexpr                       shift and go to state 48

state 125

    (82) xorexpr -> xorexpr XOR andexpr .
    (80) andexpr -> andexpr . AND eqexpr

    XOR             reduce using rule 82 (xorexpr -> xorexpr XOR andexpr .)
    OR              reduce using rule 82 (xorexpr -> xorexpr XOR andexpr .)
    LAND            reduce using rule 82 (xorexpr -> xorexpr XOR andexpr .)
    LOR             reduce using rule 82 (xorexpr -> xorexpr XOR andexpr .)
    RPAREN          reduce using rule 82 (xorexpr -> xorexpr XOR andexpr .)
    COMMA           reduce using rule 82 (xorexpr -> xorexpr XOR andexpr .)
    RBRACK          reduce using rule 82 (xorexpr -> xorexpr XOR andexpr .)
    SEMICOL         reduce using rule 82 (xorexpr -> xorexpr XOR andexpr .)
    AND             shift and go to state 76


state 126

    (86) landexpr -> landexpr LAND orexpr .
    (84) orexpr -> orexpr . OR xorexpr

    LAND            reduce using rule 86 (landexpr -> landexpr LAND orexpr .)
    LOR             reduce using rule 86 (landexpr -> landexpr LAND orexpr .)
    RPAREN          reduce using rule 86 (landexpr -> landexpr LAND orexpr .)
    COMMA           reduce using rule 86 (landexpr -> landexpr LAND orexpr .)
    SEMICOL         reduce using rule 86 (landexpr -> landexpr LAND orexpr .)
    RBRACK          reduce using rule 86 (landexpr -> landexpr LAND orexpr .)
    OR              shift and go to state 71


state 127

    (67) addexpr -> addexpr MINUS multexpr .
    (62) multexpr -> multexpr . TIMES unaryexpr
    (63) multexpr -> multexpr . DIVIDE unaryexpr
    (64) multexpr -> multexpr . MOD unaryexpr

    PLUS            reduce using rule 67 (addexpr -> addexpr MINUS multexpr .)
    MINUS           reduce using rule 67 (addexpr -> addexpr MINUS multexpr .)
    LSHIFT          reduce using rule 67 (addexpr -> addexpr MINUS multexpr .)
    RSHIFT          reduce using rule 67 (addexpr -> addexpr MINUS multexpr .)
    LE              reduce using rule 67 (addexpr -> addexpr MINUS multexpr .)
    GE              reduce using rule 67 (addexpr -> addexpr MINUS multexpr .)
    LEQ             reduce using rule 67 (addexpr -> addexpr MINUS multexpr .)
    GEQ             reduce using rule 67 (addexpr -> addexpr MINUS multexpr .)
    EQ              reduce using rule 67 (addexpr -> addexpr MINUS multexpr .)
    NE              reduce using rule 67 (addexpr -> addexpr MINUS multexpr .)
    AND             reduce using rule 67 (addexpr -> addexpr MINUS multexpr .)
    XOR             reduce using rule 67 (addexpr -> addexpr MINUS multexpr .)
    OR              reduce using rule 67 (addexpr -> addexpr MINUS multexpr .)
    LAND            reduce using rule 67 (addexpr -> addexpr MINUS multexpr .)
    LOR             reduce using rule 67 (addexpr -> addexpr MINUS multexpr .)
    COMMA           reduce using rule 67 (addexpr -> addexpr MINUS multexpr .)
    SEMICOL         reduce using rule 67 (addexpr -> addexpr MINUS multexpr .)
    RPAREN          reduce using rule 67 (addexpr -> addexpr MINUS multexpr .)
    RBRACK          reduce using rule 67 (addexpr -> addexpr MINUS multexpr .)
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 103
    MOD             shift and go to state 104


state 128

    (66) addexpr -> addexpr PLUS multexpr .
    (62) multexpr -> multexpr . TIMES unaryexpr
    (63) multexpr -> multexpr . DIVIDE unaryexpr
    (64) multexpr -> multexpr . MOD unaryexpr

    PLUS            reduce using rule 66 (addexpr -> addexpr PLUS multexpr .)
    MINUS           reduce using rule 66 (addexpr -> addexpr PLUS multexpr .)
    LSHIFT          reduce using rule 66 (addexpr -> addexpr PLUS multexpr .)
    RSHIFT          reduce using rule 66 (addexpr -> addexpr PLUS multexpr .)
    LE              reduce using rule 66 (addexpr -> addexpr PLUS multexpr .)
    GE              reduce using rule 66 (addexpr -> addexpr PLUS multexpr .)
    LEQ             reduce using rule 66 (addexpr -> addexpr PLUS multexpr .)
    GEQ             reduce using rule 66 (addexpr -> addexpr PLUS multexpr .)
    EQ              reduce using rule 66 (addexpr -> addexpr PLUS multexpr .)
    NE              reduce using rule 66 (addexpr -> addexpr PLUS multexpr .)
    AND             reduce using rule 66 (addexpr -> addexpr PLUS multexpr .)
    XOR             reduce using rule 66 (addexpr -> addexpr PLUS multexpr .)
    OR              reduce using rule 66 (addexpr -> addexpr PLUS multexpr .)
    LAND            reduce using rule 66 (addexpr -> addexpr PLUS multexpr .)
    LOR             reduce using rule 66 (addexpr -> addexpr PLUS multexpr .)
    COMMA           reduce using rule 66 (addexpr -> addexpr PLUS multexpr .)
    SEMICOL         reduce using rule 66 (addexpr -> addexpr PLUS multexpr .)
    RPAREN          reduce using rule 66 (addexpr -> addexpr PLUS multexpr .)
    RBRACK          reduce using rule 66 (addexpr -> addexpr PLUS multexpr .)
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 103
    MOD             shift and go to state 104


state 129

    (47) postexpr -> postexpr LPAREN argexpr_list . RPAREN
    (51) argexpr_list -> argexpr_list . COMMA expr

    RPAREN          shift and go to state 153
    COMMA           shift and go to state 152


state 130

    (50) argexpr_list -> expr .

    RPAREN          reduce using rule 50 (argexpr_list -> expr .)
    COMMA           reduce using rule 50 (argexpr_list -> expr .)


state 131

    (46) postexpr -> postexpr LPAREN RPAREN .

    LBRACK          reduce using rule 46 (postexpr -> postexpr LPAREN RPAREN .)
    LPAREN          reduce using rule 46 (postexpr -> postexpr LPAREN RPAREN .)
    INC             reduce using rule 46 (postexpr -> postexpr LPAREN RPAREN .)
    DEC             reduce using rule 46 (postexpr -> postexpr LPAREN RPAREN .)
    TIMES           reduce using rule 46 (postexpr -> postexpr LPAREN RPAREN .)
    DIVIDE          reduce using rule 46 (postexpr -> postexpr LPAREN RPAREN .)
    MOD             reduce using rule 46 (postexpr -> postexpr LPAREN RPAREN .)
    PLUS            reduce using rule 46 (postexpr -> postexpr LPAREN RPAREN .)
    MINUS           reduce using rule 46 (postexpr -> postexpr LPAREN RPAREN .)
    LSHIFT          reduce using rule 46 (postexpr -> postexpr LPAREN RPAREN .)
    RSHIFT          reduce using rule 46 (postexpr -> postexpr LPAREN RPAREN .)
    LE              reduce using rule 46 (postexpr -> postexpr LPAREN RPAREN .)
    GE              reduce using rule 46 (postexpr -> postexpr LPAREN RPAREN .)
    LEQ             reduce using rule 46 (postexpr -> postexpr LPAREN RPAREN .)
    GEQ             reduce using rule 46 (postexpr -> postexpr LPAREN RPAREN .)
    EQ              reduce using rule 46 (postexpr -> postexpr LPAREN RPAREN .)
    NE              reduce using rule 46 (postexpr -> postexpr LPAREN RPAREN .)
    AND             reduce using rule 46 (postexpr -> postexpr LPAREN RPAREN .)
    XOR             reduce using rule 46 (postexpr -> postexpr LPAREN RPAREN .)
    OR              reduce using rule 46 (postexpr -> postexpr LPAREN RPAREN .)
    LAND            reduce using rule 46 (postexpr -> postexpr LPAREN RPAREN .)
    LOR             reduce using rule 46 (postexpr -> postexpr LPAREN RPAREN .)
    COMMA           reduce using rule 46 (postexpr -> postexpr LPAREN RPAREN .)
    SEMICOL         reduce using rule 46 (postexpr -> postexpr LPAREN RPAREN .)
    RPAREN          reduce using rule 46 (postexpr -> postexpr LPAREN RPAREN .)
    ASSIGN          reduce using rule 46 (postexpr -> postexpr LPAREN RPAREN .)
    PLUS_ASSIGN     reduce using rule 46 (postexpr -> postexpr LPAREN RPAREN .)
    MINUS_ASSIGN    reduce using rule 46 (postexpr -> postexpr LPAREN RPAREN .)
    TIMES_ASSIGN    reduce using rule 46 (postexpr -> postexpr LPAREN RPAREN .)
    DIVIDE_ASSIGN   reduce using rule 46 (postexpr -> postexpr LPAREN RPAREN .)
    MOD_ASSIGN      reduce using rule 46 (postexpr -> postexpr LPAREN RPAREN .)
    AND_ASSIGN      reduce using rule 46 (postexpr -> postexpr LPAREN RPAREN .)
    OR_ASSIGN       reduce using rule 46 (postexpr -> postexpr LPAREN RPAREN .)
    XOR_ASSIGN      reduce using rule 46 (postexpr -> postexpr LPAREN RPAREN .)
    LSHIFT_ASSIGN   reduce using rule 46 (postexpr -> postexpr LPAREN RPAREN .)
    RSHIFT_ASSIGN   reduce using rule 46 (postexpr -> postexpr LPAREN RPAREN .)
    RBRACK          reduce using rule 46 (postexpr -> postexpr LPAREN RPAREN .)


state 132

    (45) postexpr -> postexpr LBRACK expr_many . RBRACK
    (104) expr_many -> expr_many . COMMA expr

    RBRACK          shift and go to state 154
    COMMA           shift and go to state 119


state 133

    (90) expr -> postexpr assign_op expr .

    RPAREN          reduce using rule 90 (expr -> postexpr assign_op expr .)
    COMMA           reduce using rule 90 (expr -> postexpr assign_op expr .)
    SEMICOL         reduce using rule 90 (expr -> postexpr assign_op expr .)
    RBRACK          reduce using rule 90 (expr -> postexpr assign_op expr .)


state 134

    (78) eqexpr -> eqexpr NE relexpr .
    (72) relexpr -> relexpr . LE shiftexpr
    (73) relexpr -> relexpr . GE shiftexpr
    (74) relexpr -> relexpr . LEQ shiftexpr
    (75) relexpr -> relexpr . GEQ shiftexpr

    EQ              reduce using rule 78 (eqexpr -> eqexpr NE relexpr .)
    NE              reduce using rule 78 (eqexpr -> eqexpr NE relexpr .)
    AND             reduce using rule 78 (eqexpr -> eqexpr NE relexpr .)
    XOR             reduce using rule 78 (eqexpr -> eqexpr NE relexpr .)
    OR              reduce using rule 78 (eqexpr -> eqexpr NE relexpr .)
    LAND            reduce using rule 78 (eqexpr -> eqexpr NE relexpr .)
    LOR             reduce using rule 78 (eqexpr -> eqexpr NE relexpr .)
    COMMA           reduce using rule 78 (eqexpr -> eqexpr NE relexpr .)
    SEMICOL         reduce using rule 78 (eqexpr -> eqexpr NE relexpr .)
    RPAREN          reduce using rule 78 (eqexpr -> eqexpr NE relexpr .)
    RBRACK          reduce using rule 78 (eqexpr -> eqexpr NE relexpr .)
    LE              shift and go to state 110
    GE              shift and go to state 111
    LEQ             shift and go to state 112
    GEQ             shift and go to state 109


state 135

    (77) eqexpr -> eqexpr EQ relexpr .
    (72) relexpr -> relexpr . LE shiftexpr
    (73) relexpr -> relexpr . GE shiftexpr
    (74) relexpr -> relexpr . LEQ shiftexpr
    (75) relexpr -> relexpr . GEQ shiftexpr

    EQ              reduce using rule 77 (eqexpr -> eqexpr EQ relexpr .)
    NE              reduce using rule 77 (eqexpr -> eqexpr EQ relexpr .)
    AND             reduce using rule 77 (eqexpr -> eqexpr EQ relexpr .)
    XOR             reduce using rule 77 (eqexpr -> eqexpr EQ relexpr .)
    OR              reduce using rule 77 (eqexpr -> eqexpr EQ relexpr .)
    LAND            reduce using rule 77 (eqexpr -> eqexpr EQ relexpr .)
    LOR             reduce using rule 77 (eqexpr -> eqexpr EQ relexpr .)
    COMMA           reduce using rule 77 (eqexpr -> eqexpr EQ relexpr .)
    SEMICOL         reduce using rule 77 (eqexpr -> eqexpr EQ relexpr .)
    RPAREN          reduce using rule 77 (eqexpr -> eqexpr EQ relexpr .)
    RBRACK          reduce using rule 77 (eqexpr -> eqexpr EQ relexpr .)
    LE              shift and go to state 110
    GE              shift and go to state 111
    LEQ             shift and go to state 112
    GEQ             shift and go to state 109


state 136

    (63) multexpr -> multexpr DIVIDE unaryexpr .

    TIMES           reduce using rule 63 (multexpr -> multexpr DIVIDE unaryexpr .)
    DIVIDE          reduce using rule 63 (multexpr -> multexpr DIVIDE unaryexpr .)
    MOD             reduce using rule 63 (multexpr -> multexpr DIVIDE unaryexpr .)
    PLUS            reduce using rule 63 (multexpr -> multexpr DIVIDE unaryexpr .)
    MINUS           reduce using rule 63 (multexpr -> multexpr DIVIDE unaryexpr .)
    LSHIFT          reduce using rule 63 (multexpr -> multexpr DIVIDE unaryexpr .)
    RSHIFT          reduce using rule 63 (multexpr -> multexpr DIVIDE unaryexpr .)
    LE              reduce using rule 63 (multexpr -> multexpr DIVIDE unaryexpr .)
    GE              reduce using rule 63 (multexpr -> multexpr DIVIDE unaryexpr .)
    LEQ             reduce using rule 63 (multexpr -> multexpr DIVIDE unaryexpr .)
    GEQ             reduce using rule 63 (multexpr -> multexpr DIVIDE unaryexpr .)
    EQ              reduce using rule 63 (multexpr -> multexpr DIVIDE unaryexpr .)
    NE              reduce using rule 63 (multexpr -> multexpr DIVIDE unaryexpr .)
    AND             reduce using rule 63 (multexpr -> multexpr DIVIDE unaryexpr .)
    XOR             reduce using rule 63 (multexpr -> multexpr DIVIDE unaryexpr .)
    OR              reduce using rule 63 (multexpr -> multexpr DIVIDE unaryexpr .)
    LAND            reduce using rule 63 (multexpr -> multexpr DIVIDE unaryexpr .)
    LOR             reduce using rule 63 (multexpr -> multexpr DIVIDE unaryexpr .)
    SEMICOL         reduce using rule 63 (multexpr -> multexpr DIVIDE unaryexpr .)
    COMMA           reduce using rule 63 (multexpr -> multexpr DIVIDE unaryexpr .)
    RPAREN          reduce using rule 63 (multexpr -> multexpr DIVIDE unaryexpr .)
    RBRACK          reduce using rule 63 (multexpr -> multexpr DIVIDE unaryexpr .)


state 137

    (64) multexpr -> multexpr MOD unaryexpr .

    TIMES           reduce using rule 64 (multexpr -> multexpr MOD unaryexpr .)
    DIVIDE          reduce using rule 64 (multexpr -> multexpr MOD unaryexpr .)
    MOD             reduce using rule 64 (multexpr -> multexpr MOD unaryexpr .)
    PLUS            reduce using rule 64 (multexpr -> multexpr MOD unaryexpr .)
    MINUS           reduce using rule 64 (multexpr -> multexpr MOD unaryexpr .)
    LSHIFT          reduce using rule 64 (multexpr -> multexpr MOD unaryexpr .)
    RSHIFT          reduce using rule 64 (multexpr -> multexpr MOD unaryexpr .)
    LE              reduce using rule 64 (multexpr -> multexpr MOD unaryexpr .)
    GE              reduce using rule 64 (multexpr -> multexpr MOD unaryexpr .)
    LEQ             reduce using rule 64 (multexpr -> multexpr MOD unaryexpr .)
    GEQ             reduce using rule 64 (multexpr -> multexpr MOD unaryexpr .)
    EQ              reduce using rule 64 (multexpr -> multexpr MOD unaryexpr .)
    NE              reduce using rule 64 (multexpr -> multexpr MOD unaryexpr .)
    AND             reduce using rule 64 (multexpr -> multexpr MOD unaryexpr .)
    XOR             reduce using rule 64 (multexpr -> multexpr MOD unaryexpr .)
    OR              reduce using rule 64 (multexpr -> multexpr MOD unaryexpr .)
    LAND            reduce using rule 64 (multexpr -> multexpr MOD unaryexpr .)
    LOR             reduce using rule 64 (multexpr -> multexpr MOD unaryexpr .)
    SEMICOL         reduce using rule 64 (multexpr -> multexpr MOD unaryexpr .)
    COMMA           reduce using rule 64 (multexpr -> multexpr MOD unaryexpr .)
    RPAREN          reduce using rule 64 (multexpr -> multexpr MOD unaryexpr .)
    RBRACK          reduce using rule 64 (multexpr -> multexpr MOD unaryexpr .)


state 138

    (62) multexpr -> multexpr TIMES unaryexpr .

    TIMES           reduce using rule 62 (multexpr -> multexpr TIMES unaryexpr .)
    DIVIDE          reduce using rule 62 (multexpr -> multexpr TIMES unaryexpr .)
    MOD             reduce using rule 62 (multexpr -> multexpr TIMES unaryexpr .)
    PLUS            reduce using rule 62 (multexpr -> multexpr TIMES unaryexpr .)
    MINUS           reduce using rule 62 (multexpr -> multexpr TIMES unaryexpr .)
    LSHIFT          reduce using rule 62 (multexpr -> multexpr TIMES unaryexpr .)
    RSHIFT          reduce using rule 62 (multexpr -> multexpr TIMES unaryexpr .)
    LE              reduce using rule 62 (multexpr -> multexpr TIMES unaryexpr .)
    GE              reduce using rule 62 (multexpr -> multexpr TIMES unaryexpr .)
    LEQ             reduce using rule 62 (multexpr -> multexpr TIMES unaryexpr .)
    GEQ             reduce using rule 62 (multexpr -> multexpr TIMES unaryexpr .)
    EQ              reduce using rule 62 (multexpr -> multexpr TIMES unaryexpr .)
    NE              reduce using rule 62 (multexpr -> multexpr TIMES unaryexpr .)
    AND             reduce using rule 62 (multexpr -> multexpr TIMES unaryexpr .)
    XOR             reduce using rule 62 (multexpr -> multexpr TIMES unaryexpr .)
    OR              reduce using rule 62 (multexpr -> multexpr TIMES unaryexpr .)
    LAND            reduce using rule 62 (multexpr -> multexpr TIMES unaryexpr .)
    LOR             reduce using rule 62 (multexpr -> multexpr TIMES unaryexpr .)
    SEMICOL         reduce using rule 62 (multexpr -> multexpr TIMES unaryexpr .)
    COMMA           reduce using rule 62 (multexpr -> multexpr TIMES unaryexpr .)
    RPAREN          reduce using rule 62 (multexpr -> multexpr TIMES unaryexpr .)
    RBRACK          reduce using rule 62 (multexpr -> multexpr TIMES unaryexpr .)


state 139

    (88) lorexpr -> lorexpr LOR landexpr .
    (86) landexpr -> landexpr . LAND orexpr

    LOR             reduce using rule 88 (lorexpr -> lorexpr LOR landexpr .)
    SEMICOL         reduce using rule 88 (lorexpr -> lorexpr LOR landexpr .)
    COMMA           reduce using rule 88 (lorexpr -> lorexpr LOR landexpr .)
    RPAREN          reduce using rule 88 (lorexpr -> lorexpr LOR landexpr .)
    RBRACK          reduce using rule 88 (lorexpr -> lorexpr LOR landexpr .)
    LAND            shift and go to state 79


state 140

    (75) relexpr -> relexpr GEQ shiftexpr .
    (69) shiftexpr -> shiftexpr . LSHIFT addexpr
    (70) shiftexpr -> shiftexpr . RSHIFT addexpr

    LE              reduce using rule 75 (relexpr -> relexpr GEQ shiftexpr .)
    GE              reduce using rule 75 (relexpr -> relexpr GEQ shiftexpr .)
    LEQ             reduce using rule 75 (relexpr -> relexpr GEQ shiftexpr .)
    GEQ             reduce using rule 75 (relexpr -> relexpr GEQ shiftexpr .)
    EQ              reduce using rule 75 (relexpr -> relexpr GEQ shiftexpr .)
    NE              reduce using rule 75 (relexpr -> relexpr GEQ shiftexpr .)
    AND             reduce using rule 75 (relexpr -> relexpr GEQ shiftexpr .)
    XOR             reduce using rule 75 (relexpr -> relexpr GEQ shiftexpr .)
    OR              reduce using rule 75 (relexpr -> relexpr GEQ shiftexpr .)
    LAND            reduce using rule 75 (relexpr -> relexpr GEQ shiftexpr .)
    LOR             reduce using rule 75 (relexpr -> relexpr GEQ shiftexpr .)
    RBRACK          reduce using rule 75 (relexpr -> relexpr GEQ shiftexpr .)
    COMMA           reduce using rule 75 (relexpr -> relexpr GEQ shiftexpr .)
    SEMICOL         reduce using rule 75 (relexpr -> relexpr GEQ shiftexpr .)
    RPAREN          reduce using rule 75 (relexpr -> relexpr GEQ shiftexpr .)
    LSHIFT          shift and go to state 67
    RSHIFT          shift and go to state 68


state 141

    (72) relexpr -> relexpr LE shiftexpr .
    (69) shiftexpr -> shiftexpr . LSHIFT addexpr
    (70) shiftexpr -> shiftexpr . RSHIFT addexpr

    LE              reduce using rule 72 (relexpr -> relexpr LE shiftexpr .)
    GE              reduce using rule 72 (relexpr -> relexpr LE shiftexpr .)
    LEQ             reduce using rule 72 (relexpr -> relexpr LE shiftexpr .)
    GEQ             reduce using rule 72 (relexpr -> relexpr LE shiftexpr .)
    EQ              reduce using rule 72 (relexpr -> relexpr LE shiftexpr .)
    NE              reduce using rule 72 (relexpr -> relexpr LE shiftexpr .)
    AND             reduce using rule 72 (relexpr -> relexpr LE shiftexpr .)
    XOR             reduce using rule 72 (relexpr -> relexpr LE shiftexpr .)
    OR              reduce using rule 72 (relexpr -> relexpr LE shiftexpr .)
    LAND            reduce using rule 72 (relexpr -> relexpr LE shiftexpr .)
    LOR             reduce using rule 72 (relexpr -> relexpr LE shiftexpr .)
    RBRACK          reduce using rule 72 (relexpr -> relexpr LE shiftexpr .)
    COMMA           reduce using rule 72 (relexpr -> relexpr LE shiftexpr .)
    SEMICOL         reduce using rule 72 (relexpr -> relexpr LE shiftexpr .)
    RPAREN          reduce using rule 72 (relexpr -> relexpr LE shiftexpr .)
    LSHIFT          shift and go to state 67
    RSHIFT          shift and go to state 68


state 142

    (73) relexpr -> relexpr GE shiftexpr .
    (69) shiftexpr -> shiftexpr . LSHIFT addexpr
    (70) shiftexpr -> shiftexpr . RSHIFT addexpr

    LE              reduce using rule 73 (relexpr -> relexpr GE shiftexpr .)
    GE              reduce using rule 73 (relexpr -> relexpr GE shiftexpr .)
    LEQ             reduce using rule 73 (relexpr -> relexpr GE shiftexpr .)
    GEQ             reduce using rule 73 (relexpr -> relexpr GE shiftexpr .)
    EQ              reduce using rule 73 (relexpr -> relexpr GE shiftexpr .)
    NE              reduce using rule 73 (relexpr -> relexpr GE shiftexpr .)
    AND             reduce using rule 73 (relexpr -> relexpr GE shiftexpr .)
    XOR             reduce using rule 73 (relexpr -> relexpr GE shiftexpr .)
    OR              reduce using rule 73 (relexpr -> relexpr GE shiftexpr .)
    LAND            reduce using rule 73 (relexpr -> relexpr GE shiftexpr .)
    LOR             reduce using rule 73 (relexpr -> relexpr GE shiftexpr .)
    RBRACK          reduce using rule 73 (relexpr -> relexpr GE shiftexpr .)
    COMMA           reduce using rule 73 (relexpr -> relexpr GE shiftexpr .)
    SEMICOL         reduce using rule 73 (relexpr -> relexpr GE shiftexpr .)
    RPAREN          reduce using rule 73 (relexpr -> relexpr GE shiftexpr .)
    LSHIFT          shift and go to state 67
    RSHIFT          shift and go to state 68


state 143

    (74) relexpr -> relexpr LEQ shiftexpr .
    (69) shiftexpr -> shiftexpr . LSHIFT addexpr
    (70) shiftexpr -> shiftexpr . RSHIFT addexpr

    LE              reduce using rule 74 (relexpr -> relexpr LEQ shiftexpr .)
    GE              reduce using rule 74 (relexpr -> relexpr LEQ shiftexpr .)
    LEQ             reduce using rule 74 (relexpr -> relexpr LEQ shiftexpr .)
    GEQ             reduce using rule 74 (relexpr -> relexpr LEQ shiftexpr .)
    EQ              reduce using rule 74 (relexpr -> relexpr LEQ shiftexpr .)
    NE              reduce using rule 74 (relexpr -> relexpr LEQ shiftexpr .)
    AND             reduce using rule 74 (relexpr -> relexpr LEQ shiftexpr .)
    XOR             reduce using rule 74 (relexpr -> relexpr LEQ shiftexpr .)
    OR              reduce using rule 74 (relexpr -> relexpr LEQ shiftexpr .)
    LAND            reduce using rule 74 (relexpr -> relexpr LEQ shiftexpr .)
    LOR             reduce using rule 74 (relexpr -> relexpr LEQ shiftexpr .)
    RBRACK          reduce using rule 74 (relexpr -> relexpr LEQ shiftexpr .)
    COMMA           reduce using rule 74 (relexpr -> relexpr LEQ shiftexpr .)
    SEMICOL         reduce using rule 74 (relexpr -> relexpr LEQ shiftexpr .)
    RPAREN          reduce using rule 74 (relexpr -> relexpr LEQ shiftexpr .)
    LSHIFT          shift and go to state 67
    RSHIFT          shift and go to state 68


state 144

    (24) defv_many -> defv .
    (25) defv_many -> defv . defv_many
    (24) defv_many -> . defv
    (25) defv_many -> . defv defv_many
    (5) defv -> . type defv_multi SEMICOL
    (106) type -> . INT
    (107) type -> . FLOAT
    (108) type -> . CHAR
    (109) type -> . VOID

    SEMICOL         reduce using rule 24 (defv_many -> defv .)
    LBRACE          reduce using rule 24 (defv_many -> defv .)
    WHILE           reduce using rule 24 (defv_many -> defv .)
    FOR             reduce using rule 24 (defv_many -> defv .)
    IF              reduce using rule 24 (defv_many -> defv .)
    CONTINUE        reduce using rule 24 (defv_many -> defv .)
    BREAK           reduce using rule 24 (defv_many -> defv .)
    RETURN          reduce using rule 24 (defv_many -> defv .)
    TIMES           reduce using rule 24 (defv_many -> defv .)
    ID              reduce using rule 24 (defv_many -> defv .)
    LPAREN          reduce using rule 24 (defv_many -> defv .)
    IVAL            reduce using rule 24 (defv_many -> defv .)
    FVAL            reduce using rule 24 (defv_many -> defv .)
    SVAL            reduce using rule 24 (defv_many -> defv .)
    CVAL            reduce using rule 24 (defv_many -> defv .)
    AND             reduce using rule 24 (defv_many -> defv .)
    INC             reduce using rule 24 (defv_many -> defv .)
    DEC             reduce using rule 24 (defv_many -> defv .)
    PLUS            reduce using rule 24 (defv_many -> defv .)
    MINUS           reduce using rule 24 (defv_many -> defv .)
    NOT             reduce using rule 24 (defv_many -> defv .)
    LNOT            reduce using rule 24 (defv_many -> defv .)
    RBRACE          reduce using rule 24 (defv_many -> defv .)
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 1
    VOID            shift and go to state 3

    defv                           shift and go to state 144
    defv_many                      shift and go to state 155
    type                           shift and go to state 146

state 145

    (21) body -> pre_defv_many . pre_stmt_many
    (26) pre_stmt_many -> . empty
    (27) pre_stmt_many -> . stmt_many
    (114) empty -> .
    (28) stmt_many -> . stmt
    (29) stmt_many -> . stmt stmt_many
    (30) stmt -> . SEMICOL
    (31) stmt -> . LBRACE body RBRACE
    (32) stmt -> . expr_many SEMICOL
    (33) stmt -> . WHILE LPAREN expr_many RPAREN stmt
    (34) stmt -> . FOR LPAREN expr_many SEMICOL expr_many SEMICOL expr_many RPAREN stmt
    (35) stmt -> . IF LPAREN expr_many RPAREN stmt
    (36) stmt -> . IF LPAREN expr_many RPAREN stmt ELSE stmt
    (37) stmt -> . CONTINUE SEMICOL
    (38) stmt -> . BREAK SEMICOL
    (39) stmt -> . RETURN SEMICOL
    (40) stmt -> . RETURN expr_many SEMICOL
    (103) expr_many -> . expr
    (104) expr_many -> . expr_many COMMA expr
    (89) expr -> . lorexpr
    (90) expr -> . postexpr assign_op expr
    (91) expr -> . TIMES unaryexpr assign_op expr
    (87) lorexpr -> . landexpr
    (88) lorexpr -> . lorexpr LOR landexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (85) landexpr -> . orexpr
    (86) landexpr -> . landexpr LAND orexpr
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (83) orexpr -> . xorexpr
    (84) orexpr -> . orexpr OR xorexpr
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL
    (81) xorexpr -> . andexpr
    (82) xorexpr -> . xorexpr XOR andexpr
    (79) andexpr -> . eqexpr
    (80) andexpr -> . andexpr AND eqexpr
    (76) eqexpr -> . relexpr
    (77) eqexpr -> . eqexpr EQ relexpr
    (78) eqexpr -> . eqexpr NE relexpr
    (71) relexpr -> . shiftexpr
    (72) relexpr -> . relexpr LE shiftexpr
    (73) relexpr -> . relexpr GE shiftexpr
    (74) relexpr -> . relexpr LEQ shiftexpr
    (75) relexpr -> . relexpr GEQ shiftexpr
    (68) shiftexpr -> . addexpr
    (69) shiftexpr -> . shiftexpr LSHIFT addexpr
    (70) shiftexpr -> . shiftexpr RSHIFT addexpr
    (65) addexpr -> . multexpr
    (66) addexpr -> . addexpr PLUS multexpr
    (67) addexpr -> . addexpr MINUS multexpr
    (61) multexpr -> . unaryexpr
    (62) multexpr -> . multexpr TIMES unaryexpr
    (63) multexpr -> . multexpr DIVIDE unaryexpr
    (64) multexpr -> . multexpr MOD unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr

    RBRACE          reduce using rule 114 (empty -> .)
    SEMICOL         shift and go to state 168
    LBRACE          shift and go to state 165
    WHILE           shift and go to state 156
    FOR             shift and go to state 161
    IF              shift and go to state 164
    CONTINUE        shift and go to state 166
    BREAK           shift and go to state 162
    RETURN          shift and go to state 158
    TIMES           shift and go to state 37
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57
    AND             shift and go to state 58
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34

    shiftexpr                      shift and go to state 31
    postexpr                       shift and go to state 48
    addexpr                        shift and go to state 44
    eqexpr                         shift and go to state 50
    unaryexpr                      shift and go to state 39
    orexpr                         shift and go to state 33
    priexpr                        shift and go to state 51
    stmt                           shift and go to state 159
    stmt_many                      shift and go to state 160
    multexpr                       shift and go to state 54
    xorexpr                        shift and go to state 38
    pre_stmt_many                  shift and go to state 167
    lorexpr                        shift and go to state 56
    landexpr                       shift and go to state 41
    empty                          shift and go to state 163
    relexpr                        shift and go to state 59
    expr                           shift and go to state 70
    expr_many                      shift and go to state 157
    andexpr                        shift and go to state 36
    const                          shift and go to state 45

state 146

    (5) defv -> type . defv_multi SEMICOL
    (6) defv_multi -> . id_adv array
    (7) defv_multi -> . id_adv assign
    (8) defv_multi -> . id_adv array COMMA defv_multi
    (9) defv_multi -> . id_adv assign COMMA defv_multi
    (10) id_adv -> . ID
    (11) id_adv -> . TIMES id_adv

    ID              shift and go to state 12
    TIMES           shift and go to state 13

    id_adv                         shift and go to state 62
    defv_multi                     shift and go to state 10

state 147

    (22) pre_defv_many -> empty .

    SEMICOL         reduce using rule 22 (pre_defv_many -> empty .)
    LBRACE          reduce using rule 22 (pre_defv_many -> empty .)
    WHILE           reduce using rule 22 (pre_defv_many -> empty .)
    FOR             reduce using rule 22 (pre_defv_many -> empty .)
    IF              reduce using rule 22 (pre_defv_many -> empty .)
    CONTINUE        reduce using rule 22 (pre_defv_many -> empty .)
    BREAK           reduce using rule 22 (pre_defv_many -> empty .)
    RETURN          reduce using rule 22 (pre_defv_many -> empty .)
    TIMES           reduce using rule 22 (pre_defv_many -> empty .)
    ID              reduce using rule 22 (pre_defv_many -> empty .)
    LPAREN          reduce using rule 22 (pre_defv_many -> empty .)
    IVAL            reduce using rule 22 (pre_defv_many -> empty .)
    FVAL            reduce using rule 22 (pre_defv_many -> empty .)
    SVAL            reduce using rule 22 (pre_defv_many -> empty .)
    CVAL            reduce using rule 22 (pre_defv_many -> empty .)
    AND             reduce using rule 22 (pre_defv_many -> empty .)
    INC             reduce using rule 22 (pre_defv_many -> empty .)
    DEC             reduce using rule 22 (pre_defv_many -> empty .)
    PLUS            reduce using rule 22 (pre_defv_many -> empty .)
    MINUS           reduce using rule 22 (pre_defv_many -> empty .)
    NOT             reduce using rule 22 (pre_defv_many -> empty .)
    LNOT            reduce using rule 22 (pre_defv_many -> empty .)
    RBRACE          reduce using rule 22 (pre_defv_many -> empty .)


state 148

    (23) pre_defv_many -> defv_many .

    SEMICOL         reduce using rule 23 (pre_defv_many -> defv_many .)
    LBRACE          reduce using rule 23 (pre_defv_many -> defv_many .)
    WHILE           reduce using rule 23 (pre_defv_many -> defv_many .)
    FOR             reduce using rule 23 (pre_defv_many -> defv_many .)
    IF              reduce using rule 23 (pre_defv_many -> defv_many .)
    CONTINUE        reduce using rule 23 (pre_defv_many -> defv_many .)
    BREAK           reduce using rule 23 (pre_defv_many -> defv_many .)
    RETURN          reduce using rule 23 (pre_defv_many -> defv_many .)
    TIMES           reduce using rule 23 (pre_defv_many -> defv_many .)
    ID              reduce using rule 23 (pre_defv_many -> defv_many .)
    LPAREN          reduce using rule 23 (pre_defv_many -> defv_many .)
    IVAL            reduce using rule 23 (pre_defv_many -> defv_many .)
    FVAL            reduce using rule 23 (pre_defv_many -> defv_many .)
    SVAL            reduce using rule 23 (pre_defv_many -> defv_many .)
    CVAL            reduce using rule 23 (pre_defv_many -> defv_many .)
    AND             reduce using rule 23 (pre_defv_many -> defv_many .)
    INC             reduce using rule 23 (pre_defv_many -> defv_many .)
    DEC             reduce using rule 23 (pre_defv_many -> defv_many .)
    PLUS            reduce using rule 23 (pre_defv_many -> defv_many .)
    MINUS           reduce using rule 23 (pre_defv_many -> defv_many .)
    NOT             reduce using rule 23 (pre_defv_many -> defv_many .)
    LNOT            reduce using rule 23 (pre_defv_many -> defv_many .)
    RBRACE          reduce using rule 23 (pre_defv_many -> defv_many .)


state 149

    (14) deff -> type id_adv LPAREN s_args RPAREN LBRACE body . RBRACE

    RBRACE          shift and go to state 169


state 150

    (104) expr_many -> expr_many COMMA expr .

    SEMICOL         reduce using rule 104 (expr_many -> expr_many COMMA expr .)
    COMMA           reduce using rule 104 (expr_many -> expr_many COMMA expr .)
    RPAREN          reduce using rule 104 (expr_many -> expr_many COMMA expr .)
    RBRACK          reduce using rule 104 (expr_many -> expr_many COMMA expr .)


state 151

    (91) expr -> TIMES unaryexpr assign_op expr .

    RPAREN          reduce using rule 91 (expr -> TIMES unaryexpr assign_op expr .)
    COMMA           reduce using rule 91 (expr -> TIMES unaryexpr assign_op expr .)
    SEMICOL         reduce using rule 91 (expr -> TIMES unaryexpr assign_op expr .)
    RBRACK          reduce using rule 91 (expr -> TIMES unaryexpr assign_op expr .)


state 152

    (51) argexpr_list -> argexpr_list COMMA . expr
    (89) expr -> . lorexpr
    (90) expr -> . postexpr assign_op expr
    (91) expr -> . TIMES unaryexpr assign_op expr
    (87) lorexpr -> . landexpr
    (88) lorexpr -> . lorexpr LOR landexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (85) landexpr -> . orexpr
    (86) landexpr -> . landexpr LAND orexpr
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (83) orexpr -> . xorexpr
    (84) orexpr -> . orexpr OR xorexpr
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL
    (81) xorexpr -> . andexpr
    (82) xorexpr -> . xorexpr XOR andexpr
    (79) andexpr -> . eqexpr
    (80) andexpr -> . andexpr AND eqexpr
    (76) eqexpr -> . relexpr
    (77) eqexpr -> . eqexpr EQ relexpr
    (78) eqexpr -> . eqexpr NE relexpr
    (71) relexpr -> . shiftexpr
    (72) relexpr -> . relexpr LE shiftexpr
    (73) relexpr -> . relexpr GE shiftexpr
    (74) relexpr -> . relexpr LEQ shiftexpr
    (75) relexpr -> . relexpr GEQ shiftexpr
    (68) shiftexpr -> . addexpr
    (69) shiftexpr -> . shiftexpr LSHIFT addexpr
    (70) shiftexpr -> . shiftexpr RSHIFT addexpr
    (65) addexpr -> . multexpr
    (66) addexpr -> . addexpr PLUS multexpr
    (67) addexpr -> . addexpr MINUS multexpr
    (61) multexpr -> . unaryexpr
    (62) multexpr -> . multexpr TIMES unaryexpr
    (63) multexpr -> . multexpr DIVIDE unaryexpr
    (64) multexpr -> . multexpr MOD unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr

    TIMES           shift and go to state 37
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57
    AND             shift and go to state 58
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34

    shiftexpr                      shift and go to state 31
    xorexpr                        shift and go to state 38
    unaryexpr                      shift and go to state 39
    priexpr                        shift and go to state 51
    lorexpr                        shift and go to state 56
    addexpr                        shift and go to state 44
    landexpr                       shift and go to state 41
    orexpr                         shift and go to state 33
    multexpr                       shift and go to state 54
    relexpr                        shift and go to state 59
    expr                           shift and go to state 170
    andexpr                        shift and go to state 36
    const                          shift and go to state 45
    eqexpr                         shift and go to state 50
    postexpr                       shift and go to state 48

state 153

    (47) postexpr -> postexpr LPAREN argexpr_list RPAREN .

    LBRACK          reduce using rule 47 (postexpr -> postexpr LPAREN argexpr_list RPAREN .)
    LPAREN          reduce using rule 47 (postexpr -> postexpr LPAREN argexpr_list RPAREN .)
    INC             reduce using rule 47 (postexpr -> postexpr LPAREN argexpr_list RPAREN .)
    DEC             reduce using rule 47 (postexpr -> postexpr LPAREN argexpr_list RPAREN .)
    TIMES           reduce using rule 47 (postexpr -> postexpr LPAREN argexpr_list RPAREN .)
    DIVIDE          reduce using rule 47 (postexpr -> postexpr LPAREN argexpr_list RPAREN .)
    MOD             reduce using rule 47 (postexpr -> postexpr LPAREN argexpr_list RPAREN .)
    PLUS            reduce using rule 47 (postexpr -> postexpr LPAREN argexpr_list RPAREN .)
    MINUS           reduce using rule 47 (postexpr -> postexpr LPAREN argexpr_list RPAREN .)
    LSHIFT          reduce using rule 47 (postexpr -> postexpr LPAREN argexpr_list RPAREN .)
    RSHIFT          reduce using rule 47 (postexpr -> postexpr LPAREN argexpr_list RPAREN .)
    LE              reduce using rule 47 (postexpr -> postexpr LPAREN argexpr_list RPAREN .)
    GE              reduce using rule 47 (postexpr -> postexpr LPAREN argexpr_list RPAREN .)
    LEQ             reduce using rule 47 (postexpr -> postexpr LPAREN argexpr_list RPAREN .)
    GEQ             reduce using rule 47 (postexpr -> postexpr LPAREN argexpr_list RPAREN .)
    EQ              reduce using rule 47 (postexpr -> postexpr LPAREN argexpr_list RPAREN .)
    NE              reduce using rule 47 (postexpr -> postexpr LPAREN argexpr_list RPAREN .)
    AND             reduce using rule 47 (postexpr -> postexpr LPAREN argexpr_list RPAREN .)
    XOR             reduce using rule 47 (postexpr -> postexpr LPAREN argexpr_list RPAREN .)
    OR              reduce using rule 47 (postexpr -> postexpr LPAREN argexpr_list RPAREN .)
    LAND            reduce using rule 47 (postexpr -> postexpr LPAREN argexpr_list RPAREN .)
    LOR             reduce using rule 47 (postexpr -> postexpr LPAREN argexpr_list RPAREN .)
    COMMA           reduce using rule 47 (postexpr -> postexpr LPAREN argexpr_list RPAREN .)
    SEMICOL         reduce using rule 47 (postexpr -> postexpr LPAREN argexpr_list RPAREN .)
    RPAREN          reduce using rule 47 (postexpr -> postexpr LPAREN argexpr_list RPAREN .)
    ASSIGN          reduce using rule 47 (postexpr -> postexpr LPAREN argexpr_list RPAREN .)
    PLUS_ASSIGN     reduce using rule 47 (postexpr -> postexpr LPAREN argexpr_list RPAREN .)
    MINUS_ASSIGN    reduce using rule 47 (postexpr -> postexpr LPAREN argexpr_list RPAREN .)
    TIMES_ASSIGN    reduce using rule 47 (postexpr -> postexpr LPAREN argexpr_list RPAREN .)
    DIVIDE_ASSIGN   reduce using rule 47 (postexpr -> postexpr LPAREN argexpr_list RPAREN .)
    MOD_ASSIGN      reduce using rule 47 (postexpr -> postexpr LPAREN argexpr_list RPAREN .)
    AND_ASSIGN      reduce using rule 47 (postexpr -> postexpr LPAREN argexpr_list RPAREN .)
    OR_ASSIGN       reduce using rule 47 (postexpr -> postexpr LPAREN argexpr_list RPAREN .)
    XOR_ASSIGN      reduce using rule 47 (postexpr -> postexpr LPAREN argexpr_list RPAREN .)
    LSHIFT_ASSIGN   reduce using rule 47 (postexpr -> postexpr LPAREN argexpr_list RPAREN .)
    RSHIFT_ASSIGN   reduce using rule 47 (postexpr -> postexpr LPAREN argexpr_list RPAREN .)
    RBRACK          reduce using rule 47 (postexpr -> postexpr LPAREN argexpr_list RPAREN .)


state 154

    (45) postexpr -> postexpr LBRACK expr_many RBRACK .

    LBRACK          reduce using rule 45 (postexpr -> postexpr LBRACK expr_many RBRACK .)
    LPAREN          reduce using rule 45 (postexpr -> postexpr LBRACK expr_many RBRACK .)
    INC             reduce using rule 45 (postexpr -> postexpr LBRACK expr_many RBRACK .)
    DEC             reduce using rule 45 (postexpr -> postexpr LBRACK expr_many RBRACK .)
    TIMES           reduce using rule 45 (postexpr -> postexpr LBRACK expr_many RBRACK .)
    DIVIDE          reduce using rule 45 (postexpr -> postexpr LBRACK expr_many RBRACK .)
    MOD             reduce using rule 45 (postexpr -> postexpr LBRACK expr_many RBRACK .)
    PLUS            reduce using rule 45 (postexpr -> postexpr LBRACK expr_many RBRACK .)
    MINUS           reduce using rule 45 (postexpr -> postexpr LBRACK expr_many RBRACK .)
    LSHIFT          reduce using rule 45 (postexpr -> postexpr LBRACK expr_many RBRACK .)
    RSHIFT          reduce using rule 45 (postexpr -> postexpr LBRACK expr_many RBRACK .)
    LE              reduce using rule 45 (postexpr -> postexpr LBRACK expr_many RBRACK .)
    GE              reduce using rule 45 (postexpr -> postexpr LBRACK expr_many RBRACK .)
    LEQ             reduce using rule 45 (postexpr -> postexpr LBRACK expr_many RBRACK .)
    GEQ             reduce using rule 45 (postexpr -> postexpr LBRACK expr_many RBRACK .)
    EQ              reduce using rule 45 (postexpr -> postexpr LBRACK expr_many RBRACK .)
    NE              reduce using rule 45 (postexpr -> postexpr LBRACK expr_many RBRACK .)
    AND             reduce using rule 45 (postexpr -> postexpr LBRACK expr_many RBRACK .)
    XOR             reduce using rule 45 (postexpr -> postexpr LBRACK expr_many RBRACK .)
    OR              reduce using rule 45 (postexpr -> postexpr LBRACK expr_many RBRACK .)
    LAND            reduce using rule 45 (postexpr -> postexpr LBRACK expr_many RBRACK .)
    LOR             reduce using rule 45 (postexpr -> postexpr LBRACK expr_many RBRACK .)
    COMMA           reduce using rule 45 (postexpr -> postexpr LBRACK expr_many RBRACK .)
    SEMICOL         reduce using rule 45 (postexpr -> postexpr LBRACK expr_many RBRACK .)
    RPAREN          reduce using rule 45 (postexpr -> postexpr LBRACK expr_many RBRACK .)
    ASSIGN          reduce using rule 45 (postexpr -> postexpr LBRACK expr_many RBRACK .)
    PLUS_ASSIGN     reduce using rule 45 (postexpr -> postexpr LBRACK expr_many RBRACK .)
    MINUS_ASSIGN    reduce using rule 45 (postexpr -> postexpr LBRACK expr_many RBRACK .)
    TIMES_ASSIGN    reduce using rule 45 (postexpr -> postexpr LBRACK expr_many RBRACK .)
    DIVIDE_ASSIGN   reduce using rule 45 (postexpr -> postexpr LBRACK expr_many RBRACK .)
    MOD_ASSIGN      reduce using rule 45 (postexpr -> postexpr LBRACK expr_many RBRACK .)
    AND_ASSIGN      reduce using rule 45 (postexpr -> postexpr LBRACK expr_many RBRACK .)
    OR_ASSIGN       reduce using rule 45 (postexpr -> postexpr LBRACK expr_many RBRACK .)
    XOR_ASSIGN      reduce using rule 45 (postexpr -> postexpr LBRACK expr_many RBRACK .)
    LSHIFT_ASSIGN   reduce using rule 45 (postexpr -> postexpr LBRACK expr_many RBRACK .)
    RSHIFT_ASSIGN   reduce using rule 45 (postexpr -> postexpr LBRACK expr_many RBRACK .)
    RBRACK          reduce using rule 45 (postexpr -> postexpr LBRACK expr_many RBRACK .)


state 155

    (25) defv_many -> defv defv_many .

    SEMICOL         reduce using rule 25 (defv_many -> defv defv_many .)
    LBRACE          reduce using rule 25 (defv_many -> defv defv_many .)
    WHILE           reduce using rule 25 (defv_many -> defv defv_many .)
    FOR             reduce using rule 25 (defv_many -> defv defv_many .)
    IF              reduce using rule 25 (defv_many -> defv defv_many .)
    CONTINUE        reduce using rule 25 (defv_many -> defv defv_many .)
    BREAK           reduce using rule 25 (defv_many -> defv defv_many .)
    RETURN          reduce using rule 25 (defv_many -> defv defv_many .)
    TIMES           reduce using rule 25 (defv_many -> defv defv_many .)
    ID              reduce using rule 25 (defv_many -> defv defv_many .)
    LPAREN          reduce using rule 25 (defv_many -> defv defv_many .)
    IVAL            reduce using rule 25 (defv_many -> defv defv_many .)
    FVAL            reduce using rule 25 (defv_many -> defv defv_many .)
    SVAL            reduce using rule 25 (defv_many -> defv defv_many .)
    CVAL            reduce using rule 25 (defv_many -> defv defv_many .)
    AND             reduce using rule 25 (defv_many -> defv defv_many .)
    INC             reduce using rule 25 (defv_many -> defv defv_many .)
    DEC             reduce using rule 25 (defv_many -> defv defv_many .)
    PLUS            reduce using rule 25 (defv_many -> defv defv_many .)
    MINUS           reduce using rule 25 (defv_many -> defv defv_many .)
    NOT             reduce using rule 25 (defv_many -> defv defv_many .)
    LNOT            reduce using rule 25 (defv_many -> defv defv_many .)
    RBRACE          reduce using rule 25 (defv_many -> defv defv_many .)


state 156

    (33) stmt -> WHILE . LPAREN expr_many RPAREN stmt

    LPAREN          shift and go to state 171


state 157

    (32) stmt -> expr_many . SEMICOL
    (104) expr_many -> expr_many . COMMA expr

    SEMICOL         shift and go to state 172
    COMMA           shift and go to state 119


state 158

    (39) stmt -> RETURN . SEMICOL
    (40) stmt -> RETURN . expr_many SEMICOL
    (103) expr_many -> . expr
    (104) expr_many -> . expr_many COMMA expr
    (89) expr -> . lorexpr
    (90) expr -> . postexpr assign_op expr
    (91) expr -> . TIMES unaryexpr assign_op expr
    (87) lorexpr -> . landexpr
    (88) lorexpr -> . lorexpr LOR landexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (85) landexpr -> . orexpr
    (86) landexpr -> . landexpr LAND orexpr
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (83) orexpr -> . xorexpr
    (84) orexpr -> . orexpr OR xorexpr
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL
    (81) xorexpr -> . andexpr
    (82) xorexpr -> . xorexpr XOR andexpr
    (79) andexpr -> . eqexpr
    (80) andexpr -> . andexpr AND eqexpr
    (76) eqexpr -> . relexpr
    (77) eqexpr -> . eqexpr EQ relexpr
    (78) eqexpr -> . eqexpr NE relexpr
    (71) relexpr -> . shiftexpr
    (72) relexpr -> . relexpr LE shiftexpr
    (73) relexpr -> . relexpr GE shiftexpr
    (74) relexpr -> . relexpr LEQ shiftexpr
    (75) relexpr -> . relexpr GEQ shiftexpr
    (68) shiftexpr -> . addexpr
    (69) shiftexpr -> . shiftexpr LSHIFT addexpr
    (70) shiftexpr -> . shiftexpr RSHIFT addexpr
    (65) addexpr -> . multexpr
    (66) addexpr -> . addexpr PLUS multexpr
    (67) addexpr -> . addexpr MINUS multexpr
    (61) multexpr -> . unaryexpr
    (62) multexpr -> . multexpr TIMES unaryexpr
    (63) multexpr -> . multexpr DIVIDE unaryexpr
    (64) multexpr -> . multexpr MOD unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr

    SEMICOL         shift and go to state 174
    TIMES           shift and go to state 37
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57
    AND             shift and go to state 58
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34

    shiftexpr                      shift and go to state 31
    xorexpr                        shift and go to state 38
    unaryexpr                      shift and go to state 39
    priexpr                        shift and go to state 51
    lorexpr                        shift and go to state 56
    addexpr                        shift and go to state 44
    landexpr                       shift and go to state 41
    orexpr                         shift and go to state 33
    multexpr                       shift and go to state 54
    postexpr                       shift and go to state 48
    relexpr                        shift and go to state 59
    expr                           shift and go to state 70
    expr_many                      shift and go to state 173
    andexpr                        shift and go to state 36
    const                          shift and go to state 45
    eqexpr                         shift and go to state 50

state 159

    (28) stmt_many -> stmt .
    (29) stmt_many -> stmt . stmt_many
    (28) stmt_many -> . stmt
    (29) stmt_many -> . stmt stmt_many
    (30) stmt -> . SEMICOL
    (31) stmt -> . LBRACE body RBRACE
    (32) stmt -> . expr_many SEMICOL
    (33) stmt -> . WHILE LPAREN expr_many RPAREN stmt
    (34) stmt -> . FOR LPAREN expr_many SEMICOL expr_many SEMICOL expr_many RPAREN stmt
    (35) stmt -> . IF LPAREN expr_many RPAREN stmt
    (36) stmt -> . IF LPAREN expr_many RPAREN stmt ELSE stmt
    (37) stmt -> . CONTINUE SEMICOL
    (38) stmt -> . BREAK SEMICOL
    (39) stmt -> . RETURN SEMICOL
    (40) stmt -> . RETURN expr_many SEMICOL
    (103) expr_many -> . expr
    (104) expr_many -> . expr_many COMMA expr
    (89) expr -> . lorexpr
    (90) expr -> . postexpr assign_op expr
    (91) expr -> . TIMES unaryexpr assign_op expr
    (87) lorexpr -> . landexpr
    (88) lorexpr -> . lorexpr LOR landexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (85) landexpr -> . orexpr
    (86) landexpr -> . landexpr LAND orexpr
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (83) orexpr -> . xorexpr
    (84) orexpr -> . orexpr OR xorexpr
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL
    (81) xorexpr -> . andexpr
    (82) xorexpr -> . xorexpr XOR andexpr
    (79) andexpr -> . eqexpr
    (80) andexpr -> . andexpr AND eqexpr
    (76) eqexpr -> . relexpr
    (77) eqexpr -> . eqexpr EQ relexpr
    (78) eqexpr -> . eqexpr NE relexpr
    (71) relexpr -> . shiftexpr
    (72) relexpr -> . relexpr LE shiftexpr
    (73) relexpr -> . relexpr GE shiftexpr
    (74) relexpr -> . relexpr LEQ shiftexpr
    (75) relexpr -> . relexpr GEQ shiftexpr
    (68) shiftexpr -> . addexpr
    (69) shiftexpr -> . shiftexpr LSHIFT addexpr
    (70) shiftexpr -> . shiftexpr RSHIFT addexpr
    (65) addexpr -> . multexpr
    (66) addexpr -> . addexpr PLUS multexpr
    (67) addexpr -> . addexpr MINUS multexpr
    (61) multexpr -> . unaryexpr
    (62) multexpr -> . multexpr TIMES unaryexpr
    (63) multexpr -> . multexpr DIVIDE unaryexpr
    (64) multexpr -> . multexpr MOD unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr

    RBRACE          reduce using rule 28 (stmt_many -> stmt .)
    SEMICOL         shift and go to state 168
    LBRACE          shift and go to state 165
    WHILE           shift and go to state 156
    FOR             shift and go to state 161
    IF              shift and go to state 164
    CONTINUE        shift and go to state 166
    BREAK           shift and go to state 162
    RETURN          shift and go to state 158
    TIMES           shift and go to state 37
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57
    AND             shift and go to state 58
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34

    shiftexpr                      shift and go to state 31
    xorexpr                        shift and go to state 38
    unaryexpr                      shift and go to state 39
    priexpr                        shift and go to state 51
    lorexpr                        shift and go to state 56
    addexpr                        shift and go to state 44
    landexpr                       shift and go to state 41
    stmt_many                      shift and go to state 175
    orexpr                         shift and go to state 33
    multexpr                       shift and go to state 54
    postexpr                       shift and go to state 48
    stmt                           shift and go to state 159
    relexpr                        shift and go to state 59
    expr                           shift and go to state 70
    expr_many                      shift and go to state 157
    const                          shift and go to state 45
    andexpr                        shift and go to state 36
    eqexpr                         shift and go to state 50

state 160

    (27) pre_stmt_many -> stmt_many .

    RBRACE          reduce using rule 27 (pre_stmt_many -> stmt_many .)


state 161

    (34) stmt -> FOR . LPAREN expr_many SEMICOL expr_many SEMICOL expr_many RPAREN stmt

    LPAREN          shift and go to state 176


state 162

    (38) stmt -> BREAK . SEMICOL

    SEMICOL         shift and go to state 177


state 163

    (26) pre_stmt_many -> empty .

    RBRACE          reduce using rule 26 (pre_stmt_many -> empty .)


state 164

    (35) stmt -> IF . LPAREN expr_many RPAREN stmt
    (36) stmt -> IF . LPAREN expr_many RPAREN stmt ELSE stmt

    LPAREN          shift and go to state 178


state 165

    (31) stmt -> LBRACE . body RBRACE
    (21) body -> . pre_defv_many pre_stmt_many
    (22) pre_defv_many -> . empty
    (23) pre_defv_many -> . defv_many
    (114) empty -> .
    (24) defv_many -> . defv
    (25) defv_many -> . defv defv_many
    (5) defv -> . type defv_multi SEMICOL
    (106) type -> . INT
    (107) type -> . FLOAT
    (108) type -> . CHAR
    (109) type -> . VOID

    SEMICOL         reduce using rule 114 (empty -> .)
    LBRACE          reduce using rule 114 (empty -> .)
    WHILE           reduce using rule 114 (empty -> .)
    FOR             reduce using rule 114 (empty -> .)
    IF              reduce using rule 114 (empty -> .)
    CONTINUE        reduce using rule 114 (empty -> .)
    BREAK           reduce using rule 114 (empty -> .)
    RETURN          reduce using rule 114 (empty -> .)
    TIMES           reduce using rule 114 (empty -> .)
    ID              reduce using rule 114 (empty -> .)
    LPAREN          reduce using rule 114 (empty -> .)
    IVAL            reduce using rule 114 (empty -> .)
    FVAL            reduce using rule 114 (empty -> .)
    SVAL            reduce using rule 114 (empty -> .)
    CVAL            reduce using rule 114 (empty -> .)
    AND             reduce using rule 114 (empty -> .)
    INC             reduce using rule 114 (empty -> .)
    DEC             reduce using rule 114 (empty -> .)
    PLUS            reduce using rule 114 (empty -> .)
    MINUS           reduce using rule 114 (empty -> .)
    NOT             reduce using rule 114 (empty -> .)
    LNOT            reduce using rule 114 (empty -> .)
    RBRACE          reduce using rule 114 (empty -> .)
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 1
    VOID            shift and go to state 3

    defv                           shift and go to state 144
    pre_defv_many                  shift and go to state 145
    type                           shift and go to state 146
    defv_many                      shift and go to state 148
    body                           shift and go to state 179
    empty                          shift and go to state 147

state 166

    (37) stmt -> CONTINUE . SEMICOL

    SEMICOL         shift and go to state 180


state 167

    (21) body -> pre_defv_many pre_stmt_many .

    RBRACE          reduce using rule 21 (body -> pre_defv_many pre_stmt_many .)


state 168

    (30) stmt -> SEMICOL .

    SEMICOL         reduce using rule 30 (stmt -> SEMICOL .)
    LBRACE          reduce using rule 30 (stmt -> SEMICOL .)
    WHILE           reduce using rule 30 (stmt -> SEMICOL .)
    FOR             reduce using rule 30 (stmt -> SEMICOL .)
    IF              reduce using rule 30 (stmt -> SEMICOL .)
    CONTINUE        reduce using rule 30 (stmt -> SEMICOL .)
    BREAK           reduce using rule 30 (stmt -> SEMICOL .)
    RETURN          reduce using rule 30 (stmt -> SEMICOL .)
    TIMES           reduce using rule 30 (stmt -> SEMICOL .)
    ID              reduce using rule 30 (stmt -> SEMICOL .)
    LPAREN          reduce using rule 30 (stmt -> SEMICOL .)
    IVAL            reduce using rule 30 (stmt -> SEMICOL .)
    FVAL            reduce using rule 30 (stmt -> SEMICOL .)
    SVAL            reduce using rule 30 (stmt -> SEMICOL .)
    CVAL            reduce using rule 30 (stmt -> SEMICOL .)
    AND             reduce using rule 30 (stmt -> SEMICOL .)
    INC             reduce using rule 30 (stmt -> SEMICOL .)
    DEC             reduce using rule 30 (stmt -> SEMICOL .)
    PLUS            reduce using rule 30 (stmt -> SEMICOL .)
    MINUS           reduce using rule 30 (stmt -> SEMICOL .)
    NOT             reduce using rule 30 (stmt -> SEMICOL .)
    LNOT            reduce using rule 30 (stmt -> SEMICOL .)
    RBRACE          reduce using rule 30 (stmt -> SEMICOL .)
    ELSE            reduce using rule 30 (stmt -> SEMICOL .)


state 169

    (14) deff -> type id_adv LPAREN s_args RPAREN LBRACE body RBRACE .

    INT             reduce using rule 14 (deff -> type id_adv LPAREN s_args RPAREN LBRACE body RBRACE .)
    FLOAT           reduce using rule 14 (deff -> type id_adv LPAREN s_args RPAREN LBRACE body RBRACE .)
    CHAR            reduce using rule 14 (deff -> type id_adv LPAREN s_args RPAREN LBRACE body RBRACE .)
    VOID            reduce using rule 14 (deff -> type id_adv LPAREN s_args RPAREN LBRACE body RBRACE .)
    $end            reduce using rule 14 (deff -> type id_adv LPAREN s_args RPAREN LBRACE body RBRACE .)


state 170

    (51) argexpr_list -> argexpr_list COMMA expr .

    RPAREN          reduce using rule 51 (argexpr_list -> argexpr_list COMMA expr .)
    COMMA           reduce using rule 51 (argexpr_list -> argexpr_list COMMA expr .)


state 171

    (33) stmt -> WHILE LPAREN . expr_many RPAREN stmt
    (103) expr_many -> . expr
    (104) expr_many -> . expr_many COMMA expr
    (89) expr -> . lorexpr
    (90) expr -> . postexpr assign_op expr
    (91) expr -> . TIMES unaryexpr assign_op expr
    (87) lorexpr -> . landexpr
    (88) lorexpr -> . lorexpr LOR landexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (85) landexpr -> . orexpr
    (86) landexpr -> . landexpr LAND orexpr
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (83) orexpr -> . xorexpr
    (84) orexpr -> . orexpr OR xorexpr
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL
    (81) xorexpr -> . andexpr
    (82) xorexpr -> . xorexpr XOR andexpr
    (79) andexpr -> . eqexpr
    (80) andexpr -> . andexpr AND eqexpr
    (76) eqexpr -> . relexpr
    (77) eqexpr -> . eqexpr EQ relexpr
    (78) eqexpr -> . eqexpr NE relexpr
    (71) relexpr -> . shiftexpr
    (72) relexpr -> . relexpr LE shiftexpr
    (73) relexpr -> . relexpr GE shiftexpr
    (74) relexpr -> . relexpr LEQ shiftexpr
    (75) relexpr -> . relexpr GEQ shiftexpr
    (68) shiftexpr -> . addexpr
    (69) shiftexpr -> . shiftexpr LSHIFT addexpr
    (70) shiftexpr -> . shiftexpr RSHIFT addexpr
    (65) addexpr -> . multexpr
    (66) addexpr -> . addexpr PLUS multexpr
    (67) addexpr -> . addexpr MINUS multexpr
    (61) multexpr -> . unaryexpr
    (62) multexpr -> . multexpr TIMES unaryexpr
    (63) multexpr -> . multexpr DIVIDE unaryexpr
    (64) multexpr -> . multexpr MOD unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr

    TIMES           shift and go to state 37
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57
    AND             shift and go to state 58
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34

    shiftexpr                      shift and go to state 31
    xorexpr                        shift and go to state 38
    unaryexpr                      shift and go to state 39
    priexpr                        shift and go to state 51
    lorexpr                        shift and go to state 56
    addexpr                        shift and go to state 44
    landexpr                       shift and go to state 41
    orexpr                         shift and go to state 33
    multexpr                       shift and go to state 54
    postexpr                       shift and go to state 48
    relexpr                        shift and go to state 59
    expr                           shift and go to state 70
    expr_many                      shift and go to state 181
    const                          shift and go to state 45
    andexpr                        shift and go to state 36
    eqexpr                         shift and go to state 50

state 172

    (32) stmt -> expr_many SEMICOL .

    SEMICOL         reduce using rule 32 (stmt -> expr_many SEMICOL .)
    LBRACE          reduce using rule 32 (stmt -> expr_many SEMICOL .)
    WHILE           reduce using rule 32 (stmt -> expr_many SEMICOL .)
    FOR             reduce using rule 32 (stmt -> expr_many SEMICOL .)
    IF              reduce using rule 32 (stmt -> expr_many SEMICOL .)
    CONTINUE        reduce using rule 32 (stmt -> expr_many SEMICOL .)
    BREAK           reduce using rule 32 (stmt -> expr_many SEMICOL .)
    RETURN          reduce using rule 32 (stmt -> expr_many SEMICOL .)
    TIMES           reduce using rule 32 (stmt -> expr_many SEMICOL .)
    ID              reduce using rule 32 (stmt -> expr_many SEMICOL .)
    LPAREN          reduce using rule 32 (stmt -> expr_many SEMICOL .)
    IVAL            reduce using rule 32 (stmt -> expr_many SEMICOL .)
    FVAL            reduce using rule 32 (stmt -> expr_many SEMICOL .)
    SVAL            reduce using rule 32 (stmt -> expr_many SEMICOL .)
    CVAL            reduce using rule 32 (stmt -> expr_many SEMICOL .)
    AND             reduce using rule 32 (stmt -> expr_many SEMICOL .)
    INC             reduce using rule 32 (stmt -> expr_many SEMICOL .)
    DEC             reduce using rule 32 (stmt -> expr_many SEMICOL .)
    PLUS            reduce using rule 32 (stmt -> expr_many SEMICOL .)
    MINUS           reduce using rule 32 (stmt -> expr_many SEMICOL .)
    NOT             reduce using rule 32 (stmt -> expr_many SEMICOL .)
    LNOT            reduce using rule 32 (stmt -> expr_many SEMICOL .)
    RBRACE          reduce using rule 32 (stmt -> expr_many SEMICOL .)
    ELSE            reduce using rule 32 (stmt -> expr_many SEMICOL .)


state 173

    (40) stmt -> RETURN expr_many . SEMICOL
    (104) expr_many -> expr_many . COMMA expr

    SEMICOL         shift and go to state 182
    COMMA           shift and go to state 119


state 174

    (39) stmt -> RETURN SEMICOL .

    SEMICOL         reduce using rule 39 (stmt -> RETURN SEMICOL .)
    LBRACE          reduce using rule 39 (stmt -> RETURN SEMICOL .)
    WHILE           reduce using rule 39 (stmt -> RETURN SEMICOL .)
    FOR             reduce using rule 39 (stmt -> RETURN SEMICOL .)
    IF              reduce using rule 39 (stmt -> RETURN SEMICOL .)
    CONTINUE        reduce using rule 39 (stmt -> RETURN SEMICOL .)
    BREAK           reduce using rule 39 (stmt -> RETURN SEMICOL .)
    RETURN          reduce using rule 39 (stmt -> RETURN SEMICOL .)
    TIMES           reduce using rule 39 (stmt -> RETURN SEMICOL .)
    ID              reduce using rule 39 (stmt -> RETURN SEMICOL .)
    LPAREN          reduce using rule 39 (stmt -> RETURN SEMICOL .)
    IVAL            reduce using rule 39 (stmt -> RETURN SEMICOL .)
    FVAL            reduce using rule 39 (stmt -> RETURN SEMICOL .)
    SVAL            reduce using rule 39 (stmt -> RETURN SEMICOL .)
    CVAL            reduce using rule 39 (stmt -> RETURN SEMICOL .)
    AND             reduce using rule 39 (stmt -> RETURN SEMICOL .)
    INC             reduce using rule 39 (stmt -> RETURN SEMICOL .)
    DEC             reduce using rule 39 (stmt -> RETURN SEMICOL .)
    PLUS            reduce using rule 39 (stmt -> RETURN SEMICOL .)
    MINUS           reduce using rule 39 (stmt -> RETURN SEMICOL .)
    NOT             reduce using rule 39 (stmt -> RETURN SEMICOL .)
    LNOT            reduce using rule 39 (stmt -> RETURN SEMICOL .)
    RBRACE          reduce using rule 39 (stmt -> RETURN SEMICOL .)
    ELSE            reduce using rule 39 (stmt -> RETURN SEMICOL .)


state 175

    (29) stmt_many -> stmt stmt_many .

    RBRACE          reduce using rule 29 (stmt_many -> stmt stmt_many .)


state 176

    (34) stmt -> FOR LPAREN . expr_many SEMICOL expr_many SEMICOL expr_many RPAREN stmt
    (103) expr_many -> . expr
    (104) expr_many -> . expr_many COMMA expr
    (89) expr -> . lorexpr
    (90) expr -> . postexpr assign_op expr
    (91) expr -> . TIMES unaryexpr assign_op expr
    (87) lorexpr -> . landexpr
    (88) lorexpr -> . lorexpr LOR landexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (85) landexpr -> . orexpr
    (86) landexpr -> . landexpr LAND orexpr
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (83) orexpr -> . xorexpr
    (84) orexpr -> . orexpr OR xorexpr
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL
    (81) xorexpr -> . andexpr
    (82) xorexpr -> . xorexpr XOR andexpr
    (79) andexpr -> . eqexpr
    (80) andexpr -> . andexpr AND eqexpr
    (76) eqexpr -> . relexpr
    (77) eqexpr -> . eqexpr EQ relexpr
    (78) eqexpr -> . eqexpr NE relexpr
    (71) relexpr -> . shiftexpr
    (72) relexpr -> . relexpr LE shiftexpr
    (73) relexpr -> . relexpr GE shiftexpr
    (74) relexpr -> . relexpr LEQ shiftexpr
    (75) relexpr -> . relexpr GEQ shiftexpr
    (68) shiftexpr -> . addexpr
    (69) shiftexpr -> . shiftexpr LSHIFT addexpr
    (70) shiftexpr -> . shiftexpr RSHIFT addexpr
    (65) addexpr -> . multexpr
    (66) addexpr -> . addexpr PLUS multexpr
    (67) addexpr -> . addexpr MINUS multexpr
    (61) multexpr -> . unaryexpr
    (62) multexpr -> . multexpr TIMES unaryexpr
    (63) multexpr -> . multexpr DIVIDE unaryexpr
    (64) multexpr -> . multexpr MOD unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr

    TIMES           shift and go to state 37
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57
    AND             shift and go to state 58
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34

    shiftexpr                      shift and go to state 31
    xorexpr                        shift and go to state 38
    unaryexpr                      shift and go to state 39
    priexpr                        shift and go to state 51
    lorexpr                        shift and go to state 56
    addexpr                        shift and go to state 44
    landexpr                       shift and go to state 41
    orexpr                         shift and go to state 33
    multexpr                       shift and go to state 54
    postexpr                       shift and go to state 48
    relexpr                        shift and go to state 59
    expr                           shift and go to state 70
    expr_many                      shift and go to state 183
    const                          shift and go to state 45
    andexpr                        shift and go to state 36
    eqexpr                         shift and go to state 50

state 177

    (38) stmt -> BREAK SEMICOL .

    SEMICOL         reduce using rule 38 (stmt -> BREAK SEMICOL .)
    LBRACE          reduce using rule 38 (stmt -> BREAK SEMICOL .)
    WHILE           reduce using rule 38 (stmt -> BREAK SEMICOL .)
    FOR             reduce using rule 38 (stmt -> BREAK SEMICOL .)
    IF              reduce using rule 38 (stmt -> BREAK SEMICOL .)
    CONTINUE        reduce using rule 38 (stmt -> BREAK SEMICOL .)
    BREAK           reduce using rule 38 (stmt -> BREAK SEMICOL .)
    RETURN          reduce using rule 38 (stmt -> BREAK SEMICOL .)
    TIMES           reduce using rule 38 (stmt -> BREAK SEMICOL .)
    ID              reduce using rule 38 (stmt -> BREAK SEMICOL .)
    LPAREN          reduce using rule 38 (stmt -> BREAK SEMICOL .)
    IVAL            reduce using rule 38 (stmt -> BREAK SEMICOL .)
    FVAL            reduce using rule 38 (stmt -> BREAK SEMICOL .)
    SVAL            reduce using rule 38 (stmt -> BREAK SEMICOL .)
    CVAL            reduce using rule 38 (stmt -> BREAK SEMICOL .)
    AND             reduce using rule 38 (stmt -> BREAK SEMICOL .)
    INC             reduce using rule 38 (stmt -> BREAK SEMICOL .)
    DEC             reduce using rule 38 (stmt -> BREAK SEMICOL .)
    PLUS            reduce using rule 38 (stmt -> BREAK SEMICOL .)
    MINUS           reduce using rule 38 (stmt -> BREAK SEMICOL .)
    NOT             reduce using rule 38 (stmt -> BREAK SEMICOL .)
    LNOT            reduce using rule 38 (stmt -> BREAK SEMICOL .)
    RBRACE          reduce using rule 38 (stmt -> BREAK SEMICOL .)
    ELSE            reduce using rule 38 (stmt -> BREAK SEMICOL .)


state 178

    (35) stmt -> IF LPAREN . expr_many RPAREN stmt
    (36) stmt -> IF LPAREN . expr_many RPAREN stmt ELSE stmt
    (103) expr_many -> . expr
    (104) expr_many -> . expr_many COMMA expr
    (89) expr -> . lorexpr
    (90) expr -> . postexpr assign_op expr
    (91) expr -> . TIMES unaryexpr assign_op expr
    (87) lorexpr -> . landexpr
    (88) lorexpr -> . lorexpr LOR landexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (85) landexpr -> . orexpr
    (86) landexpr -> . landexpr LAND orexpr
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (83) orexpr -> . xorexpr
    (84) orexpr -> . orexpr OR xorexpr
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL
    (81) xorexpr -> . andexpr
    (82) xorexpr -> . xorexpr XOR andexpr
    (79) andexpr -> . eqexpr
    (80) andexpr -> . andexpr AND eqexpr
    (76) eqexpr -> . relexpr
    (77) eqexpr -> . eqexpr EQ relexpr
    (78) eqexpr -> . eqexpr NE relexpr
    (71) relexpr -> . shiftexpr
    (72) relexpr -> . relexpr LE shiftexpr
    (73) relexpr -> . relexpr GE shiftexpr
    (74) relexpr -> . relexpr LEQ shiftexpr
    (75) relexpr -> . relexpr GEQ shiftexpr
    (68) shiftexpr -> . addexpr
    (69) shiftexpr -> . shiftexpr LSHIFT addexpr
    (70) shiftexpr -> . shiftexpr RSHIFT addexpr
    (65) addexpr -> . multexpr
    (66) addexpr -> . addexpr PLUS multexpr
    (67) addexpr -> . addexpr MINUS multexpr
    (61) multexpr -> . unaryexpr
    (62) multexpr -> . multexpr TIMES unaryexpr
    (63) multexpr -> . multexpr DIVIDE unaryexpr
    (64) multexpr -> . multexpr MOD unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr

    TIMES           shift and go to state 37
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57
    AND             shift and go to state 58
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34

    shiftexpr                      shift and go to state 31
    xorexpr                        shift and go to state 38
    unaryexpr                      shift and go to state 39
    priexpr                        shift and go to state 51
    lorexpr                        shift and go to state 56
    addexpr                        shift and go to state 44
    landexpr                       shift and go to state 41
    orexpr                         shift and go to state 33
    multexpr                       shift and go to state 54
    postexpr                       shift and go to state 48
    relexpr                        shift and go to state 59
    expr                           shift and go to state 70
    expr_many                      shift and go to state 184
    const                          shift and go to state 45
    andexpr                        shift and go to state 36
    eqexpr                         shift and go to state 50

state 179

    (31) stmt -> LBRACE body . RBRACE

    RBRACE          shift and go to state 185


state 180

    (37) stmt -> CONTINUE SEMICOL .

    SEMICOL         reduce using rule 37 (stmt -> CONTINUE SEMICOL .)
    LBRACE          reduce using rule 37 (stmt -> CONTINUE SEMICOL .)
    WHILE           reduce using rule 37 (stmt -> CONTINUE SEMICOL .)
    FOR             reduce using rule 37 (stmt -> CONTINUE SEMICOL .)
    IF              reduce using rule 37 (stmt -> CONTINUE SEMICOL .)
    CONTINUE        reduce using rule 37 (stmt -> CONTINUE SEMICOL .)
    BREAK           reduce using rule 37 (stmt -> CONTINUE SEMICOL .)
    RETURN          reduce using rule 37 (stmt -> CONTINUE SEMICOL .)
    TIMES           reduce using rule 37 (stmt -> CONTINUE SEMICOL .)
    ID              reduce using rule 37 (stmt -> CONTINUE SEMICOL .)
    LPAREN          reduce using rule 37 (stmt -> CONTINUE SEMICOL .)
    IVAL            reduce using rule 37 (stmt -> CONTINUE SEMICOL .)
    FVAL            reduce using rule 37 (stmt -> CONTINUE SEMICOL .)
    SVAL            reduce using rule 37 (stmt -> CONTINUE SEMICOL .)
    CVAL            reduce using rule 37 (stmt -> CONTINUE SEMICOL .)
    AND             reduce using rule 37 (stmt -> CONTINUE SEMICOL .)
    INC             reduce using rule 37 (stmt -> CONTINUE SEMICOL .)
    DEC             reduce using rule 37 (stmt -> CONTINUE SEMICOL .)
    PLUS            reduce using rule 37 (stmt -> CONTINUE SEMICOL .)
    MINUS           reduce using rule 37 (stmt -> CONTINUE SEMICOL .)
    NOT             reduce using rule 37 (stmt -> CONTINUE SEMICOL .)
    LNOT            reduce using rule 37 (stmt -> CONTINUE SEMICOL .)
    RBRACE          reduce using rule 37 (stmt -> CONTINUE SEMICOL .)
    ELSE            reduce using rule 37 (stmt -> CONTINUE SEMICOL .)


state 181

    (33) stmt -> WHILE LPAREN expr_many . RPAREN stmt
    (104) expr_many -> expr_many . COMMA expr

    RPAREN          shift and go to state 186
    COMMA           shift and go to state 119


state 182

    (40) stmt -> RETURN expr_many SEMICOL .

    SEMICOL         reduce using rule 40 (stmt -> RETURN expr_many SEMICOL .)
    LBRACE          reduce using rule 40 (stmt -> RETURN expr_many SEMICOL .)
    WHILE           reduce using rule 40 (stmt -> RETURN expr_many SEMICOL .)
    FOR             reduce using rule 40 (stmt -> RETURN expr_many SEMICOL .)
    IF              reduce using rule 40 (stmt -> RETURN expr_many SEMICOL .)
    CONTINUE        reduce using rule 40 (stmt -> RETURN expr_many SEMICOL .)
    BREAK           reduce using rule 40 (stmt -> RETURN expr_many SEMICOL .)
    RETURN          reduce using rule 40 (stmt -> RETURN expr_many SEMICOL .)
    TIMES           reduce using rule 40 (stmt -> RETURN expr_many SEMICOL .)
    ID              reduce using rule 40 (stmt -> RETURN expr_many SEMICOL .)
    LPAREN          reduce using rule 40 (stmt -> RETURN expr_many SEMICOL .)
    IVAL            reduce using rule 40 (stmt -> RETURN expr_many SEMICOL .)
    FVAL            reduce using rule 40 (stmt -> RETURN expr_many SEMICOL .)
    SVAL            reduce using rule 40 (stmt -> RETURN expr_many SEMICOL .)
    CVAL            reduce using rule 40 (stmt -> RETURN expr_many SEMICOL .)
    AND             reduce using rule 40 (stmt -> RETURN expr_many SEMICOL .)
    INC             reduce using rule 40 (stmt -> RETURN expr_many SEMICOL .)
    DEC             reduce using rule 40 (stmt -> RETURN expr_many SEMICOL .)
    PLUS            reduce using rule 40 (stmt -> RETURN expr_many SEMICOL .)
    MINUS           reduce using rule 40 (stmt -> RETURN expr_many SEMICOL .)
    NOT             reduce using rule 40 (stmt -> RETURN expr_many SEMICOL .)
    LNOT            reduce using rule 40 (stmt -> RETURN expr_many SEMICOL .)
    RBRACE          reduce using rule 40 (stmt -> RETURN expr_many SEMICOL .)
    ELSE            reduce using rule 40 (stmt -> RETURN expr_many SEMICOL .)


state 183

    (34) stmt -> FOR LPAREN expr_many . SEMICOL expr_many SEMICOL expr_many RPAREN stmt
    (104) expr_many -> expr_many . COMMA expr

    SEMICOL         shift and go to state 187
    COMMA           shift and go to state 119


state 184

    (35) stmt -> IF LPAREN expr_many . RPAREN stmt
    (36) stmt -> IF LPAREN expr_many . RPAREN stmt ELSE stmt
    (104) expr_many -> expr_many . COMMA expr

    RPAREN          shift and go to state 188
    COMMA           shift and go to state 119


state 185

    (31) stmt -> LBRACE body RBRACE .

    SEMICOL         reduce using rule 31 (stmt -> LBRACE body RBRACE .)
    LBRACE          reduce using rule 31 (stmt -> LBRACE body RBRACE .)
    WHILE           reduce using rule 31 (stmt -> LBRACE body RBRACE .)
    FOR             reduce using rule 31 (stmt -> LBRACE body RBRACE .)
    IF              reduce using rule 31 (stmt -> LBRACE body RBRACE .)
    CONTINUE        reduce using rule 31 (stmt -> LBRACE body RBRACE .)
    BREAK           reduce using rule 31 (stmt -> LBRACE body RBRACE .)
    RETURN          reduce using rule 31 (stmt -> LBRACE body RBRACE .)
    TIMES           reduce using rule 31 (stmt -> LBRACE body RBRACE .)
    ID              reduce using rule 31 (stmt -> LBRACE body RBRACE .)
    LPAREN          reduce using rule 31 (stmt -> LBRACE body RBRACE .)
    IVAL            reduce using rule 31 (stmt -> LBRACE body RBRACE .)
    FVAL            reduce using rule 31 (stmt -> LBRACE body RBRACE .)
    SVAL            reduce using rule 31 (stmt -> LBRACE body RBRACE .)
    CVAL            reduce using rule 31 (stmt -> LBRACE body RBRACE .)
    AND             reduce using rule 31 (stmt -> LBRACE body RBRACE .)
    INC             reduce using rule 31 (stmt -> LBRACE body RBRACE .)
    DEC             reduce using rule 31 (stmt -> LBRACE body RBRACE .)
    PLUS            reduce using rule 31 (stmt -> LBRACE body RBRACE .)
    MINUS           reduce using rule 31 (stmt -> LBRACE body RBRACE .)
    NOT             reduce using rule 31 (stmt -> LBRACE body RBRACE .)
    LNOT            reduce using rule 31 (stmt -> LBRACE body RBRACE .)
    RBRACE          reduce using rule 31 (stmt -> LBRACE body RBRACE .)
    ELSE            reduce using rule 31 (stmt -> LBRACE body RBRACE .)


state 186

    (33) stmt -> WHILE LPAREN expr_many RPAREN . stmt
    (30) stmt -> . SEMICOL
    (31) stmt -> . LBRACE body RBRACE
    (32) stmt -> . expr_many SEMICOL
    (33) stmt -> . WHILE LPAREN expr_many RPAREN stmt
    (34) stmt -> . FOR LPAREN expr_many SEMICOL expr_many SEMICOL expr_many RPAREN stmt
    (35) stmt -> . IF LPAREN expr_many RPAREN stmt
    (36) stmt -> . IF LPAREN expr_many RPAREN stmt ELSE stmt
    (37) stmt -> . CONTINUE SEMICOL
    (38) stmt -> . BREAK SEMICOL
    (39) stmt -> . RETURN SEMICOL
    (40) stmt -> . RETURN expr_many SEMICOL
    (103) expr_many -> . expr
    (104) expr_many -> . expr_many COMMA expr
    (89) expr -> . lorexpr
    (90) expr -> . postexpr assign_op expr
    (91) expr -> . TIMES unaryexpr assign_op expr
    (87) lorexpr -> . landexpr
    (88) lorexpr -> . lorexpr LOR landexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (85) landexpr -> . orexpr
    (86) landexpr -> . landexpr LAND orexpr
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (83) orexpr -> . xorexpr
    (84) orexpr -> . orexpr OR xorexpr
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL
    (81) xorexpr -> . andexpr
    (82) xorexpr -> . xorexpr XOR andexpr
    (79) andexpr -> . eqexpr
    (80) andexpr -> . andexpr AND eqexpr
    (76) eqexpr -> . relexpr
    (77) eqexpr -> . eqexpr EQ relexpr
    (78) eqexpr -> . eqexpr NE relexpr
    (71) relexpr -> . shiftexpr
    (72) relexpr -> . relexpr LE shiftexpr
    (73) relexpr -> . relexpr GE shiftexpr
    (74) relexpr -> . relexpr LEQ shiftexpr
    (75) relexpr -> . relexpr GEQ shiftexpr
    (68) shiftexpr -> . addexpr
    (69) shiftexpr -> . shiftexpr LSHIFT addexpr
    (70) shiftexpr -> . shiftexpr RSHIFT addexpr
    (65) addexpr -> . multexpr
    (66) addexpr -> . addexpr PLUS multexpr
    (67) addexpr -> . addexpr MINUS multexpr
    (61) multexpr -> . unaryexpr
    (62) multexpr -> . multexpr TIMES unaryexpr
    (63) multexpr -> . multexpr DIVIDE unaryexpr
    (64) multexpr -> . multexpr MOD unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr

    SEMICOL         shift and go to state 168
    LBRACE          shift and go to state 165
    WHILE           shift and go to state 156
    FOR             shift and go to state 161
    IF              shift and go to state 164
    CONTINUE        shift and go to state 166
    BREAK           shift and go to state 162
    RETURN          shift and go to state 158
    TIMES           shift and go to state 37
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57
    AND             shift and go to state 58
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34

    shiftexpr                      shift and go to state 31
    xorexpr                        shift and go to state 38
    unaryexpr                      shift and go to state 39
    priexpr                        shift and go to state 51
    lorexpr                        shift and go to state 56
    addexpr                        shift and go to state 44
    landexpr                       shift and go to state 41
    orexpr                         shift and go to state 33
    multexpr                       shift and go to state 54
    postexpr                       shift and go to state 48
    stmt                           shift and go to state 189
    relexpr                        shift and go to state 59
    expr                           shift and go to state 70
    expr_many                      shift and go to state 157
    const                          shift and go to state 45
    andexpr                        shift and go to state 36
    eqexpr                         shift and go to state 50

state 187

    (34) stmt -> FOR LPAREN expr_many SEMICOL . expr_many SEMICOL expr_many RPAREN stmt
    (103) expr_many -> . expr
    (104) expr_many -> . expr_many COMMA expr
    (89) expr -> . lorexpr
    (90) expr -> . postexpr assign_op expr
    (91) expr -> . TIMES unaryexpr assign_op expr
    (87) lorexpr -> . landexpr
    (88) lorexpr -> . lorexpr LOR landexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (85) landexpr -> . orexpr
    (86) landexpr -> . landexpr LAND orexpr
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (83) orexpr -> . xorexpr
    (84) orexpr -> . orexpr OR xorexpr
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL
    (81) xorexpr -> . andexpr
    (82) xorexpr -> . xorexpr XOR andexpr
    (79) andexpr -> . eqexpr
    (80) andexpr -> . andexpr AND eqexpr
    (76) eqexpr -> . relexpr
    (77) eqexpr -> . eqexpr EQ relexpr
    (78) eqexpr -> . eqexpr NE relexpr
    (71) relexpr -> . shiftexpr
    (72) relexpr -> . relexpr LE shiftexpr
    (73) relexpr -> . relexpr GE shiftexpr
    (74) relexpr -> . relexpr LEQ shiftexpr
    (75) relexpr -> . relexpr GEQ shiftexpr
    (68) shiftexpr -> . addexpr
    (69) shiftexpr -> . shiftexpr LSHIFT addexpr
    (70) shiftexpr -> . shiftexpr RSHIFT addexpr
    (65) addexpr -> . multexpr
    (66) addexpr -> . addexpr PLUS multexpr
    (67) addexpr -> . addexpr MINUS multexpr
    (61) multexpr -> . unaryexpr
    (62) multexpr -> . multexpr TIMES unaryexpr
    (63) multexpr -> . multexpr DIVIDE unaryexpr
    (64) multexpr -> . multexpr MOD unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr

    TIMES           shift and go to state 37
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57
    AND             shift and go to state 58
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34

    shiftexpr                      shift and go to state 31
    xorexpr                        shift and go to state 38
    unaryexpr                      shift and go to state 39
    priexpr                        shift and go to state 51
    lorexpr                        shift and go to state 56
    addexpr                        shift and go to state 44
    landexpr                       shift and go to state 41
    orexpr                         shift and go to state 33
    multexpr                       shift and go to state 54
    postexpr                       shift and go to state 48
    relexpr                        shift and go to state 59
    expr                           shift and go to state 70
    expr_many                      shift and go to state 190
    const                          shift and go to state 45
    andexpr                        shift and go to state 36
    eqexpr                         shift and go to state 50

state 188

    (35) stmt -> IF LPAREN expr_many RPAREN . stmt
    (36) stmt -> IF LPAREN expr_many RPAREN . stmt ELSE stmt
    (30) stmt -> . SEMICOL
    (31) stmt -> . LBRACE body RBRACE
    (32) stmt -> . expr_many SEMICOL
    (33) stmt -> . WHILE LPAREN expr_many RPAREN stmt
    (34) stmt -> . FOR LPAREN expr_many SEMICOL expr_many SEMICOL expr_many RPAREN stmt
    (35) stmt -> . IF LPAREN expr_many RPAREN stmt
    (36) stmt -> . IF LPAREN expr_many RPAREN stmt ELSE stmt
    (37) stmt -> . CONTINUE SEMICOL
    (38) stmt -> . BREAK SEMICOL
    (39) stmt -> . RETURN SEMICOL
    (40) stmt -> . RETURN expr_many SEMICOL
    (103) expr_many -> . expr
    (104) expr_many -> . expr_many COMMA expr
    (89) expr -> . lorexpr
    (90) expr -> . postexpr assign_op expr
    (91) expr -> . TIMES unaryexpr assign_op expr
    (87) lorexpr -> . landexpr
    (88) lorexpr -> . lorexpr LOR landexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (85) landexpr -> . orexpr
    (86) landexpr -> . landexpr LAND orexpr
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (83) orexpr -> . xorexpr
    (84) orexpr -> . orexpr OR xorexpr
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL
    (81) xorexpr -> . andexpr
    (82) xorexpr -> . xorexpr XOR andexpr
    (79) andexpr -> . eqexpr
    (80) andexpr -> . andexpr AND eqexpr
    (76) eqexpr -> . relexpr
    (77) eqexpr -> . eqexpr EQ relexpr
    (78) eqexpr -> . eqexpr NE relexpr
    (71) relexpr -> . shiftexpr
    (72) relexpr -> . relexpr LE shiftexpr
    (73) relexpr -> . relexpr GE shiftexpr
    (74) relexpr -> . relexpr LEQ shiftexpr
    (75) relexpr -> . relexpr GEQ shiftexpr
    (68) shiftexpr -> . addexpr
    (69) shiftexpr -> . shiftexpr LSHIFT addexpr
    (70) shiftexpr -> . shiftexpr RSHIFT addexpr
    (65) addexpr -> . multexpr
    (66) addexpr -> . addexpr PLUS multexpr
    (67) addexpr -> . addexpr MINUS multexpr
    (61) multexpr -> . unaryexpr
    (62) multexpr -> . multexpr TIMES unaryexpr
    (63) multexpr -> . multexpr DIVIDE unaryexpr
    (64) multexpr -> . multexpr MOD unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr

    SEMICOL         shift and go to state 168
    LBRACE          shift and go to state 165
    WHILE           shift and go to state 156
    FOR             shift and go to state 161
    IF              shift and go to state 164
    CONTINUE        shift and go to state 166
    BREAK           shift and go to state 162
    RETURN          shift and go to state 158
    TIMES           shift and go to state 37
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57
    AND             shift and go to state 58
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34

    shiftexpr                      shift and go to state 31
    xorexpr                        shift and go to state 38
    unaryexpr                      shift and go to state 39
    priexpr                        shift and go to state 51
    lorexpr                        shift and go to state 56
    addexpr                        shift and go to state 44
    landexpr                       shift and go to state 41
    orexpr                         shift and go to state 33
    multexpr                       shift and go to state 54
    postexpr                       shift and go to state 48
    stmt                           shift and go to state 191
    relexpr                        shift and go to state 59
    expr                           shift and go to state 70
    expr_many                      shift and go to state 157
    const                          shift and go to state 45
    andexpr                        shift and go to state 36
    eqexpr                         shift and go to state 50

state 189

    (33) stmt -> WHILE LPAREN expr_many RPAREN stmt .

    SEMICOL         reduce using rule 33 (stmt -> WHILE LPAREN expr_many RPAREN stmt .)
    LBRACE          reduce using rule 33 (stmt -> WHILE LPAREN expr_many RPAREN stmt .)
    WHILE           reduce using rule 33 (stmt -> WHILE LPAREN expr_many RPAREN stmt .)
    FOR             reduce using rule 33 (stmt -> WHILE LPAREN expr_many RPAREN stmt .)
    IF              reduce using rule 33 (stmt -> WHILE LPAREN expr_many RPAREN stmt .)
    CONTINUE        reduce using rule 33 (stmt -> WHILE LPAREN expr_many RPAREN stmt .)
    BREAK           reduce using rule 33 (stmt -> WHILE LPAREN expr_many RPAREN stmt .)
    RETURN          reduce using rule 33 (stmt -> WHILE LPAREN expr_many RPAREN stmt .)
    TIMES           reduce using rule 33 (stmt -> WHILE LPAREN expr_many RPAREN stmt .)
    ID              reduce using rule 33 (stmt -> WHILE LPAREN expr_many RPAREN stmt .)
    LPAREN          reduce using rule 33 (stmt -> WHILE LPAREN expr_many RPAREN stmt .)
    IVAL            reduce using rule 33 (stmt -> WHILE LPAREN expr_many RPAREN stmt .)
    FVAL            reduce using rule 33 (stmt -> WHILE LPAREN expr_many RPAREN stmt .)
    SVAL            reduce using rule 33 (stmt -> WHILE LPAREN expr_many RPAREN stmt .)
    CVAL            reduce using rule 33 (stmt -> WHILE LPAREN expr_many RPAREN stmt .)
    AND             reduce using rule 33 (stmt -> WHILE LPAREN expr_many RPAREN stmt .)
    INC             reduce using rule 33 (stmt -> WHILE LPAREN expr_many RPAREN stmt .)
    DEC             reduce using rule 33 (stmt -> WHILE LPAREN expr_many RPAREN stmt .)
    PLUS            reduce using rule 33 (stmt -> WHILE LPAREN expr_many RPAREN stmt .)
    MINUS           reduce using rule 33 (stmt -> WHILE LPAREN expr_many RPAREN stmt .)
    NOT             reduce using rule 33 (stmt -> WHILE LPAREN expr_many RPAREN stmt .)
    LNOT            reduce using rule 33 (stmt -> WHILE LPAREN expr_many RPAREN stmt .)
    RBRACE          reduce using rule 33 (stmt -> WHILE LPAREN expr_many RPAREN stmt .)
    ELSE            reduce using rule 33 (stmt -> WHILE LPAREN expr_many RPAREN stmt .)


state 190

    (34) stmt -> FOR LPAREN expr_many SEMICOL expr_many . SEMICOL expr_many RPAREN stmt
    (104) expr_many -> expr_many . COMMA expr

    SEMICOL         shift and go to state 192
    COMMA           shift and go to state 119


state 191

    (35) stmt -> IF LPAREN expr_many RPAREN stmt .
    (36) stmt -> IF LPAREN expr_many RPAREN stmt . ELSE stmt

    SEMICOL         reduce using rule 35 (stmt -> IF LPAREN expr_many RPAREN stmt .)
    LBRACE          reduce using rule 35 (stmt -> IF LPAREN expr_many RPAREN stmt .)
    WHILE           reduce using rule 35 (stmt -> IF LPAREN expr_many RPAREN stmt .)
    FOR             reduce using rule 35 (stmt -> IF LPAREN expr_many RPAREN stmt .)
    IF              reduce using rule 35 (stmt -> IF LPAREN expr_many RPAREN stmt .)
    CONTINUE        reduce using rule 35 (stmt -> IF LPAREN expr_many RPAREN stmt .)
    BREAK           reduce using rule 35 (stmt -> IF LPAREN expr_many RPAREN stmt .)
    RETURN          reduce using rule 35 (stmt -> IF LPAREN expr_many RPAREN stmt .)
    TIMES           reduce using rule 35 (stmt -> IF LPAREN expr_many RPAREN stmt .)
    ID              reduce using rule 35 (stmt -> IF LPAREN expr_many RPAREN stmt .)
    LPAREN          reduce using rule 35 (stmt -> IF LPAREN expr_many RPAREN stmt .)
    IVAL            reduce using rule 35 (stmt -> IF LPAREN expr_many RPAREN stmt .)
    FVAL            reduce using rule 35 (stmt -> IF LPAREN expr_many RPAREN stmt .)
    SVAL            reduce using rule 35 (stmt -> IF LPAREN expr_many RPAREN stmt .)
    CVAL            reduce using rule 35 (stmt -> IF LPAREN expr_many RPAREN stmt .)
    AND             reduce using rule 35 (stmt -> IF LPAREN expr_many RPAREN stmt .)
    INC             reduce using rule 35 (stmt -> IF LPAREN expr_many RPAREN stmt .)
    DEC             reduce using rule 35 (stmt -> IF LPAREN expr_many RPAREN stmt .)
    PLUS            reduce using rule 35 (stmt -> IF LPAREN expr_many RPAREN stmt .)
    MINUS           reduce using rule 35 (stmt -> IF LPAREN expr_many RPAREN stmt .)
    NOT             reduce using rule 35 (stmt -> IF LPAREN expr_many RPAREN stmt .)
    LNOT            reduce using rule 35 (stmt -> IF LPAREN expr_many RPAREN stmt .)
    RBRACE          reduce using rule 35 (stmt -> IF LPAREN expr_many RPAREN stmt .)
    ELSE            shift and go to state 193

  ! ELSE            [ reduce using rule 35 (stmt -> IF LPAREN expr_many RPAREN stmt .) ]


state 192

    (34) stmt -> FOR LPAREN expr_many SEMICOL expr_many SEMICOL . expr_many RPAREN stmt
    (103) expr_many -> . expr
    (104) expr_many -> . expr_many COMMA expr
    (89) expr -> . lorexpr
    (90) expr -> . postexpr assign_op expr
    (91) expr -> . TIMES unaryexpr assign_op expr
    (87) lorexpr -> . landexpr
    (88) lorexpr -> . lorexpr LOR landexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (85) landexpr -> . orexpr
    (86) landexpr -> . landexpr LAND orexpr
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (83) orexpr -> . xorexpr
    (84) orexpr -> . orexpr OR xorexpr
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL
    (81) xorexpr -> . andexpr
    (82) xorexpr -> . xorexpr XOR andexpr
    (79) andexpr -> . eqexpr
    (80) andexpr -> . andexpr AND eqexpr
    (76) eqexpr -> . relexpr
    (77) eqexpr -> . eqexpr EQ relexpr
    (78) eqexpr -> . eqexpr NE relexpr
    (71) relexpr -> . shiftexpr
    (72) relexpr -> . relexpr LE shiftexpr
    (73) relexpr -> . relexpr GE shiftexpr
    (74) relexpr -> . relexpr LEQ shiftexpr
    (75) relexpr -> . relexpr GEQ shiftexpr
    (68) shiftexpr -> . addexpr
    (69) shiftexpr -> . shiftexpr LSHIFT addexpr
    (70) shiftexpr -> . shiftexpr RSHIFT addexpr
    (65) addexpr -> . multexpr
    (66) addexpr -> . addexpr PLUS multexpr
    (67) addexpr -> . addexpr MINUS multexpr
    (61) multexpr -> . unaryexpr
    (62) multexpr -> . multexpr TIMES unaryexpr
    (63) multexpr -> . multexpr DIVIDE unaryexpr
    (64) multexpr -> . multexpr MOD unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr

    TIMES           shift and go to state 37
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57
    AND             shift and go to state 58
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34

    shiftexpr                      shift and go to state 31
    xorexpr                        shift and go to state 38
    unaryexpr                      shift and go to state 39
    priexpr                        shift and go to state 51
    lorexpr                        shift and go to state 56
    addexpr                        shift and go to state 44
    landexpr                       shift and go to state 41
    orexpr                         shift and go to state 33
    multexpr                       shift and go to state 54
    postexpr                       shift and go to state 48
    relexpr                        shift and go to state 59
    expr                           shift and go to state 70
    expr_many                      shift and go to state 194
    const                          shift and go to state 45
    andexpr                        shift and go to state 36
    eqexpr                         shift and go to state 50

state 193

    (36) stmt -> IF LPAREN expr_many RPAREN stmt ELSE . stmt
    (30) stmt -> . SEMICOL
    (31) stmt -> . LBRACE body RBRACE
    (32) stmt -> . expr_many SEMICOL
    (33) stmt -> . WHILE LPAREN expr_many RPAREN stmt
    (34) stmt -> . FOR LPAREN expr_many SEMICOL expr_many SEMICOL expr_many RPAREN stmt
    (35) stmt -> . IF LPAREN expr_many RPAREN stmt
    (36) stmt -> . IF LPAREN expr_many RPAREN stmt ELSE stmt
    (37) stmt -> . CONTINUE SEMICOL
    (38) stmt -> . BREAK SEMICOL
    (39) stmt -> . RETURN SEMICOL
    (40) stmt -> . RETURN expr_many SEMICOL
    (103) expr_many -> . expr
    (104) expr_many -> . expr_many COMMA expr
    (89) expr -> . lorexpr
    (90) expr -> . postexpr assign_op expr
    (91) expr -> . TIMES unaryexpr assign_op expr
    (87) lorexpr -> . landexpr
    (88) lorexpr -> . lorexpr LOR landexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (85) landexpr -> . orexpr
    (86) landexpr -> . landexpr LAND orexpr
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (83) orexpr -> . xorexpr
    (84) orexpr -> . orexpr OR xorexpr
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL
    (81) xorexpr -> . andexpr
    (82) xorexpr -> . xorexpr XOR andexpr
    (79) andexpr -> . eqexpr
    (80) andexpr -> . andexpr AND eqexpr
    (76) eqexpr -> . relexpr
    (77) eqexpr -> . eqexpr EQ relexpr
    (78) eqexpr -> . eqexpr NE relexpr
    (71) relexpr -> . shiftexpr
    (72) relexpr -> . relexpr LE shiftexpr
    (73) relexpr -> . relexpr GE shiftexpr
    (74) relexpr -> . relexpr LEQ shiftexpr
    (75) relexpr -> . relexpr GEQ shiftexpr
    (68) shiftexpr -> . addexpr
    (69) shiftexpr -> . shiftexpr LSHIFT addexpr
    (70) shiftexpr -> . shiftexpr RSHIFT addexpr
    (65) addexpr -> . multexpr
    (66) addexpr -> . addexpr PLUS multexpr
    (67) addexpr -> . addexpr MINUS multexpr
    (61) multexpr -> . unaryexpr
    (62) multexpr -> . multexpr TIMES unaryexpr
    (63) multexpr -> . multexpr DIVIDE unaryexpr
    (64) multexpr -> . multexpr MOD unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr

    SEMICOL         shift and go to state 168
    LBRACE          shift and go to state 165
    WHILE           shift and go to state 156
    FOR             shift and go to state 161
    IF              shift and go to state 164
    CONTINUE        shift and go to state 166
    BREAK           shift and go to state 162
    RETURN          shift and go to state 158
    TIMES           shift and go to state 37
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57
    AND             shift and go to state 58
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34

    shiftexpr                      shift and go to state 31
    xorexpr                        shift and go to state 38
    unaryexpr                      shift and go to state 39
    priexpr                        shift and go to state 51
    lorexpr                        shift and go to state 56
    addexpr                        shift and go to state 44
    landexpr                       shift and go to state 41
    orexpr                         shift and go to state 33
    multexpr                       shift and go to state 54
    postexpr                       shift and go to state 48
    stmt                           shift and go to state 195
    relexpr                        shift and go to state 59
    expr                           shift and go to state 70
    expr_many                      shift and go to state 157
    const                          shift and go to state 45
    andexpr                        shift and go to state 36
    eqexpr                         shift and go to state 50

state 194

    (34) stmt -> FOR LPAREN expr_many SEMICOL expr_many SEMICOL expr_many . RPAREN stmt
    (104) expr_many -> expr_many . COMMA expr

    RPAREN          shift and go to state 196
    COMMA           shift and go to state 119


state 195

    (36) stmt -> IF LPAREN expr_many RPAREN stmt ELSE stmt .

    SEMICOL         reduce using rule 36 (stmt -> IF LPAREN expr_many RPAREN stmt ELSE stmt .)
    LBRACE          reduce using rule 36 (stmt -> IF LPAREN expr_many RPAREN stmt ELSE stmt .)
    WHILE           reduce using rule 36 (stmt -> IF LPAREN expr_many RPAREN stmt ELSE stmt .)
    FOR             reduce using rule 36 (stmt -> IF LPAREN expr_many RPAREN stmt ELSE stmt .)
    IF              reduce using rule 36 (stmt -> IF LPAREN expr_many RPAREN stmt ELSE stmt .)
    CONTINUE        reduce using rule 36 (stmt -> IF LPAREN expr_many RPAREN stmt ELSE stmt .)
    BREAK           reduce using rule 36 (stmt -> IF LPAREN expr_many RPAREN stmt ELSE stmt .)
    RETURN          reduce using rule 36 (stmt -> IF LPAREN expr_many RPAREN stmt ELSE stmt .)
    TIMES           reduce using rule 36 (stmt -> IF LPAREN expr_many RPAREN stmt ELSE stmt .)
    ID              reduce using rule 36 (stmt -> IF LPAREN expr_many RPAREN stmt ELSE stmt .)
    LPAREN          reduce using rule 36 (stmt -> IF LPAREN expr_many RPAREN stmt ELSE stmt .)
    IVAL            reduce using rule 36 (stmt -> IF LPAREN expr_many RPAREN stmt ELSE stmt .)
    FVAL            reduce using rule 36 (stmt -> IF LPAREN expr_many RPAREN stmt ELSE stmt .)
    SVAL            reduce using rule 36 (stmt -> IF LPAREN expr_many RPAREN stmt ELSE stmt .)
    CVAL            reduce using rule 36 (stmt -> IF LPAREN expr_many RPAREN stmt ELSE stmt .)
    AND             reduce using rule 36 (stmt -> IF LPAREN expr_many RPAREN stmt ELSE stmt .)
    INC             reduce using rule 36 (stmt -> IF LPAREN expr_many RPAREN stmt ELSE stmt .)
    DEC             reduce using rule 36 (stmt -> IF LPAREN expr_many RPAREN stmt ELSE stmt .)
    PLUS            reduce using rule 36 (stmt -> IF LPAREN expr_many RPAREN stmt ELSE stmt .)
    MINUS           reduce using rule 36 (stmt -> IF LPAREN expr_many RPAREN stmt ELSE stmt .)
    NOT             reduce using rule 36 (stmt -> IF LPAREN expr_many RPAREN stmt ELSE stmt .)
    LNOT            reduce using rule 36 (stmt -> IF LPAREN expr_many RPAREN stmt ELSE stmt .)
    RBRACE          reduce using rule 36 (stmt -> IF LPAREN expr_many RPAREN stmt ELSE stmt .)
    ELSE            reduce using rule 36 (stmt -> IF LPAREN expr_many RPAREN stmt ELSE stmt .)


state 196

    (34) stmt -> FOR LPAREN expr_many SEMICOL expr_many SEMICOL expr_many RPAREN . stmt
    (30) stmt -> . SEMICOL
    (31) stmt -> . LBRACE body RBRACE
    (32) stmt -> . expr_many SEMICOL
    (33) stmt -> . WHILE LPAREN expr_many RPAREN stmt
    (34) stmt -> . FOR LPAREN expr_many SEMICOL expr_many SEMICOL expr_many RPAREN stmt
    (35) stmt -> . IF LPAREN expr_many RPAREN stmt
    (36) stmt -> . IF LPAREN expr_many RPAREN stmt ELSE stmt
    (37) stmt -> . CONTINUE SEMICOL
    (38) stmt -> . BREAK SEMICOL
    (39) stmt -> . RETURN SEMICOL
    (40) stmt -> . RETURN expr_many SEMICOL
    (103) expr_many -> . expr
    (104) expr_many -> . expr_many COMMA expr
    (89) expr -> . lorexpr
    (90) expr -> . postexpr assign_op expr
    (91) expr -> . TIMES unaryexpr assign_op expr
    (87) lorexpr -> . landexpr
    (88) lorexpr -> . lorexpr LOR landexpr
    (44) postexpr -> . priexpr
    (45) postexpr -> . postexpr LBRACK expr_many RBRACK
    (46) postexpr -> . postexpr LPAREN RPAREN
    (47) postexpr -> . postexpr LPAREN argexpr_list RPAREN
    (48) postexpr -> . postexpr INC
    (49) postexpr -> . postexpr DEC
    (85) landexpr -> . orexpr
    (86) landexpr -> . landexpr LAND orexpr
    (41) priexpr -> . ID
    (42) priexpr -> . const
    (43) priexpr -> . LPAREN expr_many RPAREN
    (83) orexpr -> . xorexpr
    (84) orexpr -> . orexpr OR xorexpr
    (110) const -> . IVAL
    (111) const -> . FVAL
    (112) const -> . SVAL
    (113) const -> . CVAL
    (81) xorexpr -> . andexpr
    (82) xorexpr -> . xorexpr XOR andexpr
    (79) andexpr -> . eqexpr
    (80) andexpr -> . andexpr AND eqexpr
    (76) eqexpr -> . relexpr
    (77) eqexpr -> . eqexpr EQ relexpr
    (78) eqexpr -> . eqexpr NE relexpr
    (71) relexpr -> . shiftexpr
    (72) relexpr -> . relexpr LE shiftexpr
    (73) relexpr -> . relexpr GE shiftexpr
    (74) relexpr -> . relexpr LEQ shiftexpr
    (75) relexpr -> . relexpr GEQ shiftexpr
    (68) shiftexpr -> . addexpr
    (69) shiftexpr -> . shiftexpr LSHIFT addexpr
    (70) shiftexpr -> . shiftexpr RSHIFT addexpr
    (65) addexpr -> . multexpr
    (66) addexpr -> . addexpr PLUS multexpr
    (67) addexpr -> . addexpr MINUS multexpr
    (61) multexpr -> . unaryexpr
    (62) multexpr -> . multexpr TIMES unaryexpr
    (63) multexpr -> . multexpr DIVIDE unaryexpr
    (64) multexpr -> . multexpr MOD unaryexpr
    (52) unaryexpr -> . postexpr
    (53) unaryexpr -> . AND unaryexpr
    (54) unaryexpr -> . TIMES unaryexpr
    (55) unaryexpr -> . INC unaryexpr
    (56) unaryexpr -> . DEC unaryexpr
    (57) unaryexpr -> . PLUS unaryexpr
    (58) unaryexpr -> . MINUS unaryexpr
    (59) unaryexpr -> . NOT unaryexpr
    (60) unaryexpr -> . LNOT unaryexpr

    SEMICOL         shift and go to state 168
    LBRACE          shift and go to state 165
    WHILE           shift and go to state 156
    FOR             shift and go to state 161
    IF              shift and go to state 164
    CONTINUE        shift and go to state 166
    BREAK           shift and go to state 162
    RETURN          shift and go to state 158
    TIMES           shift and go to state 37
    ID              shift and go to state 52
    LPAREN          shift and go to state 32
    IVAL            shift and go to state 40
    FVAL            shift and go to state 53
    SVAL            shift and go to state 42
    CVAL            shift and go to state 57
    AND             shift and go to state 58
    INC             shift and go to state 46
    DEC             shift and go to state 49
    PLUS            shift and go to state 35
    MINUS           shift and go to state 55
    NOT             shift and go to state 47
    LNOT            shift and go to state 34

    shiftexpr                      shift and go to state 31
    xorexpr                        shift and go to state 38
    unaryexpr                      shift and go to state 39
    priexpr                        shift and go to state 51
    lorexpr                        shift and go to state 56
    addexpr                        shift and go to state 44
    landexpr                       shift and go to state 41
    orexpr                         shift and go to state 33
    multexpr                       shift and go to state 54
    postexpr                       shift and go to state 48
    stmt                           shift and go to state 197
    relexpr                        shift and go to state 59
    expr                           shift and go to state 70
    expr_many                      shift and go to state 157
    const                          shift and go to state 45
    andexpr                        shift and go to state 36
    eqexpr                         shift and go to state 50

state 197

    (34) stmt -> FOR LPAREN expr_many SEMICOL expr_many SEMICOL expr_many RPAREN stmt .

    SEMICOL         reduce using rule 34 (stmt -> FOR LPAREN expr_many SEMICOL expr_many SEMICOL expr_many RPAREN stmt .)
    LBRACE          reduce using rule 34 (stmt -> FOR LPAREN expr_many SEMICOL expr_many SEMICOL expr_many RPAREN stmt .)
    WHILE           reduce using rule 34 (stmt -> FOR LPAREN expr_many SEMICOL expr_many SEMICOL expr_many RPAREN stmt .)
    FOR             reduce using rule 34 (stmt -> FOR LPAREN expr_many SEMICOL expr_many SEMICOL expr_many RPAREN stmt .)
    IF              reduce using rule 34 (stmt -> FOR LPAREN expr_many SEMICOL expr_many SEMICOL expr_many RPAREN stmt .)
    CONTINUE        reduce using rule 34 (stmt -> FOR LPAREN expr_many SEMICOL expr_many SEMICOL expr_many RPAREN stmt .)
    BREAK           reduce using rule 34 (stmt -> FOR LPAREN expr_many SEMICOL expr_many SEMICOL expr_many RPAREN stmt .)
    RETURN          reduce using rule 34 (stmt -> FOR LPAREN expr_many SEMICOL expr_many SEMICOL expr_many RPAREN stmt .)
    TIMES           reduce using rule 34 (stmt -> FOR LPAREN expr_many SEMICOL expr_many SEMICOL expr_many RPAREN stmt .)
    ID              reduce using rule 34 (stmt -> FOR LPAREN expr_many SEMICOL expr_many SEMICOL expr_many RPAREN stmt .)
    LPAREN          reduce using rule 34 (stmt -> FOR LPAREN expr_many SEMICOL expr_many SEMICOL expr_many RPAREN stmt .)
    IVAL            reduce using rule 34 (stmt -> FOR LPAREN expr_many SEMICOL expr_many SEMICOL expr_many RPAREN stmt .)
    FVAL            reduce using rule 34 (stmt -> FOR LPAREN expr_many SEMICOL expr_many SEMICOL expr_many RPAREN stmt .)
    SVAL            reduce using rule 34 (stmt -> FOR LPAREN expr_many SEMICOL expr_many SEMICOL expr_many RPAREN stmt .)
    CVAL            reduce using rule 34 (stmt -> FOR LPAREN expr_many SEMICOL expr_many SEMICOL expr_many RPAREN stmt .)
    AND             reduce using rule 34 (stmt -> FOR LPAREN expr_many SEMICOL expr_many SEMICOL expr_many RPAREN stmt .)
    INC             reduce using rule 34 (stmt -> FOR LPAREN expr_many SEMICOL expr_many SEMICOL expr_many RPAREN stmt .)
    DEC             reduce using rule 34 (stmt -> FOR LPAREN expr_many SEMICOL expr_many SEMICOL expr_many RPAREN stmt .)
    PLUS            reduce using rule 34 (stmt -> FOR LPAREN expr_many SEMICOL expr_many SEMICOL expr_many RPAREN stmt .)
    MINUS           reduce using rule 34 (stmt -> FOR LPAREN expr_many SEMICOL expr_many SEMICOL expr_many RPAREN stmt .)
    NOT             reduce using rule 34 (stmt -> FOR LPAREN expr_many SEMICOL expr_many SEMICOL expr_many RPAREN stmt .)
    LNOT            reduce using rule 34 (stmt -> FOR LPAREN expr_many SEMICOL expr_many SEMICOL expr_many RPAREN stmt .)
    RBRACE          reduce using rule 34 (stmt -> FOR LPAREN expr_many SEMICOL expr_many SEMICOL expr_many RPAREN stmt .)
    ELSE            reduce using rule 34 (stmt -> FOR LPAREN expr_many SEMICOL expr_many SEMICOL expr_many RPAREN stmt .)

